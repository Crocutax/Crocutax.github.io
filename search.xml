<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[windows系统本地与远程服务器间的文件传输]]></title>
      <url>/2017/09/19/windows%E7%B3%BB%E7%BB%9F%E6%9C%AC%E5%9C%B0%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
      <content type="html"><![CDATA[<p>日常开发过程中，有些时候可能会用到本机和远程服务器间的文件传输，本文记录的是两台windows电脑间的文件传输，linux系统以后再说。</p>
<p>在mstsc成功建立远程桌面连接后，可以通过如下方式进行传输：</p>
<ul>
<li>直接粘贴、复制</li>
<li>第三方软件网络传输：QQ，邮箱附件，网盘……</li>
<li>本地磁盘共享</li>
<li>FTP文件传输</li>
</ul>
<p>这里主要说下后两者，即：<strong>本地磁盘共享</strong> 和 <strong>FTP文件传输</strong>。</p>
<h1 id="本地磁盘共享"><a href="#本地磁盘共享" class="headerlink" title="本地磁盘共享"></a>本地磁盘共享</h1><p>在mstsc建立远程桌面连接的时候，点击左下方的 <strong>显示选项</strong><br><img src="http://upload-images.jianshu.io/upload_images/1958298-e4eb38023552eacf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mstsc.png"></p>
<p>在弹出的选项卡中选择<code>本地资源 --&gt; 本地设备和资源 --&gt; 详细信息 --&gt; 驱动器 --&gt; 勾选{要共享的磁盘目录} --&gt; 确定</code><br><img src="http://upload-images.jianshu.io/upload_images/1958298-225711674a43ca02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择共享磁盘目录.png"></p>
<p>打开远程桌面我的电脑，可以看到我们共享的本地磁盘显示在设备列表中，接下来本地和远程电脑就可以通过这个磁盘进行文件传输了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-210642faf9867d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在远程桌面使用共享磁盘.png"></p>
<h1 id="FTP文件传输"><a href="#FTP文件传输" class="headerlink" title="FTP文件传输"></a>FTP文件传输</h1><p>通过 <strong>FileZilla</strong> 可以在远程服务器快速搭建FTP服务，还是比较简单的。</p>
<h2 id="FileZilla-Client"><a href="#FileZilla-Client" class="headerlink" title="FileZilla Client"></a>FileZilla Client</h2><p>客户端放在本地电脑，主窗口一目了然</p>
<ul>
<li>主机：远程服务器ip地址</li>
<li>连接状态log信息：成功、异常、失败信息都在这里显示</li>
<li>用户名、密码：需要在FileZilla Server端创建</li>
<li>远程share目录：需要在FileZilla Server端创建</li>
<li>文件传输列表：将需要传输的文件拖入该区域即可 </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-ca557e4ca30983e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FileZilla客户端.png"></p>
<h2 id="FileZilla-Server"><a href="#FileZilla-Server" class="headerlink" title="FileZilla Server"></a>FileZilla Server</h2><p>1、FileZilla 服务端 安装在远程服务器上，登陆后host为本机，port端口保持默认即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-b4792c7bd0d1e1ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FileZilla 服务端.png"></p>
<p>2、打开窗口<code>Edit --&gt; Users</code> 添加授权账户<br><img src="http://upload-images.jianshu.io/upload_images/1958298-a50b273f6283f8b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3、打开窗口<code>Edit --&gt; Users</code>，设置远程服务器端共享文件目录</p>
<ul>
<li>可以为多个目录，设置不同级别的访问权限</li>
<li>可以针对不同的目录，设置不同的授权用户</li>
<li>可以将 <code>Shared folders</code>目录列表中的某个目录设置为<code>home dir</code>，即根目录（单选，只能设置一个，前缀为<strong>H</strong> 标记）。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-1d1bdd43459693d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1、服务端（远程）启动之后，客户端（本地）通过设置主机ip、用户名、密码等信息建立连接，获取到远程根目录以后，就可以正常传输文件了。</p>
<p>2、文件传输完毕，会存在服务端指定的<code>shared folders</code>目录下。</p>
<p>如果遇到异常信息，往下继续看。</p>
<h2 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h2><h3 id="1-连接失败"><a href="#1-连接失败" class="headerlink" title="1.连接失败"></a>1.连接失败</h3><ul>
<li>公网IP有误</li>
<li>用户名密码有误（需要在服务端创建）</li>
<li>端口错误</li>
</ul>
<h3 id="2-安全性警告"><a href="#2-安全性警告" class="headerlink" title="2.安全性警告"></a>2.安全性警告</h3><blockquote>
<p>Warning: FTP over TLS is not enabled, users cannot securely log in.</p>
</blockquote>
<p>警告并不影响使用，如果想解决这个警告，可以在<code>Settings</code>中配置</p>
<h3 id="3-Passive-mode设置"><a href="#3-Passive-mode设置" class="headerlink" title="3.Passive mode设置"></a>3.Passive mode设置</h3><p>如果出现以下异常信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. You appear to be behind a NAT router. Please configure the passive mode settings and forward a range of ports in your router</div><div class="line"></div><div class="line">2. 425 Can&apos;t open data connection for transfer of &quot;/&quot;</div></pre></td></tr></table></figure>
<p>需要在 <code>Edit --&gt; Settings</code>中做如下配置：</p>
<ul>
<li>使用自定义端口（确保该端口已经开通入网规则）</li>
<li>设置公网ip</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-573a74ddb93d9aa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Settings.png"></p>
<p>当然，以上异常信息，还有可能由其他原因导致，因自己暂未遇到，先不做深究，等遇到时再搜索即可。</p>
<p>这里只记录了File Zilla的简单使用，至于用户分组、ip过滤、传输限速、安全设置等，可以根据自己需要再研究。</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用tomcat7插件将项目一键部署到远程tomcat服务器-热部署]]></title>
      <url>/2017/09/17/%E4%BD%BF%E7%94%A8tomcat7%E6%8F%92%E4%BB%B6%E5%B0%86%E9%A1%B9%E7%9B%AE%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8Btomcat%E6%9C%8D%E5%8A%A1%E5%99%A8-%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>现在用maven管理J2EE项目应该是常态了，在开发阶段我们经常需要经历反复的”修改代码-&gt;部署-&gt;测试”过程。如果每次修改完代码，都通过maven先clean-&gt;package，再手动到输出目录把打好的war包copy到tomcat的webapps下，多次的重复这种无意义的体力活会让人烦躁,而且显得没有程序员精神。</p>
<p>不得不说，有些时候“懒”还是有很多正面意义的。这篇文章就是介绍下如何通过tomcat7插件将项目一键部署到tomcat服务器的webapps目录下。命令很简单，主要是环境配置，以及踩坑记录。</p>
<p>实现tomcat热部署用到了:</p>
<ul>
<li>maven (项目构建和依赖管理)</li>
<li><a href="https://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/plugin-info.html" target="_blank" rel="external">tomcat7插件</a> (部署到tomcat的插件)</li>
<li>tomcat服务器 (web服务器)</li>
</ul>
<h1 id="1-添加tomcat用户及权限"><a href="#1-添加tomcat用户及权限" class="headerlink" title="1.添加tomcat用户及权限"></a>1.添加tomcat用户及权限</h1><p>由于涉及到tomcat的自动部署，所以需要具备tomcat的管理权限,而普通的tomcat用户是没有管理权限的，比如通过<code>{TOMCAT_HOME}/bin/startup.bat</code>启动tomcat之后，在首页右侧的<strong>Manager App</strong>中，需要先输入管理员账户和密码才能进行项目服务器上项目的管理，否则根本无法进入管理页面。</p>
<p>添加用户和权限也很简单，在<code>{TOMCAT_HOME}/conf/tomcat-users.xml</code> 文件中，<code>&lt;/tomcat-users&gt;</code>节点下添加如下内容,创建管理角色和用户,并授权用户管理角色:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"manager-gui, manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>之后进入tomcat首页-&gt;Manager App测试管理员账号是否创建成功</p>
<p><strong>注：</strong></p>
<ul>
<li>username和password可以自定义，这里为了简单记忆使用了<strong>tomcat</strong>同时作为用户名和密码。</li>
<li>网上有的博客这里配置了大量的权限，但是目前并没有发现其在这个阶段的作用和意义。</li>
</ul>
<h1 id="2-配置tomcat允许远程访问"><a href="#2-配置tomcat允许远程访问" class="headerlink" title="2.配置tomcat允许远程访问"></a>2.配置tomcat允许远程访问</h1><p>默认tomcat只允许本地部署，如果是要部署到远程服务器上，那么需要在远程服务器的<code>{TOMCAT_HOME}conf/Catalina/localhost/</code>目录下创建一个<code>manager.xml</code>文件，配置如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">privileged</span>=<span class="string">"true"</span> <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span> <span class="attr">docBase</span>=<span class="string">"$&#123;catalina.home&#125;/webapps/manager"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span> <span class="attr">allow</span>=<span class="string">"^.*$"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果只想允许部分IP拥有访问权限，那么可以配置<code>allow</code>节点，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">allow=&quot;127.0.0.1,192.168.1.*&quot;</div></pre></td></tr></table></figure></p>
<p>代表只允许主机拥有访问权限。</p>
<blockquote>
<p>注意：</p>
</blockquote>
<p>如果没有这一步的配置，本地tomcat服务器部署正常，但是远程tomcat服务器会报出下方<strong>常见问题</strong>中提到的<code>Cannot invoke Tomcat manager: Connection reset by peer: socket write error</code>异常</p>
<h1 id="3-为maven添加tomcat管理员账号"><a href="#3-为maven添加tomcat管理员账号" class="headerlink" title="3.为maven添加tomcat管理员账号"></a>3.为maven添加tomcat管理员账号</h1><p>由于需要使用maven来构建和部署项目，所以maven就需要拥有tomcat的管理员账号信息。<br>在<code>{MAVEN_HOME}/conf/settings.xml</code>文件中<code>&lt;servers&gt;</code>节点下添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置可以操作tomcat的用户名和密码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>crocutax<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- server login name --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- server login password --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="4-配置tomcat7插件"><a href="#4-配置tomcat7插件" class="headerlink" title="4.配置tomcat7插件"></a>4.配置tomcat7插件</h1><p>在项目的pom.xml中配置tomcat7 plugin，具体节点的意义看注释或下方清单</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Tomcat插件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 此处的名字必须和&#123;MAVEN_HOME&#125;/conf/settings.xml中配置的server节点的id一致--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">server</span>&gt;</span>crocutax<span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--服务器端口号--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 项目发布的路径,默认就是tomcat/webapps目录,可以指定深层次目录,留"/",则默认在webapps目录下部署ROOT.war包--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 注意tomcat7此处的url，不能随意修改,后缀必须是text,不能是html. 如果是本地tomcat部署,用localhost和ip都可以 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;url&gt;http://117.62.110.110:8080/manager/text&lt;/url&gt;--&gt;</span></div><div class="line">		<span class="comment">&lt;!--解决中文参数乱码问题--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">update</span>&gt;</span>true<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--配置在tomcat\conf\tomcat-users.xml中定义的用户名--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>节点清单</p>
</blockquote>
<ul>
<li><strong>server</strong> : 名字必须和<code>{MAVEN_HOME}/conf/settings.xml</code>中配置的server节点的id一致</li>
<li><strong>port</strong> : 服务器端口号</li>
<li><strong>path</strong> ：项目发布的路径,默认就是tomcat/webapps目录,可以指定深层次目录,留”/“,则默认在webapps目录下部署ROOT.war包</li>
<li><strong>url</strong> ： 注意tomcat7此处的url，不能随意修改,后缀必须是text,不能是html. 如果是本地tomcat部署,用localhost和ip都可以</li>
<li><strong>uriEncoding</strong> ：解决中文参数乱码问题</li>
<li><strong>update</strong> ： 热部署，否则后期会报错</li>
<li><strong>username</strong> ：配置<code>{TOMCAT_HOME}\conf\tomcat-users.xml</code>中定义的用户名</li>
<li><strong>password</strong> ：同上</li>
</ul>
<h1 id="5-启动tomcat服务器"><a href="#5-启动tomcat服务器" class="headerlink" title="5.启动tomcat服务器"></a>5.启动tomcat服务器</h1><p>先通过<code>{TOMCAT_HOME}/bin/startup.bat</code>启动tomcat，启动完毕之后再进行部署，否则会报出如下异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Cannot invoke Tomcat manager: Connection refused: connect -&gt; [H</div><div class="line">elp <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h1 id="6-maven命令部署"><a href="#6-maven命令部署" class="headerlink" title="6.maven命令部署"></a>6.maven命令部署</h1><p>在IDE-&gt;Terminal 或 项目根目录打开dos窗口，输入maven命令</p>
<ul>
<li>mvn clean package <strong>tomcat</strong>:deploy (使用的是插件1.1版本，如果pom.xml中配置的是2.2版本，那么使用这么命令会报错)</li>
<li>mvn clean package <strong>tomcat7</strong>:deploy (使用的是插件2.2版本，自己用的这个)</li>
</ul>
<p>然后看着命令行歇一会吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">[INFO] --- maven-war-plugin:<span class="number">2.2</span>:war (<span class="keyword">default</span>-war) @ cmw ---</div><div class="line">[INFO] Packaging webapp</div><div class="line">[INFO] Assembling webapp [cmw] in [D:\code\server\chinesemedicine\target\cmw]</div><div class="line">[INFO] Processing war project</div><div class="line">[INFO] Copying webapp resources [D:\code\server\chinesemedicine\src\main\webapp]</div><div class="line">[INFO] Webapp assembled in [<span class="number">887</span> msecs]</div><div class="line">[INFO] Building war: D:\code\server\chinesemedicine\target\cmw.war</div><div class="line">[INFO] WEB-INF\web.xml already added, skipping</div><div class="line">[INFO]</div><div class="line">[INFO] &lt;&lt;&lt; tomcat7-maven-plugin:<span class="number">2.2</span>:deploy (<span class="keyword">default</span>-cli) &lt; <span class="keyword">package</span> @ cmw &lt;&lt;&lt;</div><div class="line">[INFO]</div><div class="line">[INFO]</div><div class="line">[INFO] --- tomcat7-maven-plugin:<span class="number">2.2</span>:deploy (<span class="keyword">default</span>-cli) @ cmw ---</div><div class="line">[INFO] Deploying war to http:<span class="comment">//localhost:8080/cmw</span></div><div class="line">Uploading: http:<span class="comment">//localhost:8080/manager/text/deploy?path=%2Fcmw&amp;update=true</span></div><div class="line">Uploaded: http:<span class="comment">//localhost:8080/manager/text/deploy?path=%2Fcmw&amp;update=true (45960 KB at 40564.5 KB/sec)</span></div><div class="line"></div><div class="line">[INFO] tomcatManager status code:<span class="number">200</span>, ReasonPhrase:OK</div><div class="line">[INFO] OK - Deployed application at context path /cmw</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: <span class="number">18.075</span> s</div><div class="line">[INFO] Finished at: <span class="number">2017</span>-<span class="number">09</span>-<span class="number">17</span>T11:<span class="number">31</span>:<span class="number">21</span>+<span class="number">08</span>:<span class="number">00</span></div><div class="line">[INFO] Final Memory: <span class="number">20</span>M/<span class="number">293</span>M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>出现 <strong>BUILD SUCCESS</strong>，就部署成功了！</p>
<p>常见的部署命令，在<a href="https://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/plugin-info.html" target="_blank" rel="external">Tomcat7 Plugin Documentation </a> 中有详细介绍，这里罗列几个常用的：</p>
<ul>
<li><strong>tomcat7:run</strong>        运行当前项目</li>
<li><strong>tomcat7:deploy</strong>    部署当前项目</li>
<li><strong>tomcat7:redeploy</strong>    重新部署项目</li>
<li><strong>tomcat7:undeploy</strong>    取消部署当前项目</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="Tomcat-return-http-status-error-401-Reason-Phrase-Unauthorized"><a href="#Tomcat-return-http-status-error-401-Reason-Phrase-Unauthorized" class="headerlink" title="Tomcat return http status error: 401, Reason Phrase: Unauthorized"></a>Tomcat return http status error: 401, Reason Phrase: Unauthorized</h2><p>未授权访问tomcat，即没有tomcat的管理权限，如果没有进行步骤1中的”添加tomcat用户及权限”操作,远程部署时就会报此异常。</p>
<p>还有一种情况，已经在<code>conf/tomcat-users.xml</code>中配置了用户和权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 创建用户,并授权 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"manager-gui, manager-script"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>但是还是有这个异常信息，于是在服务器tomcat首页测试Manager App，发现定义的tomcat管理员角色无法正常登陆。这说明配置的用户和角色出问题了,继续排查，在tomcat启动日志中,发现了如下异常信息:</p>
<pre><code>警告: Unexpected exception resolving reference
com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: 1 字节的 UTF-8 序列的字节 1 无效。
</code></pre><p>于是怀疑是有中文字符造成的影响，删掉了在tomcat-users.xml中的中文注释,即</p>
<pre><code>&lt;!-- 创建用户,并授权 --&gt;
</code></pre><p>再次部署,tomcat Manager App 测试成功,远程一键部署成功!</p>
<p><strong>注：</strong></p>
<p>虽然这里是WARN而不是ERROR，但是还是有可能造成一些内部程序的加载失败导致功能缺失，比如这里的tomcat启动成功，但是内部管理权限却配置失败，进而导致远程部署因没有权限而失败。所以，从严谨性角度出发，如果精力足够，那么所有的WARN都不容忽视。</p>
<h2 id="Connection-reset-by-peer-socket-write-error"><a href="#Connection-reset-by-peer-socket-write-error" class="headerlink" title="Connection reset by peer: socket write error"></a>Connection reset by peer: socket write error</h2><blockquote>
<p>异常信息：[ERROR] Failed to execute goal org.apache.tomcat.maven:tomcat7-maven-plugin:2.2:deploy (default-cli) on project cmw: Cannot invoke Tomcat manager: Connection reset by peer: socke<br>t write error -&gt; [Help 1]</p>
</blockquote>
<p>这个应该是部署的时候最容易出现的异常了，在这里卡了很久。网上查了一大圈。根本原因是:当客户端发出请求（request）后，如果还没有完全获得服务端的响应（response），客户端与服务器段的连接断开（例如断网、按了“停止”按钮、或者客户端浏览器关闭等），服务器端就会抛出此Exception。 </p>
<p>这个问题需要从多方面排查。</p>
<p>1.如果是远程服务器，需要配置tomcat允许远程访问，见步骤2</p>
<p>2.有的说tomcat9在步骤1中配置用户权限时，同一个用户不能同时拥有<code>manager-gui</code>和<code>manager-script</code>权限，但是我分开了之后，依然没有解决这个问题。最终放弃使用tomcat9，使用tomcat7，一切正常了。</p>
<p>3.如果tomcat上已经部署了该项目，那么需要使用redeploy命令，即<code>mvn tomcat7:redeploy</code></p>
<h2 id="部署后的项目404"><a href="#部署后的项目404" class="headerlink" title="部署后的项目404"></a>部署后的项目404</h2><p>以下3种原因都有可能造成部署后的项目无法正常访问，报404：</p>
<ol>
<li>如果是远程服务器，请确保8080端口已经添加到入网规则中</li>
<li>pom.xml中tomcat7插件的<code>path</code>节点配置的有问题</li>
<li>项目本身404</li>
</ol>
<h2 id="tomcat内存泄漏"><a href="#tomcat内存泄漏" class="headerlink" title="tomcat内存泄漏"></a>tomcat内存泄漏</h2><p>tomcat日志中报出</p>
<blockquote>
<p>The web application [/appStore] appears to have started a thread named [Thread-2],but has failed to stop it ,this is very likely to create a memory leak</p>
</blockquote>
<p>等有时间了再研究，<a href="http://www.cnblogs.com/xyb930826/p/5725340.html" target="_blank" rel="external">http://www.cnblogs.com/xyb930826/p/5725340.html</a> 中有提到</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://www.cnblogs.com/xyb930826/p/5725340.html" target="_blank" rel="external">http://www.cnblogs.com/xyb930826/p/5725340.html</a></li>
<li><a href="https://my.oschina.net/simpleton/blog/598692" target="_blank" rel="external">https://my.oschina.net/simpleton/blog/598692</a></li>
<li><a href="http://www.jianshu.com/p/78b17d656a5e" target="_blank" rel="external">http://www.jianshu.com/p/78b17d656a5e</a></li>
<li><a href="https://github.com/hehongwei44/my-blog/issues/148" target="_blank" rel="external">https://github.com/hehongwei44/my-blog/issues/148</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Done is better than perfect]]></title>
      <url>/2017/09/14/Done-is-better-than-perfect/</url>
      <content type="html"><![CDATA[<p>做了一些年头的技术人员之后，会不由得思考自己做这些东西的价值，之前曾经发表一些自己的看法，见 <a href="http://www.crocutax.com/2017/06/09/技术的价值和定位/">技术的价值和定位</a>。技术是永无止境的,而且更新迭代非常快,那么面对技术,我们该采取什么样的态度?</p>
<p>偶然了解到扎克伯克所崇尚的黑客文化，其中有一句口号自己很喜欢，就是 <strong>Done is better than perfect</strong> ，有一种被认同感.</p>
<p>Google了一下这句话,看到了<a href="http://www.ruanyifeng.com/blog/2012/02/facebook_slogans.html" target="_blank" rel="external">阮一峰老师</a> 的一篇文章，是2012年的，提到了Facebook在创业初期，扎克伯格用于激励团队的一些标语，感觉相当不错，遂记录一下：</p>
<ul>
<li>Done is better than perfect.</li>
<li>Code wins arguments.</li>
<li>Move fast and break things.</li>
<li>Stay focused and keep shipping.</li>
</ul>
<p>创业公司在巨头林立的IT行业，很多时候很难突围，要么稍有起色时被迫被收购，要么死，Facebook能在诸位大佬的夹缝中迅速成长壮大，跟扎克伯格主导的黑客文化应该不无关系。</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[将Mysql中的表一键生成Hibernate的POJO]]></title>
      <url>/2017/09/09/%E5%B0%86Mysql%E4%B8%AD%E7%9A%84%E8%A1%A8%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90Hibernate%E7%9A%84POJO/</url>
      <content type="html"><![CDATA[<h1 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h1><p>在Idea中,通过Persistence工具可以将Mysql中已经创建好的数据表一键生成POJO，这样可以很方便的进行Hibernate的数据映射，加快开发进度。</p>
<p>首先，在Idea右侧侧边栏中，有Database 选项卡，选择对应的数据库，在这里进行数据库关联。<br><img src="http://upload-images.jianshu.io/upload_images/1958298-1d598536e77aa171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指定数据库.png"></p>
<p>然后在<code>File --&gt; Project Structure --&gt; Modules --&gt;  {your modulename}</code> 中添加Hibernate选项，标记此Module为一个Hibernate项目。<br><img src="http://upload-images.jianshu.io/upload_images/1958298-32685e5b8161c7aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将Module标记为Hibernate项目.png"></p>
<p>之后在Idea左侧边栏就会出现<strong>Persistence</strong>选项卡（如果没有显示，可以在View–&gt; Tool Windows –&gt; Persistence 中找到）</p>
<p>在选项卡中右键选择<code>Assign Data Sources</code>选择数据来源<br><img src="http://upload-images.jianshu.io/upload_images/1958298-bf38239e1a28ffc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指定数据源.png"></p>
<p>在弹出的对话框中，选择Data Source，这里直接定位到了已关联的数据库。<br><img src="http://upload-images.jianshu.io/upload_images/1958298-c63546aace998839.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择从哪个数据库中创建POJO.png"></p>
<p>指定完完Entities数据源之后，就可以选择生成POJO了<br><img src="http://upload-images.jianshu.io/upload_images/1958298-58b7e42caf4321cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择生成POJO.png"></p>
<p>在弹出的对话框中进行配置，指定POJO的输出路径，配置前缀、后缀名，选择是注解还是XML方式进行映射等等<br><img src="http://upload-images.jianshu.io/upload_images/1958298-8f7ae78714a18dbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指定需要生成POJO的表.png"></p>
<p>OK完事，自动生成的POJO长这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@DynamicInsert</span></div><div class="line"><span class="meta">@DynamicUpdate</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Basic</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"username"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li>如果数据库表结构发生了改变，重新生成POJO即可</li>
<li>如果POJO中<code>@Column</code>的属性出现<code>Cannot resolve column {columnname} This inspection controls whether the Persistence ORM annotations are checked against configured Datasources</code> ，直接<code>Alt+Enter</code>选择<code>Assign Data Sources</code>指定数据源即可。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[svn使用总结]]></title>
      <url>/2017/09/06/svn%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="客户端关联SVN仓库方式"><a href="#客户端关联SVN仓库方式" class="headerlink" title="客户端关联SVN仓库方式"></a>客户端关联SVN仓库方式</h1><p><strong>方式一(本地空目录)</strong></p>
<ol>
<li>创建一个空文件夹,空白处右键 checkout,输入服务器仓库的URL</li>
<li>当checkout的文件夹下多了个.svn的文件夹时代表关联成功</li>
</ol>
<p><strong>方式二(本地有项目文件夹)</strong></p>
<ol>
<li>将客户端项目import到服务器仓库</li>
<li>删除本地文件</li>
<li>将刚才导入服务器的项目checkout检出到本地,完成关联</li>
</ol>
<h1 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h1><ul>
<li>文件上有”？”图标时，代表服务器不知道该文件存在，右击 add，让该文件计划提交</li>
<li>commit提交,注意提交备注信息</li>
<li>养成先update,再commit的习惯</li>
</ul>
<h1 id="误删恢复"><a href="#误删恢复" class="headerlink" title="误删恢复"></a>误删恢复</h1><ul>
<li>本地删除  ,恢复方法:SVN Update</li>
<li>服务器删除 ,恢复方法:show log,revert to this version</li>
</ul>
<h1 id="版本冲突"><a href="#版本冲突" class="headerlink" title="版本冲突"></a>版本冲突</h1><pre><code>* 当本地版本低于服务器的版本,就会出现提交的冲突,因此每次提交前,先从服务器更新最新版本到本地.

* 比如用户A提交,用户B编译代码后没有update,直接提交,就会产生冲突

* 冲突解决
edit conflicts 自己编辑冲突
resolve 让系统自动解决冲突(合并两者的代码,有点麻烦)
</code></pre><h1 id="图标解释"><a href="#图标解释" class="headerlink" title="图标解释"></a>图标解释</h1><pre><code>1.绿色的对勾 : 首次关联仓库成功后，代码提交完成
2.蓝色?号： 服务器不识别该文件，新建的文件
3.蓝色+号： 计划将该文件提交到服务器的仓库
4.红色！号：文件修改了
5.黄色！号：产生冲突了。
6.灰色对勾： 只读文件，如果需要修改需要右击  get Lock
7.黄色小锁： 获取锁可以修改文件。其他用户不能再次获取锁来修改文件
8.灰色横杠： 被忽略，不提交服务器
</code></pre><h1 id="锁操作"><a href="#锁操作" class="headerlink" title="锁操作"></a>锁操作</h1><pre><code>* 图片、视频、so、等不可被编辑的文件才使用锁,其他慎用。

* 锁只能锁住一个文件状态，如果该文件被修改了，锁自动就没了。
</code></pre><h1 id="提交原则"><a href="#提交原则" class="headerlink" title="提交原则"></a>提交原则</h1><ul>
<li>先update,后commit</li>
<li>每完成一个小模块,每天下班前都需要提交    </li>
<li>禁止提交不能通过编译的代码</li>
<li>每次提交必须书写明晰的标注</li>
<li>不要提交自动生成的代码</li>
<li>慎用锁定功能</li>
</ul>
<h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><ul>
<li>提交时候提交的是一个目录,右键空白处选择提交,默认提交的是文件所在的整个目录</li>
<li>永远不要去删除Server端的仓库，否则无法找回代</li>
<li>谨慎使用还原，因为如果本地代码没有commit，那么还原后没有commit的代码将无法找回</li>
<li>直接忽略的文件,直接显示横杠 ; 已提交过的文件,设置为忽略时,会先显示红叉,提交后,变为白色横杠<ul>
<li>由于是已经提交过的文件,所以设置为忽略时,显示红叉,表示计划从版本控制中删除,当提交后,就从服务器里删除了,然后成为忽略状态.如果一个文件没有提交过,直接设置为忽略,是显示不出红叉的.因为服务器里没有,不需要计划删除.</li>
</ul>
</li>
</ul>
<blockquote>
<p>修改远程仓库url地址</p>
</blockquote>
<pre><code>TortoiseSVN-&gt;Relocate(重新定位),输入修改后的URL地址即可.
</code></pre><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><blockquote>
<p>Unable to connect to a repository at URL “https://…” Access to “/svn/…” forbidden</p>
</blockquote>
<ol>
<li>跟管理员确认自己是否拥有该仓库的访问权限</li>
<li>有权限的前提下依然存在此错误,则<code>TortoiseSVN--&gt;Settings--&gt;Saved Data--&gt;clear</code> ,即可解决</li>
</ol>
<blockquote>
<p>SVN 图标不显示</p>
</blockquote>
<p><a href="http://www.cnblogs.com/likebeta/archive/2012/07/01/2571731.html" target="_blank" rel="external">svn图标不显示的解决方案</a> ,自己依靠第四种方法解决了问题.</p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven安装及添加本地jar包到maven仓库]]></title>
      <url>/2017/08/18/maven%E5%AE%89%E8%A3%85%E5%8F%8A%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E5%88%B0maven%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="配置maven环境"><a href="#配置maven环境" class="headerlink" title="配置maven环境"></a>配置maven环境</h1><p>首先,下载插件,解压 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">http://maven.apache.org/download.cgi</a><br>然后开始配置环境变量,</p>
<ol>
<li>新建系统变量 <code>MAVEN_HOME</code> 变量值：<code>D:\Dev\apache-maven-3.5.0</code> (即maven的安装目录)</li>
<li>编辑系统变量 Path 添加变量值：<code>;%MAVEN_HOME%\bin</code></li>
<li>测试:mcd打开dos窗口 ,输入 <code>mvn --version</code></li>
</ol>
<p>显示如下界面代表maven安装成功<br><img src="http://upload-images.jianshu.io/upload_images/1958298-393d7084c1b00d12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="maven安装成功测试.png"></p>
<h1 id="添加本地jar包到maven仓库"><a href="#添加本地jar包到maven仓库" class="headerlink" title="添加本地jar包到maven仓库"></a>添加本地jar包到maven仓库</h1><p>安装非开源插件进行maven管理时需要添加本地jar包到maven仓库</p>
<p>在jar包所在目录打开dos窗口,进行maven安装.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -DgroupId=com.alipay -DartifactId=sdk-java -Dversion=<span class="number">20170725114550</span> -Dpackaging=jar -Dfile=alipay-sdk-java20170725114550.jar</div></pre></td></tr></table></figure>
<p>出现如下界面,说明成功安装到了maven本地仓库</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-5932c0721980be94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加jar包到maven本地仓库成功.png"></p>
<p>可以在<code>C:\Users\用户名\.m2\repository</code> 目录下查看该仓库</p>
<p>再在pom.xml中添加依赖,就OK了</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>20170725114550<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Realm数据库使用总结及采坑记录]]></title>
      <url>/2017/07/27/Realm%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%E5%8F%8A%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="Realm使用注意事项"><a href="#Realm使用注意事项" class="headerlink" title="Realm使用注意事项"></a>Realm使用注意事项</h1><ul>
<li>Realm默认运行在主线程,使用时须开启异步任务</li>
<li>Realm本身是单例类,可以多线程并发调用,但是RealmObject则不允许并发,每个RealmObject都绑定了一个TreadId,必须在创建该RealmObject的线程中使用它.</li>
<li>在子线程查询出的数据无法在主线程使用,自己的方案是:子线程查询,置换为自己的Bean类,然后在主线程使用</li>
<li>没有主键的realmObject无法进行update操作.所以如果要使用realm.copyToRealmOrUpdate(realmObject),那么这个realmObject必须设置primaryKey</li>
<li>如果Realm关闭，所有查询得到的RealmObject都不能使用了,解决方案是复制一份数据到内存中。</li>
<li>操作数据库必须在transaction中完成</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="Object-not-managed-by-Realm-so-it-cannot-be-removed"><a href="#Object-not-managed-by-Realm-so-it-cannot-be-removed" class="headerlink" title="Object not managed by Realm, so it cannot be removed"></a>Object not managed by Realm, so it cannot be removed</h2><p>Realm不支持直接通过deleteFromRealm删除Bean类,即使该Bean extends RealmObject，否则会报此异常</p>
<p><strong>正确姿势</strong>:</p>
<p>根据指定字段，从数据库中查询到该Bean，然后再删除</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 从数据库中删除CollectBean</div><div class="line"> * <span class="doctag">@param</span> conType</div><div class="line"> * <span class="doctag">@param</span> relateId</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCollectBeanByTypeAndId</span><span class="params">(String conType,<span class="keyword">int</span> relateId)</span></span>&#123;</div><div class="line">    Realm realm = RealmUtils.getInstance().mRealm;</div><div class="line">    CollectBean bean = realm.where(CollectBean.class)</div><div class="line">            .equalTo(CollectBean.CON_TYPE, conType)</div><div class="line">            .equalTo(CollectBean.RELATE_ID,relateId)</div><div class="line">            .findFirst();</div><div class="line">    realm.beginTransaction();</div><div class="line">    bean.deleteFromRealm();</div><div class="line">    realm.commitTransaction();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Realm-accessed-from-incorrect-thread"><a href="#Realm-accessed-from-incorrect-thread" class="headerlink" title="Realm accessed from incorrect thread"></a>Realm accessed from incorrect thread</h2><p>RealmObject自带线程保护功能，只能在创建它的线程中访问，在子线程中不能访问。<br>也就是说，如果你在主线程中new了一个RealmObject对象 user，那么在子线程中是访问不了user对象的。<br>要想在子线程中访问，必须先将user存入Ream中，然后在子线程中query出来。<br><a href="http://www.jianshu.com/p/dd5c7f926218" target="_blank" rel="external">简书文章</a></p>
<h2 id="is-not-part-of-the-schema-for-this-Realm"><a href="#is-not-part-of-the-schema-for-this-Realm" class="headerlink" title="is not part of the schema for this Realm"></a>is not part of the schema for this Realm</h2><blockquote>
<p>详细异常信息:  java.lang.IllegalArgumentException: UserBean is not part of the schema for this Realm</p>
</blockquote>
<p>需要调整plugin中的顺序,如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'com.bugtags.library.plugin'</span></div><div class="line">apply plugin: <span class="string">'android-apt'</span></div><div class="line">apply plugin: <span class="string">'realm-android'</span></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></div></pre></td></tr></table></figure>
<h2 id="bean-has-a-primary-key-use-‘createObject-Class-Object-’-instead"><a href="#bean-has-a-primary-key-use-‘createObject-Class-Object-’-instead" class="headerlink" title="{bean}has a primary key, use ‘createObject(Class, Object)’ instead"></a>{bean}has a primary key, use ‘createObject(Class<e>, Object)’ instead</e></h2><blockquote>
<p>详细异常信息: io.realm.exceptions.RealmException: ‘UserBean’ has a primary key, use ‘createObject(Class<e>, Object)’ instead.</e></p>
</blockquote>
<p>如果实体中已经通过<code>@PrimaryKey</code>标明了主键,那么想要通过<code>createObject(Class&lt;E&gt;, Object)</code>创建实体对象,则必须传入primaryKeyValue(主键值)</p>
<h2 id="异步查询之坑"><a href="#异步查询之坑" class="headerlink" title="异步查询之坑"></a>异步查询之坑</h2><p> 1.官方文档介绍 <a href="https://realm.io/docs/java/latest/#getting-started" target="_blank" rel="external">主线程操作Realm会卡顿/阻塞线程</a><br><img src="http://upload-images.jianshu.io/upload_images/1958298-779a88e30f16a14b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="防止ANR"><br>官方表示Realm运行速度很快,足以在主线程运行,而后又表示其实还是会阻塞线程导致偶发的ANR,因此建议在子线程操作Realm.</p>
<p> 2.<a href="http://stackoverflow.com/questions/27805580/realm-io-and-asynchronous-queries" target="_blank" rel="external">子线程查询的数据,无法在主线程使用</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-cd6e0fc8eb2dd057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>解决方案:</strong></p>
<p>子线程查询,置换为自己的Bean类,然后在主线程使用.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Realm.getDefaultInstance().executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        Person ziPerson = realm.where(Person.class).findFirst();</div><div class="line">        personInfo = <span class="keyword">new</span> PersonInfo();</div><div class="line">        personInfo.setName(ziPerson.getName());</div><div class="line">        personInfo.setAge(ziPerson.getAge());</div><div class="line">        <span class="comment">//Log 输出#Execute ] false..Person&#123;name='小明', age=18&#125;</span></div><div class="line">        KLog.i((Looper.getMainLooper()==Looper.myLooper())+<span class="string">".."</span>+ personInfo.toString());</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//Log 输出#OnSuccess ] true..personInfo:Person&#123;name='小明', age=18&#125;</span></div><div class="line">        KLog.i((Looper.getMainLooper()==Looper.myLooper())+<span class="string">".."</span>+ personInfo.toString());</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnError() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">        KLog.i(error.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="RejectedExecutionException"><a href="#RejectedExecutionException" class="headerlink" title="RejectedExecutionException"></a>RejectedExecutionException</h2><blockquote>
<p>详细异常信息:java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4dffbdd rejected from io.realm.internal.async.RealmThreadPoolExecutor@c09c352[Running, pool size = 17, active threads = 2, queued tasks = 100, completed tasks = 110]</p>
</blockquote>
<p><strong>解决方案:</strong></p>
<p>不要在for循环中使用Realm,将数据存入集合中,然后开启事务,直接使用copyToRealmOrUpdate(realmObjectList)存储即可.</p>
<h2 id="事务嵌套报异常"><a href="#事务嵌套报异常" class="headerlink" title="事务嵌套报异常"></a>事务嵌套报异常</h2><blockquote>
<p>详细异常信息:The Realm is already in a write transaction in /Users/blakemeike/Working/release/realm/realm-library/src/main/cpp/io_realm_internal_SharedRealm.cpp line 116</p>
</blockquote>
<p>原因 : 在一个事务中开启了另外一个事务.应避免这种情况.</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Realm数据库简单入门]]></title>
      <url>/2017/07/27/Realm%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h1><p><a href="https://realm.io/" target="_blank" rel="external">Realm官网</a></p>
<p><a href="https://realm.io/docs/java/latest/#getting-started" target="_blank" rel="external">android文档</a></p>
<p><a href="http://www.cnblogs.com/RaphetS/p/5996265.html" target="_blank" rel="external">一个不错的Realm简介博客</a></p>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="创建实体的方法"><a href="#创建实体的方法" class="headerlink" title="创建实体的方法:"></a>创建实体的方法:</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>.直接<span class="keyword">new</span></div><div class="line">    Dog dog = <span class="keyword">new</span> Dog();</div><div class="line"></div><div class="line"><span class="number">2</span>.通过create()方法</div><div class="line">    Dog dog = realm.create(Dog.class)</div><div class="line"></div><div class="line"><span class="number">3</span>.通过create()+预设主键(PrimaryKey)的方法</div><div class="line">    Dog dog =realm.create(Dog.class,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h1 id="添加Bean进Database"><a href="#添加Bean进Database" class="headerlink" title="添加Bean进Database"></a>添加Bean进Database</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">dog.name = <span class="string">"Rex"</span>;</div><div class="line">dog.age = <span class="number">1</span>;</div><div class="line">Realm realm = Realm.getDefaultInstance();</div><div class="line">realm.beginTransaction();</div><div class="line">realm.copyToRealm(dog)</div><div class="line">realm.commitTransaction();</div></pre></td></tr></table></figure>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RealmResults&lt;Dog&gt; pups = realm.where(Dog.class)</div><div class="line">                               .lessThan(<span class="string">"age"</span>, <span class="number">2</span>)</div><div class="line">                               .findAll();</div></pre></td></tr></table></figure>
<h1 id="添加数据监听"><a href="#添加数据监听" class="headerlink" title="添加数据监听"></a>添加数据监听</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Listeners will be notified when data changes</span></div><div class="line">pups.addChangeListener(<span class="keyword">new</span> RealmChangeListener&lt;RealmResults&lt;Dog&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(RealmResults&lt;Dog&gt; results)</span> </span>&#123;</div><div class="line">        <span class="comment">// Query results are updated in real time</span></div><div class="line">        puppies.size(); <span class="comment">// =&gt; 1</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="支持异步任务"><a href="#支持异步任务" class="headerlink" title="支持异步任务"></a>支持异步任务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">realm.executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm bgRealm)</span> </span>&#123;</div><div class="line">                User user = bgRealm.createObject(User.class);</div><div class="line">                user.setName(<span class="string">"John"</span>);</div><div class="line">                user.setEmail(<span class="string">"john@corporation.com"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// Transaction was a success.</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Realm.Transaction.OnError() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable error)</span> </span>&#123;</div><div class="line">                <span class="comment">// Transaction failed and was automatically canceled.</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h1 id="Realm的异步操作"><a href="#Realm的异步操作" class="headerlink" title="Realm的异步操作"></a>Realm的异步操作</h1><p>在子线程执行任务,在主线程发布<code>onSuccess</code>回调</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Realm.getDefaultInstance().executeTransactionAsync(<span class="keyword">new</span> Realm.Transaction() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Realm realm)</span> </span>&#123;</div><div class="line">        <span class="comment">//此方法在子线程</span></div><div class="line">        realm.copyToRealmOrUpdate(userBean);</div><div class="line">        KLog.i(<span class="string">"execute...."</span> + Thread.currentThread().getName() + <span class="string">"..."</span> + (Looper.myLooper() == Looper.getMainLooper()));</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Realm.Transaction.OnSuccess() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//此方法在子线程</span></div><div class="line">        KLog.i(<span class="string">"onSuccess...."</span> + Thread.currentThread().getName() + <span class="string">"..."</span> + (Looper.myLooper() == Looper.getMainLooper()));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Log输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">execute....pool-<span class="number">8</span>-thread-<span class="number">1</span>...<span class="keyword">false</span></div><div class="line">onSuccess....main...<span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>其他基础操作只是在此基础上简单的换下api而已,不再记录.</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSM开发Web项目问题解决记录]]></title>
      <url>/2017/07/23/SSM%E5%BC%80%E5%8F%91Web%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="Invalid-content-was-found-starting-with-element-‘init-param’"><a href="#Invalid-content-was-found-starting-with-element-‘init-param’" class="headerlink" title="Invalid content was found starting with element ‘init- param’"></a>Invalid content was found starting with element ‘init- param’</h1><p>在配置Spring前端控制器时,如果按照如下方式配置那么<code>&lt;init-param&gt;</code>标签就会有错误提示<code>Invalid content was found starting with element &#39;init- param&#39;</code> . </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>解决方案:</strong></p>
<p>将<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code> 放在<code>&lt;init-param&gt;</code>标签的后面即可.即</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">   ...</div><div class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">	  ...</div><div class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Could-not-open-ServletContext-resource"><a href="#Could-not-open-ServletContext-resource" class="headerlink" title="Could not open ServletContext resource"></a>Could not open ServletContext resource</h1><blockquote>
<p>错误信息:Could not open ServletContext resource [/WEB-INF/dispatcher-servlet.xml]</p>
</blockquote>
<p>在<code>web.xml</code>中,加载springmvc的配置文件时,如果不指定<code>contextConfigLocation</code>路径,那么默认加载的是/WEB-INF/servlet名称-serlvet.xml（例如dispatcher-servlet.xml , springmvc-servlet.xml）</p>
<p>#FileNotFoundException</p>
<blockquote>
<p>错误信息: java.io.FileNotFoundException: class path resource [applicationContext.xml] cannot be opened because it does not exist</p>
</blockquote>
<p>如果通过maven管理web项目,并且把配置文件放在了<code>resources</code>目录下,那么此时配置applicationContext.xml路径时,需要使用如下方式:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;param-value&gt;classpath*:applicationContext.xml&lt;/param-value&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="web-servlet-PageNotFound-noHandlerFound"><a href="#web-servlet-PageNotFound-noHandlerFound" class="headerlink" title="web.servlet.PageNotFound.noHandlerFound"></a>web.servlet.PageNotFound.noHandlerFound</h1><blockquote>
<p>错误信息:web.servlet.PageNotFound.noHandlerFound No mapping found for HTTP request with URI [/helloworld] in DispatcherServlet with name ‘dispatcher’</p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/18683847/no-mapping-found-for-http-request-with-uri-in-dispatcherservlet-with-name" target="_blank" rel="external">Stackoverflow问题链接直达</a> 里列举了诸多的可能性原因.我这里当时的原因是:</p>
<ol>
<li>Spring扫描包配置问题,导致未扫描到指定的Controller</li>
<li>编译文件输出路径问题</li>
</ol>
<h1 id="form表单提交时类型转换异常"><a href="#form表单提交时类型转换异常" class="headerlink" title="form表单提交时类型转换异常"></a>form表单提交时类型转换异常</h1><blockquote>
<p>错误信息:Unable to convert string [${createtime}] to class [java.util.Date] for attribute [value]: [Property Editor not registered with the PropertyEditorManager]</p>
</blockquote>
<p>需要自定义参数绑定,完成日期类型的转换</p>
<h2 id="1-定义日期转换器"><a href="#1-定义日期转换器" class="headerlink" title="1.定义日期转换器"></a>1.定义日期转换器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Date</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//实现 将日期串转成日期类型(格式是yyyy-MM-dd HH:mm:ss)</span></div><div class="line">		SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//转成直接返回</span></div><div class="line">			<span class="keyword">return</span> simpleDateFormat.parse(source);</div><div class="line">		&#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//如果参数绑定失败返回null</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-dispatcher-servlet-xml中配置转换器"><a href="#2-dispatcher-servlet-xml中配置转换器" class="headerlink" title="2.dispatcher-servlet.xml中配置转换器"></a>2.dispatcher-servlet.xml中配置转换器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span> <span class="attr">validator</span>=<span class="string">"validator"</span>/&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自定义参数绑定--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></div><div class="line">	  <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</div><div class="line">	<span class="comment">&lt;!-- 转换器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 日期类型转换 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"controller.converter.CustomDateConverter"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>完成!</p>
<h1 id="javax-servlet-http-httpservlet-不存在"><a href="#javax-servlet-http-httpservlet-不存在" class="headerlink" title="javax.servlet.http.httpservlet 不存在"></a>javax.servlet.http.httpservlet 不存在</h1><p>将tomcat中lib包里的<code>servlet-api.jar</code>(例如<code>D:\Dev\Tomcat9\lib\servlet-api.jar</code>) 复制到项目中 , 并添加依赖 , 重新build即可.</p>
<h1 id="MultipartException-form表单文件上传失败"><a href="#MultipartException-form表单文件上传失败" class="headerlink" title="MultipartException:form表单文件上传失败"></a>MultipartException:form表单文件上传失败</h1><blockquote>
<p>错误信息: MultipartException: The current request is not a multipart request</p>
</blockquote>
<p><strong>解决方案:</strong></p>
<p>需要在form表单上添加<code>enctype=&quot;multipart/form-data</code>属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/test.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="js文件加载失败-XXX-js-404-Not-Found"><a href="#js文件加载失败-XXX-js-404-Not-Found" class="headerlink" title="js文件加载失败:XXX.js 404 (Not Found)"></a>js文件加载失败:XXX.js 404 (Not Found)</h1><p>在dispatcher-servlet.xml中添加静态资源解析</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 静态资源解析 包括 ：js、css、img、..--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h1 id="标签onclick属性调用js-function-方法无效"><a href="#标签onclick属性调用js-function-方法无效" class="headerlink" title="标签onclick属性调用js function()方法无效"></a>标签onclick属性调用js function()方法无效</h1><blockquote>
<p>错误信息:Uncaught ReferenceError: [<br>function] is not defined at HTMLInputElement.onclick</p>
</blockquote>
<p><strong>解决方法:</strong><br>先添加jquery依赖,再定义另外的script标签,并在其中声明function</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--引入js的包--%</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">    your function...</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="HttpMediaTypeNotSupportedException"><a href="#HttpMediaTypeNotSupportedException" class="headerlink" title="HttpMediaTypeNotSupportedException"></a>HttpMediaTypeNotSupportedException</h1><blockquote>
<p>错误信息:HttpMediaTypeNotSupportedException: Content type ‘application/json;charset=UTF-8’ not supported</p>
</blockquote>
<p>原因:jackson依赖没有添加完整</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0.pr4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0.pr4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0.pr4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置完整就好了.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android支付宝支付之坑]]></title>
      <url>/2017/07/21/Android%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E4%B9%8B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>之前用支付宝支付，总体来说一直比较顺利，没有遇到什么坑。不过人生处处有惊喜，现在在一家外包公司工作，项目质量参差不齐，奇葩情况也偶有出现。</p>
<p>前几天项目组的一位小伙伴遇到了一个支付宝支付的问题，原因后台把支付宝的加签工作甩给了移动端，当时我就震惊了！还有这种操作？！！WTF！！！而且ios已经按照这种移动端加签的方式做好了，这就让Android端很尴尬了。如果让后台重新按正规流程做一遍，ios也得改，而且显得Android端技术很差啊，后台和ios都做好了，就Android还是支付不了，于是只能硬上了。</p>
<p>支付宝Demo中的签名方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">"RSA"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGN_ALGORITHMS = <span class="string">"SHA1WithRSA"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGN_SHA256RSA_ALGORITHMS = <span class="string">"SHA256WithRSA"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CHARSET = <span class="string">"UTF-8"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getAlgorithms</span><span class="params">(<span class="keyword">boolean</span> rsa2)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> rsa2 ? SIGN_SHA256RSA_ALGORITHMS : SIGN_ALGORITHMS;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String content, String privateKey, <span class="keyword">boolean</span> rsa2)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			PKCS8EncodedKeySpec priPKCS8 = <span class="keyword">new</span> PKCS8EncodedKeySpec(</div><div class="line">					Base64.decode(privateKey));</div><div class="line">			KeyFactory keyf = KeyFactory.getInstance(ALGORITHM);</div><div class="line">			PrivateKey priKey = keyf.generatePrivate(priPKCS8);</div><div class="line"></div><div class="line">			java.security.Signature signature = java.security.Signature</div><div class="line">					.getInstance(getAlgorithms(rsa2));</div><div class="line"></div><div class="line">			signature.initSign(priKey);</div><div class="line">			signature.update(content.getBytes(DEFAULT_CHARSET));</div><div class="line"></div><div class="line">			<span class="keyword">byte</span>[] signed = signature.sign();</div><div class="line"></div><div class="line">			<span class="keyword">return</span> Base64.encode(signed);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果项目中直接用这个方法去跑，一定是无法正常调起支付宝支付的，会报如下异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:<span class="number">0</span>D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag</div></pre></td></tr></table></figure>
<p>这是支付宝Demo留给我们的坑，按照网上的说法，将其中获取KeyFactory的代码改为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KeyFactory keyf = KeyFactory.getInstance(ALGORITHM,<span class="string">"BC"</span>);</div></pre></td></tr></table></figure>
<p>再次运行后，报异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ExtendedInvalidKeySpecException: unable to process key spec: java.lang.ClassCastException: com.android.org.bouncycastle.asn1.DLSequence cannot be cast to com.android.org.bouncycastle.asn1.ASN1Integer</div></pre></td></tr></table></figure>
<p>以为这次又是支付宝的坑，其实这次是同事留给我的坑，同事把PrivateKey用错了。。。正常的<code>RSA2_PRIVATE</code> 长这样，注意是以<code>==</code>号结尾</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-aa8610c383f57c60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="支付宝RSA2_PRIVATE.png"></p>
<p>更换了之后，这种支付宝加签的方式就可以跑通了。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Idea使用中的问题记录]]></title>
      <url>/2017/07/19/Idea%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="idea配置Tomcat-启动Web项目"><a href="#idea配置Tomcat-启动Web项目" class="headerlink" title="idea配置Tomcat,启动Web项目"></a>idea配置Tomcat,启动Web项目</h1><ol>
<li>Run-&gt;Edit Configuration</li>
<li>添加TomcatServer-&gt;Local Server,在Server选项卡中选择Tomcat服务器,并进行Tomcat名称,默认部署后启动的浏览器等信息<ul>
<li>编辑器已有默认配置</li>
</ul>
</li>
<li>选择Deployment选项卡,按绿色+号 添加需要部署的项目,右侧<code>Application context</code>为项目名称.<ul>
<li>如果<code>Application context</code>不配置,默认为<code>/</code>,那么通过<code>http://localhost:8080/index.jsp</code>即可访问项目页面</li>
<li>如果<code>Application context</code>配置为<code>/test</code>,那么访问路径变为<code>http://localhost:8080/test/index.jsp</code></li>
</ul>
</li>
</ol>
<blockquote>
<p>注意</p>
</blockquote>
<p>如果发现配置的部署的项目无法Apply,或者无法通过绿色铅笔按钮进行编辑 , 那么采用如下方法:</p>
<ul>
<li>idea编辑器左上角File-&gt;Project Structure-&gt;Project Settings-&gt;Artifacts-&gt;绿色按钮添加-&gt;Web Application Exploded</li>
<li>左边<code>output root</code>为编译文件输出目录 , 右侧<code>Available Elements</code>为可用项目元素 , 默认编辑器已配置好可用项目元素 , 双击 , 或右键选择 , 即可将指定目录左移到<code>output root</code>目录.</li>
<li>回到Edit Configuration-&gt;Deployment界面 , 重新添加部署的项目 , 来源选择<code>Artifacts</code>即可</li>
</ul>
<p>4.此时Apply之后发现tomcat并没有添加成功 , 还差最后一步 . 在Edit Configuration页面下方 , 有<code>Befor launch:Build,Build Artifacts,Activate tool window</code>选项 , 默认只有一个<strong>Build</strong>条目 , 再添加一个<code>Build Artifacts</code>条目 , 再Apply-&gt;OK </p>
<p>配置成功!完事!</p>
<h1 id="错误-找不到或无法加载主类"><a href="#错误-找不到或无法加载主类" class="headerlink" title="错误:找不到或无法加载主类"></a>错误:找不到或无法加载主类</h1><p>环境状况:</p>
<ul>
<li>环境变量配置没有问题,通过windows命令行窗口可以正常查看版本号</li>
<li>电脑里的其他Java和Android项目都运行正常</li>
</ul>
<p>在此前提下,运行Demo时报出 <strong>错误:找不到或无法加载主类</strong>. 说明是Idea配置问题导致的.</p>
<blockquote>
<p>原因</p>
</blockquote>
<ol>
<li>没有给Project设置编译文件的输出路径,即Project Structure -&gt; Project Settings -&gt; Project compiler output没有设置,但是却在Modules -&gt; Paths 中选择了 <code>Inherit project compile output path</code></li>
<li>Project Structure -&gt; Modules -&gt; Paths 中,选择了<code>Use module compile output path</code> , 但是只是默认的相对路径.</li>
</ol>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>首先,确保Project Structure -&gt; Project,已为Project指定SDK</p>
<p>其次:</p>
<p><strong>方案1:使用Project的编译输出路径</strong></p>
<ul>
<li>在Project Settings -&gt; Project compiler output中设置Project的编译输出路径</li>
<li>在Project Settings -&gt; Modules中选择  <code>Inherit project compile output path</code> 即继承Project的路径</li>
</ul>
<p><strong>方案2:使用Module的编译输出路径</strong></p>
<p>Project Structure -&gt; Modules -&gt; Paths,改变<code>Output path</code> 和 <code>Test output path</code>的路径.</p>
<p>两个路径默认是:</p>
<ul>
<li>\out\lib</li>
<li>\out\test\lib</li>
</ul>
<p>改为项目绝对路径+上述目录,比如项目文件路径为E:\JavaEE\HelloWorld,那么修改后的两个Path分别为:</p>
<ul>
<li>E:\JavaEE\HelloWorld\out\lib</li>
<li>E:\JavaEE\HelloWorld\out\test\lib</li>
</ul>
<h1 id="实现接口方法报错"><a href="#实现接口方法报错" class="headerlink" title="实现接口方法报错"></a>实现接口方法报错</h1><p>当实现一些接口方法时,报出<code>@Override is not allowed when implementing Interface method</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-ccc803345608b589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="override报错.png"></p>
<p>由于项目所使用的java语言版本所导致的,打开<code>File-&gt;Project Structure-&gt;Modules-&gt;选择项目目录-&gt;Sources选项卡-&gt;Language Level</code>,更换Language Level即可,比如更换为<code>8-Lambdas</code>. 即可解决问题,如下图所示</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-977114780653c53d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更换LanguageLevel.png"></p>
<h1 id="pom-xml中配置的依赖库提示not-found"><a href="#pom-xml中配置的依赖库提示not-found" class="headerlink" title="pom.xml中配置的依赖库提示not found"></a>pom.xml中配置的依赖库提示not found</h1><p>情况1:<a href="https://mvnrepository.com" target="_blank" rel="external">maven Reposity</a>  仓库里有<br>解决:右键–&gt;Maven–&gt;Reimport , 搞定</p>
<p>情况1:<a href="https://mvnrepository.com" target="_blank" rel="external">maven Reposity</a>  仓库里没有,比如一些第三方服务商的库<br>解决: 将jar包安装到本地仓库 , 见<a href="http://www.crocutax.com/2017/08/18/maven安装及添加本地jar包到maven仓库/">maven安装及添加本地jar包到maven仓库</a> ,重新build即可</p>
<h1 id="mybatis的Mapper和xml关联失败-找不到xml文件"><a href="#mybatis的Mapper和xml关联失败-找不到xml文件" class="headerlink" title="mybatis的Mapper和xml关联失败,找不到xml文件"></a>mybatis的Mapper和xml关联失败,找不到xml文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.crocutax.mybatisdemo.mapper.UserMapper.findUserList</div><div class="line"></div><div class="line">	at org.apache.ibatis.binding.MapperMethod$SqlCommand.&lt;init&gt;(MapperMethod.java:225)</div><div class="line">	at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;(MapperMethod.java:48)</div></pre></td></tr></table></figure>
<p>解决方案:在pom.xml中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    &lt;resources&gt;</div><div class="line">        &lt;resource&gt;</div><div class="line">            &lt;directory&gt;src/main/java&lt;/directory&gt;</div><div class="line">            &lt;includes&gt;</div><div class="line">                &lt;include&gt;**/*.xml&lt;/include&gt;</div><div class="line">            &lt;/includes&gt;</div><div class="line">        &lt;/resource&gt;</div><div class="line">    &lt;/resources&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure></p>
<p>参考 <a href="http://blog.csdn.net/shifangwannian/article/details/48882201" target="_blank" rel="external">http://blog.csdn.net/shifangwannian/article/details/48882201</a></p>
]]></content>
      
        <categories>
            
            <category> Tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[融云IM踩坑记录]]></title>
      <url>/2017/07/04/%E8%9E%8D%E4%BA%91IM%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>融云自身引入了一些第三方库,当我们自己在项目中再引入这些第三方库的时候,就会出现冲突的情况.比如duplicate entry XXX 类的错误.</p>
<h1 id="PhotoView冲突"><a href="#PhotoView冲突" class="headerlink" title="PhotoView冲突"></a>PhotoView冲突</h1><blockquote>
<p>错误信息</p>
</blockquote>
<p>duplicate entry: uk/co/senab/photoview/BuildConfig.class</p>
<blockquote>
<p>原因</p>
</blockquote>
<p>如果从Github仓库在gradle中以<code>compile &#39;com.commit451:PhotoView:1.2.4&#39;</code>引入PhotoView,那么此时PhotoView会有两个</p>
<ul>
<li>uk.co.senab.photoview.PhotoView (正式photoview)</li>
<li>io.rong.photoview.PhotoView (融云中的photoview)</li>
</ul>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>使用融云中的PhotoView即可</p>
<h1 id="Eventbus冲突"><a href="#Eventbus冲突" class="headerlink" title="Eventbus冲突"></a>Eventbus冲突</h1><ul>
<li>org.greenrobot.eventbus.EventBus(正式Eventbus)</li>
<li>io.rong.eventbus.EventBus (融云SDK中的Eventbus)</li>
</ul>
<blockquote>
<p>项目中碰到的问题</p>
</blockquote>
<p>误使用了不同包下的Eventbus,导致事件传递失败.</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>使用同一包下的Eventbus即可</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[成熟的标志]]></title>
      <url>/2017/06/25/%E6%88%90%E7%86%9F%E7%9A%84%E6%A0%87%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>一个人成熟的标志之一就是，明白每天发生在自己身上的99%的事情对于别人而言根本毫无意义。<br>我们需要在自己的生命中保留一个空间，可以与世界、与历史、与艺术相遇。</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-06-25-%E6%88%90%E7%86%9F%E7%9A%84%E6%A0%87%E5%BF%97.jpg" alt="2017-06-25-成熟的标志"></p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记-王尚频道]]></title>
      <url>/2017/06/11/%E7%AC%94%E8%AE%B0-%E7%8E%8B%E5%B0%9A%E9%A2%91%E9%81%93/</url>
      <content type="html"><![CDATA[<h1 id="财富四大象限"><a href="#财富四大象限" class="headerlink" title="财富四大象限"></a>财富四大象限</h1><p><img src="http://opfgq15e3.bkt.clouddn.com/2017-06-11-%E8%B4%A2%E5%AF%8C%E5%9B%9B%E5%A4%A7%E8%B1%A1%E9%99%90.jpg" alt="2017-06-11-财富四大象限"></p>
<blockquote>
<p>E象限</p>
</blockquote>
<ul>
<li>更高的收入 = 跟高的生活品质 + 更大的工作压力 +更少的时间</li>
<li>不可持续，收入随着劳动力的下降而下降</li>
</ul>
<blockquote>
<p>S象限</p>
</blockquote>
<ul>
<li>风险大、失败率高、回报高</li>
<li>更成功意味着收入更高、工作更加努力、空余时间更少</li>
<li>不可持续，收入随着劳动力的下降而下降</li>
<li>一般失败于经验、资金不足、身体问题</li>
</ul>
<blockquote>
<p>B象限</p>
</blockquote>
<ul>
<li>搭建企业系统，寻找优秀人才各司其职，运转起这个系统</li>
</ul>
<blockquote>
<p>I 象限</p>
</blockquote>
<ul>
<li>资金和知识密集型区域</li>
</ul>
<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><ul>
<li>资产的多少不来自于薪资多少，而是来自于能服务多少人，以及提供服务的价值，二者缺一不可。<ul>
<li>一部分人很努力，很优秀，但是提供的服务只能影响很少的人；</li>
<li>明星的作品能够服务的人群足够大，所以收益高很正常。</li>
</ul>
</li>
<li>改变生活并不是指更加努力，而是改变思维方式，进而拥有完全不同的行为方式。</li>
<li>重要的不是你做什么事，而是你“成为”了谁，做到了后者，自然而然能做到前者；反之则未必，更是导致前者无效的原因。前者是术，后者是道，后者引导、促成了前者。</li>
<li>个人财富 = 杠杆他人的时间 + 杠杆他人的钱，需要搭建系统</li>
<li>没有经历过失败的成功，无法持续</li>
<li>网络为王，一部分努力寻找和搭建网络，而绝大部分人都被教育着成为、做好网络中的其中一个节点。这个网络可以是销售网络、人际网络、物流网络……</li>
<li>拥有独立思考能力很重要，大部分人都没有。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Study </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[技术的价值和定位]]></title>
      <url>/2017/06/09/%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BB%B7%E5%80%BC%E5%92%8C%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-06-09-%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BB%B7%E5%80%BC%E5%92%8C%E5%AE%9A%E4%BD%8D.jpg" alt="mobike-来自网络"></p>
<p>技术出身的人，有钻研精神，但是同时很多都有强迫症，会为了一丁点问题花费大量的时间，有些出于工作需要，有些则纯粹是和自己较劲，比如:</p>
<ul>
<li>为了解耦更加彻底，而多写N个接口，层层回调，解耦的便捷度换来的是大量重复的体力活-接口。</li>
<li>为了丁点的性能，花费了大量的时间去尝试多种方案、优化、调试。</li>
<li>为了代码更加优雅，费尽心思的设计、重构，最终可能只是自己比较high而已。</li>
<li>……</li>
</ul>
<p>从个人技术提升的角度而言，这些例子无疑都是正向的，在这些行为的过程中，自己整体技术能力注定会有所提升。从技术研究的角度而言，也都是必要的，比如任何能提升服务器1%性能的方案都值得去研究和实现，任何能为用户节省1%流量、加快1%速度的方案都值得去尝试。</p>
<p>然而，太多的个人技术钻研和正式的技术研究其实最终的作用微乎其微、甚至没有。大家都认同重复造轮子没有意义和价值，但是个人觉得无法对现实工作起到正向作用，无法作用于产品上的技术都是没有价值和意义，以及不值得去付出时间和精力的。</p>
<p>无论是自然科学还是社会科学，全世界可能有不计其数的科研成果，最终起到作用的有1%吗？不知道。而且并不认为没有这无法直接转化的99%的研究成果做铺垫，就没有这1%的对人类真正起到推动作用的科研成果。</p>
<p>1%的精品是有价值和作用的，9%的良品是值得借鉴但是无法直接转化的，剩余90%都是出于工作需要不得不出的成果，是凑数的，是工作职责内的正常产出而已。这里说的就是这90%，到底有没有值得付出的价值。</p>
<p>个人观点：</p>
<ul>
<li>技术是永无止境的，值得尊敬的，伟大的，技术可以改变人们的生活，可以推动历史的发展。</li>
<li>无法商业化的技术，完全没有存在的价值，也不值得花费时间和精力去钻研，因为，你是纯研发人员吗？你是科学家吗？</li>
<li>你可以选择 YES，但是我选择 NO。</li>
<li>技术+商业运作，技术才有体现价值的机会，否则，就只能是文献而已。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《程序员修炼之道：从小工到专家》]]></title>
      <url>/2017/06/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%EF%BC%9A%E4%BB%8E%E5%B0%8F%E5%B7%A5%E5%88%B0%E4%B8%93%E5%AE%B6%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="注重实效的哲学"><a href="#注重实效的哲学" class="headerlink" title="注重实效的哲学"></a>注重实效的哲学</h1><ul>
<li>在所有的弱点中,最大的弱点就是害怕暴露弱点.</li>
<li>勇敢的承担起责任,提供各种选择,不要找蹩脚的借口.</li>
<li>破窗效应会让项目迅速腐烂,因此,不要容忍破窗户.</li>
<li>做变化的催化剂,无论是对于自己,还是团队.</li>
<li>别只顾低头走路,也要抬头看天.知道自己所做的事情对长期的战略目标有什么意义.</li>
<li>批判地分析你读到的和听到的,不可不信,也不可全信.</li>
</ul>
<blockquote>
<p>知识上的投资总能得到最好的回报 –本杰明富兰克林. </p>
</blockquote>
<p>因此,要定期为自己的知识资产投资.</p>
<p>优秀投资者的行为:</p>
<ul>
<li>定期投资-养成习惯</li>
<li>多元化投资是长期成功的关键</li>
<li>在保守的投资和高风险,高回报之间平衡投资资产</li>
<li>设法低买高卖,以获取最大回报</li>
<li>周期性的重新评估和平衡资产</li>
</ul>
<p>像优秀的投资者一样投资自己的技术:</p>
<ul>
<li>每年至少学习一种新语言</li>
<li>每季度阅读一本技术书籍</li>
<li>参加本地的技术活动,杜绝与世隔绝</li>
<li>试验不同的开发环境,Windows–&gt;Linux,Notepad–&gt;SublimeText</li>
<li>跟上技术潮流</li>
<li>重新梳理,评估自己的技术体系</li>
<li>尽可能的把学的技术用到项目中</li>
</ul>
<h1 id="注重实效的方式"><a href="#注重实效的方式" class="headerlink" title="注重实效的方式"></a>注重实效的方式</h1><ul>
<li>Don’t Repeat Yourself.重复的危害性.<ul>
<li>环境所迫的重复,比如只能使用一种开发环境,工具,技术..</li>
<li>开发者无意识的重复,并没有意识到自己在重复着自己已经习惯的东西.</li>
<li>偷懒性的重复,因为重复,更加容易.</li>
<li>开发者之间的重复造轮子行为.</li>
</ul>
</li>
<li>学会制造和利用 “可复用”的东西,避免重复.</li>
<li>可撤销性:如果某个想法是你唯一的想法,再没有什么比这更危险的事了.</li>
<li>纯文本的威力.<ul>
<li>用纯文本保存知识.Keep Knowledge in Plain Text.</li>
<li>掌握小而精的Shell脚本</li>
</ul>
</li>
<li>精通一种编辑器 , 提升工作效率<ul>
<li>可配置</li>
<li>可扩展</li>
<li>可编程</li>
</ul>
</li>
<li>你不可能写出完美的软件，所以要减少不必要的过度追求</li>
<li>断言式编程</li>
<li>按照合约(Contract)进行设计</li>
<li>Always Use Source Code Control.</li>
<li>Fix the Problem,Not the Blame.</li>
<li>Treat English as Just Another Programming Language.</li>
</ul>
<h1 id="充分解耦"><a href="#充分解耦" class="headerlink" title="充分解耦"></a>充分解耦</h1><ul>
<li>要配置，不要集成</li>
<li>将抽象放进代码，细节放进元数据</li>
<li>分析工作流，以改善并发性</li>
<li>使视图与模型分离</li>
</ul>
<h1 id="当你编码时"><a href="#当你编码时" class="headerlink" title="当你编码时"></a>当你编码时</h1><ul>
<li>编码并不是机械式的工作，处处都需要经过深思熟虑，所以不要靠巧合编程</li>
<li>编写易于测试的代码</li>
</ul>
<h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1><h2 id="在何时进行重构"><a href="#在何时进行重构" class="headerlink" title="在何时进行重构"></a>在何时进行重构</h2><blockquote>
<p>早重构，常重构</p>
</blockquote>
<ul>
<li>有重复代码时</li>
<li>可以更加彻底的解耦时</li>
<li>存在过时的技术</li>
<li>性能需要优化</li>
</ul>
<h2 id="怎样重构"><a href="#怎样重构" class="headerlink" title="怎样重构"></a>怎样重构</h2><ul>
<li>不要试图在重构的同时增加功能</li>
<li>开始重构之前，确保项目拥有良好的测试，并经常运行这些测试，这样可以及早发现重构导致的问题</li>
</ul>
<h1 id="在项目开始之前"><a href="#在项目开始之前" class="headerlink" title="在项目开始之前"></a>在项目开始之前</h1><ul>
<li>不要收集需求，而是挖掘用户需求</li>
<li>建立需求文档</li>
<li>与用户一同工作，以像用户一样思考</li>
<li>Some Things Are Better Done than Described</li>
</ul>
<h1 id="注重实效的团队"><a href="#注重实效的团队" class="headerlink" title="注重实效的团队"></a>注重实效的团队</h1><ul>
<li>不要留破窗户</li>
<li>避免温水煮青蛙式的团队氛围变化</li>
<li>注重沟通</li>
<li>围绕功能、而不是工作职务进行组织</li>
<li>尽可能多的采用自动化</li>
</ul>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul>
<li>早测试、常测试、自动测试</li>
<li>要到通过全部测试、编码才算完成</li>
</ul>
<blockquote>
<p>测试什么</p>
</blockquote>
<ul>
<li>单元测试</li>
<li>集成测试</li>
<li>验证和校验</li>
<li>资源耗尽、错误及恢复</li>
<li>性能测试</li>
<li>可用性测试</li>
<li>回归测试</li>
</ul>
<h1 id="傲慢与偏见"><a href="#傲慢与偏见" class="headerlink" title="傲慢与偏见"></a>傲慢与偏见</h1><ul>
<li>Sign Your Work</li>
<li>杜绝团队协作中的 “地盘” 意识</li>
</ul>
<h1 id="名言"><a href="#名言" class="headerlink" title="名言"></a>名言</h1><ul>
<li>语言的界限就是一个人世界的界限.–维特根斯坦</li>
<li>再多的天才也无法胜过对细节的专注 –Levy’s Eighth Law</li>
<li>欲求更好,常把好事变遭–李尔王. （换言之,无法一步就做到完美的结果,最好是先上路,先出一个大致差不多的结果,再小步快速迭代）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《成龙：还没长大就老了》]]></title>
      <url>/2017/05/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%88%90%E9%BE%99%EF%BC%9A%E8%BF%98%E6%B2%A1%E9%95%BF%E5%A4%A7%E5%B0%B1%E8%80%81%E4%BA%86%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>“成龙”这个名字无论对于中国人还是全世界的人来说，应该都是一个不用做过多介绍的名字，而”成龙大哥”更是所有年龄阶段的人一致性的对他的尊称。</p>
<p>从小看成龙的电影长大，平时看到关于成龙大哥的各种形式的采访，从娱乐采访，到《艺术人生》、《鲁豫有约》、《杨澜访谈录》等等，只要碰到，都是不由自主的看完，而近些年的电影：《大兵小将》、《十二生肖》、《绝地逃亡》、《天将雄狮》、《功夫瑜伽》、《铁道飞虎》等等更是国产票房的保证。</p>
<p>2年前听说出了一本《成龙：还没长大就老了》自传，当时就想着有机会要买来看看，拖延症的后果就是果断忘记了这回事。。。直到2017年3月份又碰到了这本书，才当即买了来看。</p>
<p>基本上是一气看完，根本停不下来，而且看完之后，对成龙大哥的敬佩之意更深了。</p>
<h1 id="事业坎坷"><a href="#事业坎坷" class="headerlink" title="事业坎坷"></a>事业坎坷</h1><p>出道之初，成龙大哥事业颇不顺利，从香港和澳大利亚间的几次往返，到香港和美国间的往返，想必那时那刻，都是充满着迷茫、失落与不甘。</p>
<p>只要在这条道路上坚持住，不轻易放弃自己，持续的努力和准备，等待有机会到来的时候，紧紧的抓住，就有了希望，就有了后来的成功。</p>
<h1 id="自强与自卑"><a href="#自强与自卑" class="headerlink" title="自强与自卑"></a>自强与自卑</h1><p>从成龙大哥的拼劲儿里，可以同时看到两种性格因素：自强和自卑。</p>
<p><strong>自卑：</strong></p>
<p>觉得自己没有文化，怕被别人瞧不起，所以在能证明自己的事情上，总是想做的更好，想证明给别人看，想证明给那些看不起自己的人看，赢得自己应得的尊重和尊严。</p>
<p><strong>自强：</strong></p>
<p>由于上面的原因，所以会更加的努力，无论是去学习外语，还是坚持锻炼身体，还是几百次甚至上千次的重复只为了拍好一个镜头，可以理解为自强，也可以认为是自卑下的反抗，压力下的动力。</p>
<p>都说成龙大哥不怕死，有九条命，拍电影喜欢做危险动作，但其实真不怕吗？怎么可能呢！不是不怕，是没有其他办法，只能硬着头皮上，只能拿自己的命去拼。</p>
<p>逐渐的，这种行为方式成为了一个习惯，可能别人觉得差不多就可以的镜头，成龙大哥要反复重拍，力求更好，甚至整个推翻重来。可能这种做法仅仅只针对一个细节点来说，估计电影观众最终都不能发现这个当初耗费颇多时间和精力的瞬间；但是一个又一个细节点的追求，就构成了一部更加认真、真诚、真实的电影作用，而这种精品的制作和产出，也体现出了“成龙式”电影的独特魅力。</p>
<h1 id="知错就改"><a href="#知错就改" class="headerlink" title="知错就改"></a>知错就改</h1><p>从很多场合和事件，都可以发现大哥对于自己的错误非常坦诚，以前做过的错事，会承认，会改，以后避免；现在有可能也会做错事，但是绝非故意为之，如果发现做错了，还是承认，改。</p>
<p>“知错就改”这个我们从小就受到的教育，又有多少人真正把它听进去了，并且培养成为自己的性格和行为方式呢？</p>
<p>做了错事，只要没被发现，等于没事；被发现了，就赶紧往别人那推；推不掉了，就找理由、借口解释；下次接着再犯。恐怕这才是相对常见的一种的态度吧，这就是差距。</p>
<p>大哥不是个高情商的人，都知道大哥是个大嘴巴，经常说错话，甚至好心办错事，但是想想，我们是更喜欢这样一个人呢？还是喜欢一个在镜头前滴水不漏，始终处心积虑维护自己形象，实则败絮其中的人呢？</p>
<h1 id="照顾他人"><a href="#照顾他人" class="headerlink" title="照顾他人"></a>照顾他人</h1><p>无论是书里的举例，还是平时看采访，可以发现成龙大哥是习惯性、非刻意的在照顾周围的人，而不是在镜头前功利性的做做样子，企图留给他人这样的印象而已。因为后者持续不久，而且容易暴漏。</p>
<p>希望别人好，照顾他人的情绪和想法，不给别人添麻烦，这已经逐渐成为了他的下意识。</p>
<h1 id="人傻钱多"><a href="#人傻钱多" class="headerlink" title="人傻钱多"></a>人傻钱多</h1><p>当看到罗维的套路时，着实震惊了一把，还能这么玩呢？这跟诈骗、抢劫有区别吗？</p>
<p>当看到大哥被身边人给骗了几百万时，也是感觉大哥真是财商也欠佳。。。</p>
<p>这里让我想到两点：</p>
<h2 id="江湖"><a href="#江湖" class="headerlink" title="江湖"></a>江湖</h2><p>并不是说一谈到做生意，就是联想、京东、阿里巴巴；更多时候，生意场就是江湖，有人的地方就是江湖，有路见不平拔刀相助，有两肋插刀挺身而出，也有坑蒙拐骗不择手段，更有见利忘义落井下石。有温暖照人的阳光，也有见不得人的阴冷黑暗。</p>
<p>而且，相信大部分人日常生活中都不是在指点江山，比如习大大一声令下：一路一带我们投资追加1000亿！然后剩下的事全交给下面的人处理了。我们绝大部分人平时是在做具体的、细节的事的，而这些时候，可能更多的接触的事后者，更多的是笑里藏刀，刀光剑影。</p>
<p>做了生意才知道，上班是最简单的事情。</p>
<h2 id="把时间花在更重要的事情上"><a href="#把时间花在更重要的事情上" class="headerlink" title="把时间花在更重要的事情上"></a>把时间花在更重要的事情上</h2><p>面对欺骗过自己的人，大哥选择了原谅，“如果你骗了我，没有关系，我还有更多的事情要去做。我不会因为你是这样的人，而变得不再相信别人，那么多人骗我，他们也没有因此变富，我一直被骗，也没有因此变穷，而且我相信那些人做骗人的事，自己这辈子都不会好过的。”，这让我印象深刻。</p>
<p>对于那个骗钱的人来说，或许他这辈子的奋斗，都赚不了这么多，所以他肯放下自己的声誉而选择欺骗，更重要的事？他没有！也创造不了更大的价值，所以他选择吞下这笔钱财，躲起来。</p>
<p>而对于大哥来说，他有更重要的事情去做，同样的时间，可以用来去创造更多的价值，而不是纠缠于沉默成本。试想如果大哥是个普通老百姓，攒了几十年积蓄的300万被人一下骗完，他还会选择原谅吗？不可能！</p>
<p>所以，之所以最终选择放人一条生路，是因为有更重要的事情去做，是要把时间花在更重要的事情上。</p>
<h1 id="黑社会"><a href="#黑社会" class="headerlink" title="黑社会"></a>黑社会</h1><p>避不开的一个话题，无论是成龙还是李连杰，都在采访中公开谈到过黑社会的势力，但是对于具体的细节却又讳莫如深，我想这是因为这些势力依然不容小觑，即便对于两位地位已经如此之高的人而言依然如此。</p>
<p>不过，经历过肮脏和黑暗，却又能坚持阳光的人，才是真正强大和值得敬佩的人。</p>
<h1 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h1><p>大哥是个大老粗，压根不是个精打细算的人，更别提理财了。大部分人关心的都是他到底有多少亿家产，而他可能更在乎把自己能干的事情干好，事业的成功和金钱的收入只是最终水到渠成的结果。</p>
<p>比如稀里糊涂买的那幅徐悲鸿的画，刻意为之吗？精明的投资吗？都不是。包括他自己收藏的很多古董，估计他都是觉得是前人留下来的财产，要有人保管，所以不管真的假的，都收了不少，而这些东西的升值顺便也极大的丰富了他的财产。</p>
<h1 id="细节决定成败"><a href="#细节决定成败" class="headerlink" title="细节决定成败"></a>细节决定成败</h1><p>大哥对于细节的重视在书中，在之前的很多采访中多有提到，或体现，因注重细节而获得工作机会，因细节而受人赏识和提拔，因注重细节而拍出更加真实、精致的电影，也因此而成功。</p>
<p>所以自己对于他人的要求也同样如此，比如书里谈到的对于演员的选拔，许多能力好的人，或没有耐心、或恃才傲物、或没有礼貌，而表演上略逊一筹的张蓝心却因为细节和态度而赢得了机会，现在是第七代成家班成员。</p>
<h1 id="成家班"><a href="#成家班" class="headerlink" title="成家班"></a>成家班</h1><p>究竟是成龙成就了成家班，还是成家班成就了成龙？</p>
<p>之前在《王牌对王牌》里看到四十年历史的成家班人员再聚首，几十年过去了，看着当初一起闯天下的兄弟们死的死，老的老，感动的一塌糊涂。</p>
<p>至少他们跟对了大哥，而大家都不枉此生。至于成家班能不能像大哥说的“没有了成龙的成家班，依然能成为一个班”，真是得看成家班自己的传承了。</p>
<h1 id="家"><a href="#家" class="headerlink" title="家"></a>家</h1><p>家，是最温暖的避风港，大哥多亏娶了个好老婆，能够支持他去完成自己的事业而依然守着这个家，能够在他在外受挫时坚定的支持。</p>
<h1 id="公益和格局"><a href="#公益和格局" class="headerlink" title="公益和格局"></a>公益和格局</h1><p>公益有界限吗？无论从内容还是地域来讲，公益都没有界限。所以经常会发现，大哥做公益活动，可能在中国，可能去日本、韩国、新加坡、马来西亚、印度。。。</p>
<p>我记得曾经看过新闻，有人以各种各样的理由比如民族主义来说事，但是其实这些人才是真正的狭隘，因为立足点低，所以视野狭窄。</p>
<p>相信大哥去这些国家做公益，不单单因为那些都是他的影迷，100%都是影迷吗？怎么可能！相信大哥在这些年工作的过程中，到过不同的地方，得到了不同国家人的支持，受到了别人的帮助，所以才想到力所能及的回馈，在他眼里，那些都是需要帮助的人，帮助和公益是不分国界的。</p>
<p>再从格局来讲，无论是电影题材的的国际化元素，还是拍摄时的全球取景，还是影片最终的主题立意，可以发现，大哥的电影都在从一个比较高的格局出发，向影迷明确的传达一些正面能量。</p>
<p>比如说《天将雄狮》、《十二生肖》、《功夫瑜伽》，相信只要是看过的人，在欣赏精彩影片的同时，都会清晰的体会到电影想表达的思想。在我看来，这同样属于公益，它会潜移默化的传递正能量，这难道不是公益吗？</p>
<p>再比如《十二生肖》最终影响到皮诺家族归还了鼠首和兔首，这则是更加直接的显式的影响。</p>
<p>大视野，大格局，大影响，有多少电影人有这样的力量？</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[共享经济的热潮]]></title>
      <url>/2017/05/26/%E5%85%B1%E4%BA%AB%E7%BB%8F%E6%B5%8E%E7%9A%84%E7%83%AD%E6%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>共享单车在经历了部分一线城市的试点式推广后，开始陆续如火如荼的在全国范围内展开，在资本的助力下快速的复制，这种经济、环保、方便的模式也逐渐被越来越多的人接收。</p>
<p>在北京地区，强势者如摩拜、ofo（在全国范围内，这两家都是强势者），紧跟者如小蓝单车、永安行等，杭州市有哈罗单车、小鸣单车，估计其他诸多城市也都有地方性的共享单车品牌。</p>
<p>自己真正认识、体会到共享模式的优点还是来源于滴滴打车，现在已经扩张到改名为“滴滴出行”了，囊括了更多的业务概念和服务内容。印象中上高中地理的时候，老师讲到城市交通规划问题，就有设计交通拥堵、流量峰值、交通资源优化配置等问题。所以从解决这些问题的角度来看，滴滴确实是一家非常伟大的公司，这些事，政府永远做不到，也不会去做，因为存在既得利益群体的阻力。</p>
<p>共享单车应该算是在共享经济概念上的延展了，绿色出行的口号和公益广告持续了这么多年，感觉还没有这些共享单车公司在概念普及、实际行动方面给大家做出的贡献大。虽然很多城市都有市政提供的单车，但是骑下就知道差别和差距了。</p>
<h1 id="新事物的曲折成长"><a href="#新事物的曲折成长" class="headerlink" title="新事物的曲折成长"></a>新事物的曲折成长</h1><p>新产品的出现，必定要付出市场教育的成本，先行者有先入为主的优势，但是也不得不承担这个教育成本的付出。</p>
<p>想想当年滴滴、快的、Uber等公司，被出租车司机、出租车公司各种阻挠，又是罢工、又是游行、又是砸场子、又是出政策。。。</p>
<p>出租车拒载是家常便饭，因为乘坐出租车而发生的民事、刑事案件相信大家也都不会把它当做热点新闻，但是一旦这些事情发生在滴滴、快的、Uber司机的身上，那必然是一个头条，必然可以以此为切入点去各种论证这种共享模式的不规范、不安全、不靠谱等等。</p>
<p>甚至于滴滴都已经做成现在这种规模了，市场教育完成了，这种服务模式也深入人心了，2016年下半年的时候，政府还要强行收割市场，以京户、京牌、车轴距（这个也太刻意了）等限制条件强行把已经培育好的市场收割给当地国企。<br>如果以这样的理由扩展到其他行业，那所有的服务性岗位如保姆、保洁、保安、快递员、建筑工人等等都得回老家了，在北京叫个外卖估计得配送费200块起了，招个保安都得月薪1万以上了。</p>
<p>其实所有人都明白是怎么回事，只是无力反抗而已。但是这一切，并不妨碍所有的新事物在阻挠、曲折中成长。不信随着时间的推移，发展壮大的一定是滴滴这种困局中求生的公司，而不是躺着张嘴等喂，没饭吃就哭，一哭就把别人碗抢过来喂他的公司。</p>
<p>现在的共享单车，同样也遇到了各种各样的问题，比如市民素质问题、黑车司机的蓄意破坏问题、违规停放问题。当然也会有骑共享单车摔倒能上头条的问题等等，如出一辙。</p>
<p>其实总结来看，当这些新事物、模式出现时，有三个共同点：</p>
<ul>
<li>被各方阻挠、破坏</li>
<li>焦点效应，双刃剑</li>
<li>曲折中不断成长</li>
</ul>
<h1 id="市场份额之争"><a href="#市场份额之争" class="headerlink" title="市场份额之争"></a>市场份额之争</h1><p>比较有代表性的两家：摩拜和ofo，个人觉得这两家真是风格迥异而又殊途同归的公司。</p>
<p>对摩拜的印象是技术驱动，互联网模式做精品单车，据称每辆3000元的成本，即使放在全国单车已经一片混战情况下，摩拜的质量应该还是最好的。<br>感觉是一家稳扎稳打，比较靠谱的公司，所有单车比较一圈，还是骑摩拜的车最放心。（不过来到杭州，发现摩拜投入的车辆很少，经常找不到车，只好把押金退了，换成了本地的单车，尴尬。。。）</p>
<p>对ofo的印象是土老板来了，大金链子大金表张嘴两颗大金牙，车海战术，黄灿灿一片，连蓝牙锁都没有，一次扫码永久骑车。当然这个车也骑不了多久，就ofo的车质量估计也就200块钱的成本，甚至有次跟同事聊天，谈到这几家单车公司的车质量，同事反问道：“就那车质量能值200？”，于是又下调了心理价位，估计100。。。</p>
<p>其实ofo的战略也很明显，先用破车来教育市场，增加用户量，把日活和押金拿过来，然后用这个数据去融资，再拿融资的钱去复制模式、快速圈地、迭代产品、更新技术。比起后面这些带来的好处，谁还在乎那一堆堆掉链子、爆胎、没轮子的小黄车？那些钱的作用已经起到了，而那些低质量的车本来就是用来达到上述目的的。</p>
<p>当然，最终的结局肯定也跟几年前的团购、外卖、打车一样，最后估计还是剩摩拜和ofo两家，其他家都是被收购的命运。为什么明知道做不过，还要进入这个行业去做呢？各种各样的共享单车品牌，颜色都不够用了！</p>
<p>因为被收购了，应该也很赚钱吧！甚至可以说只要活到能被收购的时候，或者在当地市场做到有资格被收购的规模，都是稳赚的吧！所以，很多公司可能并不是为了号称的理想、绿色出行、共享经济、市民服务等等，做，就是为了等着被收购！</p>
<p>一方面是一些公司为了被溢价收购而做，另一方面，突然发现，再努力的做什么，最终还是逃不过资本的介入乃至掌控，各个大小行业，最终都是资本的战场。。。</p>
<h1 id="共享热潮的连带效应"><a href="#共享热潮的连带效应" class="headerlink" title="共享热潮的连带效应"></a>共享热潮的连带效应</h1><p>在共享汽车、共享自行车的带动下，共享电动车、共享充电宝、共享雨伞，甚至共享衣服、共享中央厨房都开始了。。。</p>
<p>无论王思聪吃不吃翔，反正这些五花八门的共享产品和服务，让普通老百姓的日常生活在衣食住行方面更加便捷、更加经济、更加丰富多彩了。</p>
<p>（完）</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo持续优化-在文章尾部添加版权声明信息]]></title>
      <url>/2017/05/20/Hexo%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96-%E5%9C%A8%E6%96%87%E7%AB%A0%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>如果文章没有版权声明信息，可能会发生被他人随意转载、随意修改的情况，如果是普通的技术文章和随笔还好，但如果涉及到一些比较重要的信息，可能会涉及一些未可知的不良后果。</p>
<p>但是如果每篇文章都手动添加版权声明信息，也太没有程序员的职业精神了，所以还是依靠脚本自动生成比较好。</p>
<p>自己使用的Hexo+NexT主题，主题默认的版权声明配置在<code>themes\next\_config.yml</code>文件中</p>
<pre><code># Declare license on posts
post_copyright:
  enable: false
  license: CC BY-NC-SA 3.0
  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/
</code></pre><p>直接把<code>enable</code> 改为<code>true</code>即可开启。</p>
<p>不过自己对默认的效果不太满意，想自定义一下，模仿<a href="http://notes.iissnan.com/2015/something-about-next/" target="_blank" rel="external">IIssNan</a> 的声明效果，先上最终效果图</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-20-Hexo%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96-%E5%9C%A8%E6%96%87%E7%AB%A0%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E4%BF%A1%E6%81%AF.png" alt="Hexo持续优化-在文章尾部添加版权声明信息"></p>
<p>具体步骤整理如下：</p>
<h1 id="自定义版权声明HTML代码"><a href="#自定义版权声明HTML代码" class="headerlink" title="自定义版权声明HTML代码"></a>自定义版权声明HTML代码</h1><p>定位到<code>themes\next\layout\_macro\post.swig</code>文件，找到<code>&lt;footer class=&quot;post-footer&quot;&gt;</code>节点，该节点包括了每篇文章底部的tag、span分割线等标签，可以根据自己的需要放置【版权声明】的位置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"post-footer"</span>&gt;</span></div><div class="line"></div><div class="line">   &#123;# 版权声明节点 #&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>    </div><div class="line">      &#123;% if not is_index %&#125;</div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文作者：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"欢迎访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文标题：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.permalink) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>本文链接：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.permalink) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span>&#123;&#123; post.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-date"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>发布时间：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#123;&#123; post.date.format("YYYY年M月D日 - HH时MM分") &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>版权声明： <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">          本文由 &#123;&#123;theme.author&#125;&#125; 原创，采用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh"</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>保留署名-非商业性使用-禁止演绎 4.0-国际许可协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span>转载请保留以上声明信息！</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;% endif %&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>里面都是基础的HTML代码，使用了一个无序列表用于展示版权声明的各项信息，这里可以随意diy。<br>当然里面涉及一些属性，比如：</p>
<ul>
<li><strong>theme.author</strong> ： 作者名</li>
<li><strong>post.title</strong> ：文章标题</li>
<li><strong>post.path</strong>　：文章相对路径</li>
<li><strong>post.permalink</strong> : 文章绝对路径</li>
<li><strong>post.date</strong> : 日期</li>
</ul>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>这里用page和post效果一样，比如<code>page.title</code> , <code>page.path</code></li>
<li>我这里基本都做成了超链接形式，也可以做成文本形式，看自己意愿而定。</li>
</ul>
<h1 id="通过类选择器添加自定义样式"><a href="#通过类选择器添加自定义样式" class="headerlink" title="通过类选择器添加自定义样式"></a>通过类选择器添加自定义样式</h1><p>定位到<code>themes\next\source\css\_custom\custom.styl</code> 文件，通过类选择器添加CSS样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Custom styles.</div><div class="line"></div><div class="line">.post-copyright &#123;</div><div class="line">    margin: 2em 0 0;</div><div class="line">    padding: 0.5em 1em;</div><div class="line">    border-left: 3px solid #FF1700;</div><div class="line">    background-color: #F9F9F9;</div><div class="line">    list-style: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本地部署先看看效果吧，也可以到 <a href="http://www.crocutax.com">http://www.crocutax.com</a> 看看效果。</p>
<blockquote>
<p>参考链接</p>
</blockquote>
<p><a href="https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/" target="_blank" rel="external">https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/</a></p>
<p><a href="http://crossingmay.com/2016/04/20/updatehexo/" target="_blank" rel="external">http://crossingmay.com/2016/04/20/updatehexo/</a></p>
<p>（完）</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo持续优化-创建分类和标签页面]]></title>
      <url>/2017/05/20/Hexo%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96-%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>昨天本地的博客文件被误删了，后来重新搭建起来，发现博客没有分类和标签页面了，原因是source目录下的<code>categories</code> 和 <code>tags</code> 目录被删除了，需要重新创建。然而只是创建个空目录是不行的，必须按照规范来。</p>
<p>之前搭建的时候，这里并没有记录，导致还浪费了一点时间，现在简单记录下。</p>
<h1 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h1><p>运行命令<code>hexo new page categories</code></p>
<p>该命令会在source目录下生成 categories 文件夹，categories 文件夹中有一个index.md文件，按照下列方式修改文件内容</p>
<pre><code>---
title: 分类
date: 2017-05-20 09:50:22
type: &quot;categories&quot;
comments: false
---
</code></pre><p><strong>type</strong> 字段用来指定页面类型，<strong>comments</strong> 字段用来指定该页面是否显示评论。</p>
<h1 id="创建标签页面"><a href="#创建标签页面" class="headerlink" title="创建标签页面"></a>创建标签页面</h1><p>运行命令<code>hexo new page tags</code></p>
<p>该命令会在source目录下生成 tags 文件夹，tags 文件夹中有一个index.md文件，按照下列方式修改文件内容</p>
<pre><code>---
title: 标签
date: 2017-05-20 09:51:00
type: &quot;tags&quot;
comments: false
---
</code></pre><p><strong>type</strong> 字段用来指定页面类型，<strong>comments</strong> 字段用来指定该页面是否显示评论。</p>
<p>不需要再去XML做任何的配置，直接<code>hexo g</code> + <code>hexo s</code> 本地部署，就会发现分类和标签页面一切正常了。</p>
<p>参考链接：</p>
<p><a href="http://www.jianshu.com/p/cc08e3e509e0" target="_blank" rel="external">http://www.jianshu.com/p/cc08e3e509e0</a></p>
<p>(完)</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RatingBar的基本使用和自定义样式]]></title>
      <url>/2017/05/18/RatingBar%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>今天项目中又用到了RatingBar，于是翻出来之前踩坑的一篇笔记，快速解决问题，顺便把笔记内容整理在此，方便以后查阅。</p>
<p>当项目中遇到【评分】需求的时候，一般情况下都会使用RatingBar用于UI展示，而且很多时候都不会使用原生样式。原因有两个：</p>
<ul>
<li>Android和iOS样式的统一</li>
<li>系统原生样式的版本兼容性问题</li>
</ul>
<p>所以适当的自定义RatingBar样式就显得很有必要了。</p>
<h1 id="RatingBar基本使用"><a href="#RatingBar基本使用" class="headerlink" title="RatingBar基本使用"></a>RatingBar基本使用</h1><p>RatingBar的基本使用比较简单，这里只记录一下几个常用的属性：</p>
<ul>
<li><strong>isIndicator</strong> 是否是指示器，如果设置为true,则不可以通过点击来改变进度；如果设置为false，则可点击</li>
<li><strong>numStars</strong> 一共有几个星星，默认是5个。</li>
<li><strong>rating</strong> 表示进度 </li>
</ul>
<h1 id="RatingBar-样式展示"><a href="#RatingBar-样式展示" class="headerlink" title="RatingBar 样式展示"></a>RatingBar 样式展示</h1><p>之前项目中一共碰到过四种RatingBar样式，各自效果图整理如下：</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-18%20%E8%87%AA%E5%AE%9A%E4%B9%89RatingBar%E6%A0%B7%E5%BC%8F.png" alt="自定义RatingBar样式"></p>
<p>说明：</p>
<ul>
<li>第一个：原生普通样式（随着主题不同，样式会变）</li>
<li>第二个：原生普通样式-小icon</li>
<li>第三个：自定义RatingBar 颜色</li>
<li>第四个：自定义RatingBar Drawable</li>
</ul>
<h1 id="RatingBar-各样式实现"><a href="#RatingBar-各样式实现" class="headerlink" title="RatingBar 各样式实现"></a>RatingBar 各样式实现</h1><h2 id="原生样式"><a href="#原生样式" class="headerlink" title="原生样式"></a>原生样式</h2><p>原生样式其实没什么好说的，使用系统提供的<code>style</code> 即可</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--第一个：原生主题样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RatingBar</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"?android:attr/ratingBarStyleIndicator"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:rating</span>=<span class="string">"3"</span>/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--第二个：原生主题样式：小--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RatingBar</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"?android:attr/ratingBarStyleSmall"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:rating</span>=<span class="string">"3"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h2><p>这种方式也很简单，只需要要定义一个样式即可，两步完成。</p>
<blockquote>
<p>第一步，定义样式，指定背景色 和 进度色</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--自定义RatingBar Color--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"RatingBar_CustomColor"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.Holo.RatingBar.Indicator"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="comment">&lt;!--Background Color--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlNormal"</span>&gt;</span>#D7D7D7<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Progress Color--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlActivated"</span>&gt;</span>#F49800<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第二步，XML中使用该主题</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--自定义 Color--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RatingBar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/go_rating"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:isIndicator</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"?android:attr/ratingBarStyleSmall"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/RatingBar_CustomColor"</span></div><div class="line">    <span class="attr">android:rating</span>=<span class="string">"3"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="自定义Drawable"><a href="#自定义Drawable" class="headerlink" title="自定义Drawable"></a>自定义Drawable</h2><p>这种方式相对于前面几种，算是稍微麻烦一点的方式了，而且还存在图片拉伸的坑（图片底部被垂直拉伸成一条直线，跟哭了似的-_-!，就不贴图了）。先说具体实现方法，再说坑。</p>
<blockquote>
<p>第一步，定义层叠布局layerlist</p>
</blockquote>
<p>自定义过ProgressBar的同学，相信对下面的background，secondProgress，progress属性都不会陌生。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span></span></div><div class="line">		<span class="attr">android:drawable</span>=<span class="string">"@drawable/star"</span>/&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/secondaryProgress"</span></span></div><div class="line">		<span class="attr">android:drawable</span>=<span class="string">"@drawable/star"</span>/&gt;</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span></span></div><div class="line">		<span class="attr">android:drawable</span>=<span class="string">"@drawable/star_solid"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第二步，自定义样式，指定ProgressDrawable</p>
</blockquote>
<p>注意这里指定minHeight和maxHeight，根据项目中的UI需求而定，定死高度的其中一个作用就是防止drawable图片被垂直拉伸。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--自定义RatingBar Drawable--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"RatingBar_CustomDrawable"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.Holo.RatingBar.Indicator"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:progressDrawable"</span>&gt;</span>@drawable/custom_rating_bar<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:minHeight"</span>&gt;</span>15dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:maxHeight"</span>&gt;</span>15dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>第三步，在xml中使用刚才定义好的样式</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--自定义Drawable样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RatingBar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/room_ratingbar"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/RatingBar_CustomDrawable"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:rating</span>=<span class="string">"3"</span>/&gt;</div></pre></td></tr></table></figure>
<p>最后说下图片垂直拉伸的解决方案：</p>
<ol>
<li>设置minHeight和maxHeight，写死像素值。</li>
<li>让UI帮忙切一张底部留有空隙的star图标，比如有1px的空隙</li>
<li>使用略大于当前控件空间的icon，比如整个UI切图是按照drawable-xxhdpi来切的，那么使用高一级的drawable目录下比如drawable-xxxhdpi的icon，这样在运行的时候，icon会进行相应比例的缩放。</li>
</ol>
<p>图片拉伸问题，还可以参考以下链接：<br>  <a href="http://shikezhi.com/html/2015/android_0920/375199.html" target="_blank" rel="external">http://shikezhi.com/html/2015/android_0920/375199.html</a><br><a href="http://blog.csdn.net/QMLN31821007/article/details/41121891" target="_blank" rel="external">http://blog.csdn.net/QMLN31821007/article/details/41121891</a> </p>
<p>（完）</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GoogleDrive云盘同步本地博客文件]]></title>
      <url>/2017/05/18/GoogleDrive%E4%BA%91%E7%9B%98%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>之前通过Github + Coding将自己的博客文章进行了双服务器托管，然而真正部署到远程服务器的内容其实都是发布后的主题样式文件和HTML文章，并不是整个博客系统的源文件。这样如果自己的本地电脑挂了，磁盘文件丢失了，又需要费一番周折才能陆续恢复。</p>
<p>为了避免这种情况，只能及时备份，移动硬盘的备份在及时性上略差一些，因此本地文件的云端同步存储是必然选择。</p>
<h1 id="云盘的选择"><a href="#云盘的选择" class="headerlink" title="云盘的选择"></a>云盘的选择</h1><p>关于云盘的选择，可以参考知乎上的 <a href="https://www.zhihu.com/question/23739546" target="_blank" rel="external">市面上哪个云同步盘最好用</a> 以及 <a href="https://www.zhihu.com/question/20579359" target="_blank" rel="external">目前体验较好的网盘有哪些</a> 。从个人使用经历来讲，之前一直使用的金山快盘和360云盘都已关闭个人云存储服务，最后迫不得已用了百度云盘，结果百度一看360关闭了个人云存储服务，立即搞了一系列动作，这其中就包括将云盘同步功能由免费功能变成了付费会员的功能 -_-!</p>
<p>最终选择了 <a href="https://www.google.com/drive/" target="_blank" rel="external">Google Drive 云端硬盘</a> 作为云端硬盘，支持网页版和PC版(<a href="https://www.google.com/intl/zh-CN_ALL/drive/download/" target="_blank" rel="external">PC版下载地址</a> )，考虑因素有以下几点：</p>
<ul>
<li>Google出品，功能性和稳定性可以完全不用担心</li>
<li>15G免费空间，对于只存放博客文件来说，绰绰有余了</li>
<li>不用担心像存储在百度云盘里的文件一样，某天不知道什么原因就被删除了</li>
</ul>
<h1 id="Google-Drive修改本地文件关联路径"><a href="#Google-Drive修改本地文件关联路径" class="headerlink" title="Google Drive修改本地文件关联路径"></a>Google Drive修改本地文件关联路径</h1><p>Google Drive PC端下载、安装都是傻瓜式的，没什么说的。在使用过程中遇到了【本地文件关联路径】的问题，在此记录一下。</p>
<p>在Google Drive过程中，没有给我们机会去选择安装路径，默认直接安装在了C盘的<code>C:\Users\yourusername</code> 路径下，这就导致如果我们想要将那些文件实时同步到云端，就需要将这些文件放在该目录下，即 <code>C:\Users\yourusername\Goole云端硬盘</code> 目录下，一把我们都是把C盘当做系统盘，不放置额外的软件及资料文件，原因可能涉及到诸多因素，比如：</p>
<ul>
<li>系统运行性能</li>
<li>文件分区管理</li>
<li>随时可能出现的系统故障以及随之而来的C盘重装</li>
</ul>
<p> 所以，怎样才能指定需要同步到云端的本地文件目录呢？</p>
<h2 id="断开账户关联"><a href="#断开账户关联" class="headerlink" title="断开账户关联"></a>断开账户关联</h2><p>首先，打开本地Google Drive云端硬盘，选择【偏好设置】-&gt;【账号】-&gt;【断开账户关联】</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-18%20GoogleDrive%E6%96%AD%E5%BC%80%E8%B4%A6%E6%88%B7%E5%85%B3%E8%81%94.png" alt="GoogleDrive断开账户关联"></p>
<h2 id="修改关联路径"><a href="#修改关联路径" class="headerlink" title="修改关联路径"></a>修改关联路径</h2><p>其次，重新开启Google Drive云端硬盘，在下一步过程中的【第四步】-&gt;【同步选项】-&gt;【更改文件夹位置】</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-18%20GoogleDrive%E4%BF%AE%E6%94%B9%E5%85%B3%E8%81%94%E8%B7%AF%E5%BE%84.png" alt="GoogleDrive修改关联路径"></p>
<p>这样，就可以指定我们想要实时同步到云端的文件夹目录了，比如我的博客目录在<code>D:\Blog</code> , 修改成功后的效果：</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-18%20Google%20Drive%E6%9C%AC%E5%9C%B0%E5%90%8C%E6%AD%A5%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png" alt="Google Drive本地同步目录修改成功"></p>
<p>（完）</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RecyclerView分割线-ItemDecoration]]></title>
      <url>/2017/05/12/RecyclerView%E5%88%86%E5%89%B2%E7%BA%BF-ItemDecoration/</url>
      <content type="html"><![CDATA[<p>在ListView中，可以通过控件的divider属性直接进行设置其分割线，但是RecyclerView将控件、数据适配器、布局管理器都进行了解耦，分割线也同样如此。</p>
<p>所以需要我们自己去处理分割线问题，这里记录两个比较常用的形式：</p>
<ul>
<li>普通线条分割线</li>
<li>Item间距</li>
</ul>
<h1 id="普通线条分割线"><a href="#普通线条分割线" class="headerlink" title="普通线条分割线"></a>普通线条分割线</h1><p>直接使用系统提供的DividerItemDecoration即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建分割线对象，第一个参数为上下文，第二个参数为RecyclerView排列方向</span></div><div class="line">DividerItemDecoration decoration = <span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL);</div><div class="line"><span class="comment">//为RecyclerView添加分割线</span></div><div class="line">mRecyclerView.addItemDecoration(decoration);</div></pre></td></tr></table></figure>
<p>如果感觉对系统提供的分割线颜色值、高宽等不太满意，可以通过<code>decoration.setDrawable()</code> 方法传入自己定制的drawable，自定义分割线的样式。</p>
<p>效果图如下：</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/DividerItemDecoration.png" alt="DividerItemDecoration"></p>
<h1 id="Item间距"><a href="#Item间距" class="headerlink" title="Item间距"></a>Item间距</h1><p>正常情况下，我们需要RecyclerView的每个子Item之间都有一些间距，虽然可以通过普通的margin、padding实现，但是真正在日常开发时，有可能子Item定制的比较复杂，让上述实现Item间距的方式做起来略微有点麻烦，这时候就需要自定义ItemDecoration登场了。</p>
<p>系统提供的DividerItemDecoration是通过继承ItemDecoration类实现的，我们也一样，由于仅仅只需要做一个间距而已，所以会更加简单。</p>
<p>代码如下，只做了两件事：</p>
<ul>
<li>dp to px转换</li>
<li>从第二个条目开始，设置每个条目与上个条目的顶部距离</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpaceItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSpace;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpaceItemDecoration</span><span class="params">(Context context,<span class="keyword">int</span> dpValue)</span> </span>&#123;</div><div class="line">        mSpace = dp2px(context,dpValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(parent.getChildAdapterPosition(view) &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//从第二个条目开始，距离上方Item的距离</span></div><div class="line">            outRect.top = mSpace;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * dp to px转换</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> dpValue</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context,<span class="keyword">int</span> dpValue)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> pxValue = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpValue, context.getResources().getDisplayMetrics());</div><div class="line">        <span class="keyword">return</span> pxValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//直接传入dp值，比如10dp，就传入10，由SpaceItemDecoration负责像素转换</span></div><div class="line">SpaceItemDecoration decoration = <span class="keyword">new</span> SpaceItemDecoration(<span class="keyword">this</span>, <span class="number">10</span>);</div><div class="line">mRecyclerView.addItemDecoration(decoration);</div></pre></td></tr></table></figure></p>
<p>效果图如下：</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-12-SpaceItemDecoration.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo添加字数统计、阅读时长、友情链接]]></title>
      <url>/2017/05/11/Hexo%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E3%80%81%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E3%80%81%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h1><p>NexT主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，需要经过两步：只</p>
<p>第一步：安装word_count插件，在博客根目录下打开终端</p>
<pre><code>npm install hexo-wordcount --save
</code></pre><p>第二步：在主题配置文件(Blog\themes\next\config.yml)中打开<code>wordcount</code> 统计功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Post wordcount display settings</div><div class="line"># Dependencies: https://github.com/willin/hexo-wordcount</div><div class="line">post_wordcount:</div><div class="line">  item_text: true</div><div class="line">  wordcount: true</div><div class="line">  min2read: true</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果仅仅只是打开开关，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等字样，只有光秃秃的数字在那里。如下图</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-11-Hexo%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF.png" alt="Hexo字数统计阅读时长-失败"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>找到<code>Blog\themes\next\layout\_macro\post.swig</code> 文件，将“字”、“分钟” 字样添加到如下位置即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span></div><div class="line">  &#123;&#123; wordcount(post.content) &#125;&#125; 字</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"> ...</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span></div><div class="line">  &#123;&#123; min2read(post.content) &#125;&#125; 分钟</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再次运行，就能得到正常的如“字数统计 1888字”“阅读时长 6分钟”这样的样式了，如下图：</p>
<p><img src="http://opfgq15e3.bkt.clouddn.com/2017-05-11-Hexo%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF2.png" alt="Hexo字数统计阅读时长-成功"></p>
<h1 id="添加友情链接"><a href="#添加友情链接" class="headerlink" title="添加友情链接"></a>添加友情链接</h1><p>在主题配置文件(Blog\themes\next_config.yml)中打开<code>links</code> 开关即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Blog rolls 友情链接</div><div class="line">links_title: Links</div><div class="line">links_layout: block</div><div class="line">links_layout: inline</div><div class="line">links:</div><div class="line">  test: http://www.example.com</div></pre></td></tr></table></figure>
<h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><p>正常情况下本地部署，远程部署都没有问题，添加了友情链接之后，<code>hexo s</code> 本地部署的时候，就报出了如下异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000/. Press Ctrl+C to stop.</span></div><div class="line">Unhandled rejection Error: ENOENT: no such file or directory, open <span class="string">'D:\Blog\themes\next\layout\_scripts\schemes\.swig'</span></div><div class="line">    <span class="function">at <span class="title">Error</span> <span class="params">(<span class="keyword">native</span>)</span></span></div><div class="line">    at Object.fs.<span class="title">openSync</span> <span class="params">(fs.js:<span class="number">641</span>:<span class="number">18</span>)</span></div><div class="line">    at Object.fs.<span class="title">readFileSync</span> <span class="params">(fs.js:<span class="number">509</span>:<span class="number">33</span>)</span></div><div class="line">    at Object.ret.<span class="title">load</span> <span class="params">(D:\Blog\node_modules\swig\lib\loaders\filesystem.js:<span class="number">55</span>:<span class="number">15</span>)</span></div><div class="line">    at <span class="title">compileFile</span> <span class="params">(D:\Blog\node_modules\swig\lib\swig.js:<span class="number">695</span>:<span class="number">31</span>)</span></div><div class="line">    at Object.eval [as tpl] <span class="params">(eval at &lt;anonymous&gt; (D:\Blog\node_modules\swig\lib\swig.js:<span class="number">498</span>:<span class="number">13</span>)</span>, &lt;anonymous&gt;:842:18)</div><div class="line">    at <span class="title">compiled</span> <span class="params">(D:\Blog\node_modules\swig\lib\swig.js:<span class="number">619</span>:<span class="number">18</span>)</span></div><div class="line">    at <span class="title">_compiled</span> <span class="params">(D:\Blog\node_modules\hexo\lib\theme\view.js:<span class="number">127</span>:<span class="number">30</span>)</span></div><div class="line">    at View.<span class="title">render</span> <span class="params">(D:\Blog\node_modules\hexo\lib\theme\view.js:<span class="number">29</span>:<span class="number">15</span>)</span></div><div class="line">    at D:\Blog\node_modules\hexo\lib\hexo\index.js:388:25</div><div class="line">    at <span class="title">tryCatcher</span> <span class="params">(D:\Blog\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>提示说在<code>themes\next\layout\_scripts\schemes</code> 目录下找不到<code>.swig</code> 这个文件，但是没有添加友链之前好像也没什么问题啊？一头雾水。。。</p>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <a href="https://github.com/iissnan/hexo-theme-next/issues/737" target="_blank" rel="external">官方issue</a> 中也没有找到自己想要的解决方案，而且google下这个问题，遇到的人好像也不多，就想到可能只是个简单的小配置问题。</p>
<p>于是又回头看了看文件内容，想到了第一眼看到时就比较奇怪的一点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">links_layout: block</div><div class="line">links_layout: inline</div></pre></td></tr></table></figure>
<p>有两个layout配置，不觉得奇怪吗？</p>
<p>于是果断注释掉其中一个，再次运行<code>hexo s</code> ，完美运行！再次测试注释掉另外一个，依然完美运行！OK，就这么轻松愉快的解决了，猜测可能是多文件冲突导致的<code>.swig</code>  生成问题。</p>
<p>(完)</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android微信支付流程及返回码-1之坑]]></title>
      <url>/2017/05/10/Android%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B%E5%8F%8A%E8%BF%94%E5%9B%9E%E7%A0%81-1%E4%B9%8B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>之前做微信支付的时候，直接是以库形式引入项目的，虽然一直觉得微信支付的开发文档不太理想，但是印象中也没有遇到什么大坑。</p>
<p>今天项目组的一个小伙伴突然告诉我微信支付一直失败，根本调不起来支付页面，<code>onResp()</code> 中的返回码一直是-1，而且他好像已经搞了好几个小时了。于是我pull了一下项目代码开始排查问题。最终发现问题有两个：</p>
<ul>
<li>微信开放平台上传的签名问题</li>
<li>Manifest文件中<code>WXPayEntryActivity</code> 的配置问题。</li>
</ul>
<p>由于在处理这两个问题的过程中，顺便又回顾了一遍微信支付的流程，以前也没有真正记录下来过，所以这里记录一下。</p>
<p>这里先把微信支付的返回码贴一下，看看他们是有多么敷衍：</p>
<ul>
<li>0 成功，展示成功页面</li>
<li>-1    错误，可能的原因：签名错误、未注册APPID、项目设置APPID不正确、注册的APPID与设置的不匹配、其他异常等。</li>
<li>-2    用户取消，无需处理。发生场景：用户不支付了，点击取消，返回APP。</li>
</ul>
<p>相信绝大部分同学在处理微信支付这块的时候，遇到的都是返回-1，然而看看关于-1的解释，完全不给力。尤其是一个<strong>其他异常</strong>，真省事。。。 其实除了appId和签名以外，还有很多其他原因会导致返回-1，这些都被微信划为了其他异常而一笔带过。</p>
<p>整体集成流程可以查看 <a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5" target="_blank" rel="external">微信支付App端开发步骤</a> ，反正他们不会告诉你有坑的，还是要自己踩-_-!</p>
<h1 id="获取AppID"><a href="#获取AppID" class="headerlink" title="获取AppID"></a>获取AppID</h1><p>在 <a href="https://open.weixin.qq.com" target="_blank" rel="external">微信开放平台</a> 申请开发应用，获取APP的唯一标识APPID，比较简单。之后通过 管理中心-应用详情 即可查看自己的AppID。</p>
<h1 id="向开放平台提交包名和签名"><a href="#向开放平台提交包名和签名" class="headerlink" title="向开放平台提交包名和签名"></a>向开放平台提交包名和签名</h1><p>自己应用的包名就不用说了，比如<code>com.weixin.test</code>。</p>
<p>签名的话，要用到 <a href="https://open.weixin.qq.com/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android.apk" target="_blank" rel="external">签名工具</a> ，是微信自己做的一个app，只有17KB,安装在手机上，输入已经安装在手机上的自己应用的包名，即可获取该包名对应的签名数据。</p>
<p>吐槽一下：签名工具做的也太丑陋 + 不友好了，谁用谁知道。</p>
<blockquote>
<p>注意</p>
</blockquote>
<p>这里获取签名的时候，务必使用release版安装在手机上，然后去获取签名，因为真正最终上线运营的时候是release版。debug和release两个jks不一致，会导致最终签名不一致，这种不一致会导致微信支付调用失败。</p>
<p>如果嫌release签名调试不方便，有两种方法：</p>
<ol>
<li>先向开放平台提交debug版签名，等待开发调试完毕，再换成release签名</li>
<li>向开放平台提交release版签名，在gradle中配置一下，debug版本build时候也使用release的jks即可。</li>
</ol>
<p>今天项目中遇到的其中一个坑就是在这里，签名错误，完全跟技术无关。这种问题，再debug 3天也发现不了。</p>
<h1 id="调用微信支付"><a href="#调用微信支付" class="headerlink" title="调用微信支付"></a>调用微信支付</h1><p>微信支付的逻辑，大部分是有服务器端完成的，客户端只需要在3个节点上进行处理：</p>
<h2 id="1-通知服务器向微信下单"><a href="#1-通知服务器向微信下单" class="headerlink" title="1.通知服务器向微信下单"></a>1.通知服务器向微信下单</h2><p>这个服务器就是自己的后台，我们给后台传递必要的参数，比如商品id，价格等，由后台向微信服务器下订单，下单成功后，后台会将订单信息如prepayId等回调给我们。这里就是一个Android客户端-后台服务器 Request和Response的过程。</p>
<h2 id="2-在服务器回调中调用微信支付"><a href="#2-在服务器回调中调用微信支付" class="headerlink" title="2.在服务器回调中调用微信支付"></a>2.在服务器回调中调用微信支付</h2><p>在后台向微信服务器下单成功后，会将微信支付中需要使用到的一些字段数据回传给我们，我们拿着该字段去调起微信支付即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先在调用之前，需要先在代码中进行微信API注册</span></div><div class="line">IWXAPI wxApi= WXAPIFactory.createWXAPI(context, <span class="keyword">null</span>);</div><div class="line"><span class="comment">// 将该app注册到微信</span></div><div class="line">wxApi.registerApp(<span class="string">"your AppID"</span>);</div><div class="line"></div><div class="line"><span class="comment">//创建一个支付请求对象</span></div><div class="line">PayReq request = <span class="keyword">new</span> PayReq();</div><div class="line"></div><div class="line"><span class="comment">//开始数据封装，这里一共有7个字段，都是必传的</span></div><div class="line">request.appId = <span class="string">"wxd930ea5d5a258f4f"</span>;</div><div class="line">request.partnerId = <span class="string">"1900000109"</span>;</div><div class="line">request.prepayId= <span class="string">"1101000000140415649af9fc314aa427"</span>,;</div><div class="line">request.packageValue = <span class="string">"Sign=WXPay"</span>;</div><div class="line">request.nonceStr= <span class="string">"1101000000140429eb40476f8896f4c9"</span>;</div><div class="line">request.timeStamp= <span class="string">"1398746574"</span>;</div><div class="line">request.sign= <span class="string">"7FFECB600D7157C5AA49810D2D8F28BC2811827B"</span>;</div><div class="line"><span class="comment">//发起请求</span></div><div class="line">api.sendReq(req);</div></pre></td></tr></table></figure>
<p>这里对几个字段进行特殊说明：</p>
<ul>
<li>appId ： 直接定义为常量即可</li>
<li>packageValue ：直接使用<code>&quot;Sign=WXPay&quot;</code>,这是一个固定的值。</li>
<li>sign：如果服务器端已经做过了签名生成，那么这里直接拿着赋值给<code>PayReq</code> 对象即可；如果服务器端没有做，那么还需要在本地进行签名生成之后，再赋值。</li>
</ul>
<p>这个本地签名生成其实就是将上面的除了<code>sign</code> 以外的6个字段，拼接成key-value形式的字符串，在进行MD5加密，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开始将6个字段进行数据封装</span></div><div class="line">List&lt;WXModel&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"appid"</span>, payReq.appId));</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"noncestr"</span>, payReq.nonceStr));</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"package"</span>, payReq.packageValue));</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"partnerid"</span>, payReq.partnerId));</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"prepayid"</span>, payReq.prepayId));</div><div class="line">list.add(<span class="keyword">new</span> WXModel(<span class="string">"timestamp"</span>, payReq.timeStamp));</div><div class="line">payReq.sign = genAppSign(list);</div><div class="line"><span class="comment">//...发起请求即可</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 生成签名</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">genAppSign</span><span class="params">(List&lt;WXModel&gt; list)</span> </span>&#123;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line">        sb.append(list.get(i).key);</div><div class="line">        sb.append(<span class="string">'='</span>);</div><div class="line">        sb.append(list.get(i).value);</div><div class="line">        sb.append(<span class="string">'&amp;'</span>);</div><div class="line">    &#125;</div><div class="line">    sb.append(<span class="string">"key="</span>);</div><div class="line">    sb.append(Constant.WX_APP_KEY);</div><div class="line">    String appSign = MD5Utils.getMessageDigest(sb.toString().getBytes()).toUpperCase();</div><div class="line">    <span class="keyword">return</span> appSign;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
</blockquote>
<p>本地生成签名时，务必注意key的拼写问题，比如必须拼appid而不是appId，必须拼prepayid而不是prepayId，这里跟上面<code>PayReq</code> 对象中字段的命名方式不一样，用错了也是照样返回-1。</p>
<h2 id="3-WXPayEntryActivity中接收回调"><a href="#3-WXPayEntryActivity中接收回调" class="headerlink" title="3.WXPayEntryActivity中接收回调"></a>3.WXPayEntryActivity中接收回调</h2><p>在该类的<code>onResp()</code> 方法中拿到微信支付的回调，然后去跟服务器再度确认支付结果。官方解释如下：</p>
<blockquote>
<p>在WXPayEntryActivity类中实现onResp函数，支付完成后，微信APP会返回到商户APP并回调onResp函数，开发者需要在该函数中接收通知，判断返回错误码，如果支付成功则去后台查询支付结果再展示用户实际支付结果。<strong>注意一定不能以客户端返回作为用户支付的结果，应以服务器端的接收的支付通知或查询API返回的结果为准。</strong></p>
</blockquote>
<p>OK，到这里其实并不是就完事了。想正常接到支付成功的回调，除了上面一系列的AppId、应用签名、微信支付请求等流程不能出错外，这个类也得好好配置下才行，否则返回码-1依然在等待着你。。。</p>
<h3 id="类的位置"><a href="#类的位置" class="headerlink" title="类的位置"></a>类的位置</h3><p><code>WXPayEntryActivity</code> 类必须放在 <code>包名.wxapi</code> 下，比如<code>com.weixin.test.wxapi.WXPayEntryActivity</code> ，包名或类名不一致会造成无法回调。</p>
<h3 id="Manifest文件中的声明"><a href="#Manifest文件中的声明" class="headerlink" title="Manifest文件中的声明"></a>Manifest文件中的声明</h3><p><code>WXPayEntryActivity</code> 不是一个普通的类，而是要继承Activity的一个View界面，所以必须在Manifest文件中声明。那么这里坑又来了，如果仅仅只是在Manifest中声明一下，在测试的时候会发现，依然是返回-1。</p>
<p>需要这么配置才可以：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".wxapi.WXPayEntryActivity"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"your AppId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a>清空缓存</h1><p>最后再说一个坑，如果经过一系列的配置，发现完全都配置好了，可是微信支付依然返回-1。而此时我们可能又会回头排查各个节点的问题，是配置问题？是自己的数据传递问题？到底哪里的bug？</p>
<p>其实这时候，清空下自己的应用缓存就可以了，通过 设置-应用管理-your app-清空缓存，进行缓存清理过后，立竿见影拿到成功的回调！</p>
<p>(完)</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开发中的TextView技巧点整理]]></title>
      <url>/2017/05/09/DrawerLayout-%E7%A9%BA%E7%99%BD%E5%8C%BA%E5%9F%9F%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近的项目里需要使用到侧滑布局，SlidingMenu 、自定义侧滑布局、 DrawerLayout都可以实现，前两种都已经尝试过了，最近1年多时间做项目都是使用底部导航栏，没有用到侧滑布局，DrawerLayout也一直没有去尝试，正好借此机会用一下。</p>
<p>mainlayout 和 drawerlayout如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-0e87c341009a4b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DrawerLayout.png"></p>
<p>可以发现，drawerlayout打开时，drawerlayout的A区域（空白区域）正好覆盖在了mainlayout 的ViewPager区域，C区域（空白区域）正好覆盖在了mainlayout 的左下方Button区域。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当drawerlayout打开时，在drawerlayout上空白区域的点击事件，会穿透（向下传递）到底层mainlayout布局上，比如点击drawerlayout的A区域时，mainlayout的ViewPager会相应；点击drawerlayout的C区域时，mainlayout的Button会响应。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>很明显，这是一个事件分发的问题，位于上层的drawerlayout布局不处理点击事件，所以事件得以传递到底层的mainlayout，而底层的mainlayout在该点击位置刚好有可以处理点击事件的控件，比如ViewPager和Button，所以这些控件就处理了。</p>
<p>由于drawerlayout处于打开状态时，在事件分发上处于上层，所以由它来决定事件是否分发，自己是否处理。刚才说的是空白区域，没有处理，所以才往下传递，真正自己已经处理的区域，比如B区域的RecyclerView，它的事件就不会往下传递。</p>
<p>那么除了B区域的RecyclerView以外，这些drawerlayout的空白区域本来就没控件来处理点击事件，注定要向下传递，怎么办呢？再自己定义DrawerLayout吗？</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>当drawerlayout处于打开状态时，让drawerlayout整体可以处理点击事件即可，也就是说先把事件拦截下来，具体如何处理，由drawerlayout里的具体控件来定。</p>
<p>具体步骤也非常简单，就是设置一个监听：</p>
<h2 id="定义DrawLayout监听"><a href="#定义DrawLayout监听" class="headerlink" title="定义DrawLayout监听"></a>定义DrawLayout监听</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> DrawerLayout.SimpleDrawerListener mSimpleDrawerListener = <span class="keyword">new</span> DrawerLayout.SimpleDrawerListener()&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(View drawerView)</span> </span>&#123;</div><div class="line">	    <span class="comment">//档DrawerLayout打开时，让整体DrawerLayout布局可以响应点击事件</span></div><div class="line">        drawerView.setClickable(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(View drawerView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDrawerClosed(drawerView);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="在相应位置添加和移除监听"><a href="#在相应位置添加和移除监听" class="headerlink" title="在相应位置添加和移除监听"></a>在相应位置添加和移除监听</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initListener</span><span class="params">()</span> </span>&#123;</div><div class="line">    mDrawerLayout.addDrawerListener(mSimpleDrawerListener);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    mDrawerLayout.removeDrawerListener(mSimpleDrawerListener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再运行，就不会出现穿透问题了，完事！</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coding+Github双服务器托管个人博客]]></title>
      <url>/2017/05/05/Coding+Github%E5%8F%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%98%E7%AE%A1%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>自从想认认真真写博客以来，会经常更新一些文章，无论是经验总结，还是读书笔记，还是纯扯扯淡。早就听说Github屏蔽了百度蜘蛛，也就是说百度搜不到我托管在Github上的博客，一直想找个空闲时间解决下这个事，于是今天就搞了一下：把博客分别托管在码云 Pages 和 Github Pages上，再通过DNS解析进行访问优化。</p>
<blockquote>
<p>特殊说明</p>
</blockquote>
<p>由于最后没有找到码云Pages 的绑定自定义域名在哪，所以没法通过<a href="http://www.crocutax.com/">http://www.crocutax.com/</a> 来访问部署到码云Pages上的博客，最终选择了 <a href="https://coding.net" target="_blank" rel="external">Coding Pages</a> 作为国内的部署服务器，流程都是完全一样的，只是在Coding Pages页面有绑定自定义域名的操作而已，所以在此不再累述，本文仅作记录。开始！</p>
<p>由于在Github上部署过了，所以整体在oschina上就非常熟练了。<br>官方也有 <a href="http://git.mydoc.io/?t=154714" target="_blank" rel="external">码云 Pages</a> 介绍，按照步骤来即可，无论是重新创建仓库+push，还是从Github导入都很简单，如果中间没有遇到坑的话，也就一两分钟的事。这里 把重点记录下。</p>
<h1 id="添加公匙"><a href="#添加公匙" class="headerlink" title="添加公匙"></a>添加公匙</h1><p>oschina的公匙分为 <strong>项目公匙</strong> 和 <strong>用户公匙</strong></p>
<p>官方文档说明如下：<br>项目的 SSH key只针对项目,且我们仅对项目提供了部署公钥,即项目下的公钥仅能拉取项目,这通常用于生产服务器拉取仓库的代码。</p>
<p>而用户的 key 则是针对用户的,用户添加了 key 就对用户名下的项目和用户参加了的项目具有权限,一般而言,<strong>用户的 key 具有推送和拉取的权限 , 而项目的 key 则只具有拉取权限</strong></p>
<p>具体的添加步骤，按照 <a href="http://git.mydoc.io/?t=154712" target="_blank" rel="external">生成并部署SSH key</a> 来即可，一开始自己只是把之前生成好的公匙直接添加进用户公匙中，结果push的时候报出日下异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p>最终通过在terminal终端输入<code>ssh -T git@git.oschina.net</code>来添加到 Git @ OSC，解决了此问题，报出·Welcome to Git@OSC, Crocutax(yourname)！·表明添加成功，之后就可以通过SSH方式正常的往仓库push了。</p>
<h1 id="静态资源加载失败，网页样式丢失"><a href="#静态资源加载失败，网页样式丢失" class="headerlink" title="静态资源加载失败，网页样式丢失"></a>静态资源加载失败，网页样式丢失</h1><p>在新建立仓库的时候，<strong>项目名称</strong> 必须和 <strong>用户名称</strong> 完全一致，注意不是 <strong>昵称</strong>，否则之后部署Pages服务时就会出现静态资源加载失败，网页样式丢失的情况。</p>
<p>按照我部署时踩坑的情况，如果部署完毕，网站地址样式为：<br><code>http://uesername.oschina.io/projectname</code>，比如<code>http://wangxw725.oschina.io/myblog</code>，那么这个静态资源一定加载失败了，进去看到的就是简陋的博客目录。</p>
<p>如果创建仓库时项目名称和用户名称一致，那么效果如下，注意网址样式，此时就是加载成功的。<br><img src="http://upload-images.jianshu.io/upload_images/1958298-015cbc011f120bb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="部署成功.png"></p>
<h1 id="deploy部署配置"><a href="#deploy部署配置" class="headerlink" title="deploy部署配置"></a>deploy部署配置</h1><p>修改根目录下_config.yml中的deploy配置，每次同时部署到Coding和Github两个仓库。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-251a136b041e283b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h1 id="DNS解析优化"><a href="#DNS解析优化" class="headerlink" title="DNS解析优化"></a>DNS解析优化</h1><p>国内使用Coding，海外使用Github，这样能相应的提升访问速度。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-189b6ef047f3068d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DNS解析优化.png"></p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《深入理解Java虚拟机》-GC对象判定算法]]></title>
      <url>/2017/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B-GC%E5%AF%B9%E8%B1%A1%E5%88%A4%E5%AE%9A%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://www.crocutax.com/2017/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/">JVM内存模型</a> 中，程序计数器、虚拟机栈、本地方法栈3个区域生命周期与所在的线程同步，栈中的每个栈帧分配多少内存基本上在类结构确定下来时就是已知的，因此这几个区域的内存分配和回收具有确定性，不需要考虑太多内存回收的问题。</p>
<p>而Java堆和方法区则不一样，一个接口中多个实现类需要的内存可能不一样，一个方法中多个分支小的内存也可能不一样，只有程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，也是垃圾收集器的重点关注区域。</p>
<p>如果想要进行垃圾回收，必须要进行垃圾对象的判定，而关于GC对象判定的算法，有如下两种：</p>
<ul>
<li>引用计数算法</li>
<li>可达性分析算法</li>
</ul>
<h1 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h1><p><strong>概念</strong><br>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的对象，就可以被垃圾回收器回收。</p>
<p><strong>优点</strong><br>实现简单，判定效率高。</p>
<p><strong>缺点</strong><br>无法解决对象之间相互循环引用的问题（A中持有B的引用，B中持有A的引用，此时即使将A和B都赋值为null，A和B的引用计数仍不为0，无法回收），导致GC判定不准确。因此主流的Java虚拟机都没有采用这种方式来进行GC对象判定。</p>
<h1 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h1><p><strong>概念</strong><br>通过一系列被称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索锁走过的路径称为引用链（Reference Chain）当一个对象到GC Roots没有任何引用链相连（从GC Roots到这个对象不可达）时，则证明此对象是不可用的，是可被回收的。</p>
<p>图中左侧的GC Roots链是可达的，而右侧Object5~7虽然相互之间存在引用，但是由于到GC Roots不可达，因此被判定为可回收的对象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-6a4d37285b7ee693.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可达性分析算法.png"></p>
<blockquote>
<p>可作为GC Roots的对象</p>
</blockquote>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法去中常量引用的对象</li>
<li>本地方法栈中Native方法引用的对象</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《深入理解Java虚拟机》-对象探秘]]></title>
      <url>/2017/05/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B-%E5%AF%B9%E8%B1%A1%E6%8E%A2%E7%A7%98/</url>
      <content type="html"><![CDATA[<p>Java是一门面向对象编程的语言，在Java程序运行过程中无时无刻都有对象被创建出来，那么在虚拟机层面，对象的创建到底涉及哪些方面？下面就从以下3个方面来了解下【对象】：</p>
<ul>
<li>对象的创建</li>
<li>对象的内存布局</li>
<li>对象的访问定位</li>
</ul>
<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><p>我们一般创建对象都是通过new的方式，而虚拟机在遇到一条new指令时，首先会去检查这个指令的参数能否在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已被加载、解析、初始化过。如果没有，则执行该类的加载过程。</p>
<p>类加载检查过后，对象所需的内存大小已经完全确定，虚拟机开始为对象分配内存，这里涉及两种内存分配方式：</p>
<p><strong>方式1：指针碰撞</strong><br>如果Java堆中的内存是规整的，使用中的内存放一边，空闲的内存放另外一边，中间放着一个指针作为分界点指示器，那么此时的分配内存其实就是把指针向空闲空间挪动对象大小的距离，这种分配方式成为“指针碰撞”。</p>
<p><strong>方式2：空闲列表</strong><br>如果Java堆中的内存是不规整的，已使用内存和空闲内存相互交错，那么此时虚拟机就需要维护一个列表，记录那些内存块是可用的，分配内存的时候从列表记录中定位到一块足够大的控件划分给对象实例，并更新列表上的记录，这种分配方式成为“空闲列表”。</p>
<p>内存分配的方式由Java堆是否规整决定，而Java堆是否规整由采用的垃圾回收器是否带有压缩整理功能决定。所以使用Serial、ParNew等带Compact过程的收集器时采用“指针碰撞”方式，而使用CMS这种基于Mark-Sweep算法的收集器时，则采用“空闲列表”方式。</p>
<blockquote>
<p>内存分配过程中的并发问题解决</p>
</blockquote>
<p>方案1：对分配内存空间的动作进行同步处理，即采用CAS配上失败重试的方式保证更新操作的原子性。<br>方案2：基于本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）将内存分配的动作按照线程划分在不同的空间之中进行。</p>
<blockquote>
<p>对象初始化</p>
</blockquote>
<p><strong>默认初始化：</strong><br>虚拟机对对象进行设置：对象是哪个类的实例，如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄，是否启用偏向锁。。。</p>
<p><strong>显示初始化：</strong><br>经过上一阶段后，对象的所有字段还都是零，接下来会执行<init>方法，进行显示初始化，之后该对象才能正常使用。</init></p>
<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p>对象在内存中存储的布局可以分为3块区域：</p>
<ul>
<li>对象头（Header）</li>
<li>实例数据（Instance Data）</li>
<li>对齐填充（Padding）</li>
</ul>
<h2 id="对象头（Header）"><a href="#对象头（Header）" class="headerlink" title="对象头（Header）"></a>对象头（Header）</h2><p>该区域包含两部分。</p>
<p>第一部分：用于存储对象自身的运行时数据，例如：哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。</p>
<p>第二部分：类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，那么在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。</p>
<h2 id="实例数据（Instance-Data）"><a href="#实例数据（Instance-Data）" class="headerlink" title="实例数据（Instance Data）"></a>实例数据（Instance Data）</h2><p>用于存储对象的有效信息，即代码中所定义的各种类型的字段内容。</p>
<p>存储顺序说道虚拟机分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义顺序的影响。默认分配策略为：</p>
<ul>
<li>相同宽度的字段分配到一起</li>
<li>父类中定义的变量会出现在子类之前</li>
<li>如果CompactFields参数值为true（默认就是true），那么子类中较窄的变量也可能会插入到父类的变量空隙之中</li>
</ul>
<h2 id="对齐填充（Padding）"><a href="#对齐填充（Padding）" class="headerlink" title="对齐填充（Padding）"></a>对齐填充（Padding）</h2><p>该区域仅仅起着占位符的作用，由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，也就是对象大小必须是8字节的整数倍，因此当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>
<h1 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h1><p>虚拟机规范中只规定了通过一个指向对象的引用（reference类型）来访问对象，具体的对象访问方式由虚拟机的实现而定。目前主流的访问方式由两种：</p>
<ul>
<li>句柄</li>
<li>直接指针</li>
</ul>
<h2 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h2><p>Java堆中会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的内存地址值。</p>
<p><strong>优点</strong><br>reference中存储的是稳定的句柄地址，在对象被移动（垃圾回收时对象会频繁移动）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-4fce094255874580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过句柄访问对象.png"></p>
<h2 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h2><p>reference中直接存储对象地址值，对象中存储访问类型数据的指针 + 对象实例数据。</p>
<p><strong>优点</strong><br>速度更快，节省了一次指针定位的时间开销，鉴于对象的访问在Java中非常频繁，因此积累起来会是一项不小的性能优化。Sun HotSpot采用“直接指针”方式进行对象访问。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-402c1044defa516d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过直接指针访问对象.png"></p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《深入理解Java虚拟机》-JVM内存模型]]></title>
      <url>/2017/05/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自不同的用途：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-94fef5834e5f47ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JVM内存模型图.png"></p>
<h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>程序计数器（Program Counter Register）是一块较小的内存空间，属于线程私有区域，此区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<p><strong>作用：</strong><br>当前线程所执行的字节码的行号指示器。</p>
<p>在虚拟机概念模型中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等都依赖此计数器。</p>
<p><strong>为什么该区域属于线程私有</strong><br>Java虚拟机的多线程是通过：线程轮流切换，并分配CPU执行时间的方式来实现的（CPU在任何一个确定的时刻只会执行【一条线程】中的指令）。为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，不同线程之间互不影响，独立存储。</p>
<h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>Java虚拟机栈（Java Virtual Machine Stacks）描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（方法运行时的基础数据结构）用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完毕，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p><strong>注意事项：</strong></p>
<ul>
<li>线程私有区域，生命周期与线程一致。</li>
<li>局部变量表存放了<strong>编译期</strong>可知的各种基本数据类型，对象引用</li>
<li>64位长度的long和double类型的数据占用2个Slot，其余数据类型只占1个</li>
<li>局部变量表所需的内存空间在编译期间完成分配，运行期间方法入栈时在帧中分配的局部变量空间是确定的，不会发生改变。</li>
</ul>
<p><strong>本区域的两种异常：</strong></p>
<ul>
<li>StackOverflowError<br>如果线程请求的栈深度大于虚拟机锁允许的深度，则抛出此异常。</li>
<li>OutOfMemoryError<br>虚拟机扩展时无法申请到足够的内存时，抛出此异常。</li>
</ul>
<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>本地方法栈（Native Method Stack）与Java虚拟机栈作用类似，区别在于前者服务于Native方法，而后者服务于Java方法。</p>
<p>虚拟机规范中对应本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机实现方式各自不同。其中Sun HotSpot虚拟机直接把<strong>本地方法栈</strong> 和 <strong>Java虚拟机栈</strong>合二为一了。</p>
<p>和Java虚拟机栈一样，本地方法栈也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。</p>
<h1 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h1><ul>
<li>此区域的作用是存放对象的实例，几乎所有的对象实例都在这里分配内存。</li>
<li>该区域是被所有线程共享的一块内存区域，在虚拟机启动时创建。</li>
<li>该区域是垃圾回收器管理的主要区域</li>
<li>从内存回收中分代收集的角度看，该区域可分为：新生代和老年代。</li>
<li>该区域的内存空间可以是不连续的，只要逻辑上连续即可（类似磁盘空间）</li>
<li>如果对中没有内存完成实例分配，并且堆也无法再扩展时，抛出<code>OutOfMemoryError</code>异常</li>
</ul>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><ul>
<li>方法区（Method Area）用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</li>
<li>如果GC分代收集扩展至方法区，那么该区域一般被称为“永久代”。但是不同的虚拟机对此的定义，有所不同。</li>
<li>垃圾回收在此区域比较少出现，一般是针对常量池的回收，和对类型的卸载。</li>
<li>当方法区无法满足内存分配需求时，将抛出<code>OutOfMemoryError</code></li>
</ul>
<h1 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h1><ul>
<li>运行时常量池（Runtime Constant Pool）是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中。</li>
<li>运行时常量池相对于Class文件常量池而言更具动态性。</li>
<li>受方法区内存的限制，当常量池无法再申请到内存时会抛出<code>OutOfMemoryError</code></li>
</ul>
<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><ul>
<li>在JDK1.4中引入了NIO类，一种基于通过（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。由于变了在Java堆和Native堆中来回复制数据，因此在一些场景中可以显著提高性能。</li>
<li>直接内存（Direct Memory）并不是虚拟机运行时数据的一部分</li>
<li>直接内存的分配不会受Java堆内存大小的限制，但是受本机总内存大小以及处理器寻址空间的限制。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自找的压力与焦虑]]></title>
      <url>/2017/05/01/%E8%87%AA%E6%89%BE%E7%9A%84%E5%8E%8B%E5%8A%9B%E4%B8%8E%E7%84%A6%E8%99%91/</url>
      <content type="html"><![CDATA[<p>在生活方式的选择上，一直以来都是拒绝一眼能望到头的生活方式。</p>
<p>正因为如此，毕业之后便义无反顾的去了北京，而且由于工作的原因经常频繁的在全国各地出差，北京租的房子基本很少回去，也从来都是无怨无悔，当时觉得虽然快节奏高压力的生活比较辛苦，但是由于深得领导厚爱和关心，至少让自己得以快速的成长，视野得以开阔。</p>
<p>正因为如此，离开了效力将近5年的公司，尝试更加有挑战性的工作。</p>
<p>现在，在毕业了7个年头之后，在许多高中、大学同学都已经有了稳定的生活和工作，开始安安稳稳的过上老婆孩子热炕头的生活的时，再次选择去挑战以前一直想做、一直研究、但却从来没有真正开始实施过的事。其实并没有什么神奇的，就是倒腾点小生意。</p>
<p>然而很多事情都是嘴上说说容易，真正做起来，则无疑需要克服诸多的困难，踩很多的坑，商场如战场，处处都得谨慎。今天粗略的一算，从明天开始每天一睁开眼，必须进账500元才能保本，必须进账700元才能保障基本的生活。这些钱对于很多人来说都是小菜，压根不值一提，但是对于一个一直以来习惯于躲在电脑屏幕前默默撸代码，远离世界，只关心DNF、王者荣耀、真人秀和电影的一个穷屌丝而言，着实吓了一跳！顿时感觉压力巨大！</p>
<p>其实转念一想，这些压力，哪个做企业的没有自己在承担？只是由于自己活了这么些年，一直没有体会过罢了。现在自己选择去体验，去承担这个压力，至少是踏出了第一步。</p>
<p>想起来一句话，大概意思就是：人的一生后悔自己想做而没做的事，远远多于做了但做错的事。回想大学时光，确实如此。自己也不想一直把一些事情永远只停留在嘴上，所以，一个字，干！</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[最近面试的一些感悟]]></title>
      <url>/2017/05/01/%E6%9C%80%E8%BF%91%E9%9D%A2%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</url>
      <content type="html"><![CDATA[<p>五一之前，公司陆陆续续在招人，补充Android队伍，在节前的两天，更是夸张到1天安排了10多个人过来，我从早上8点半去了就开始面试，除了中午吃饭的半小时之外，一直面试到下午6点结束，也只面试了8个人。</p>
<p>面试者紧张，面试别人也紧张，双方都是有备而来，而且技术问题并不涉及任何的扯淡，会就是会，不会就是不会。一个又一个的面试，尤其是连续面试的时候，让我好些时候都有个幻觉：这一类的知识点，我刚才是不是问过了？心里这么想，也不好意思问出来，否则显得多不专业啊！</p>
<p>最近接触了各种各样的同学，在此简单分类总结一下：</p>
<h1 id="狮子大开口型"><a href="#狮子大开口型" class="headerlink" title="狮子大开口型"></a>狮子大开口型</h1><p>简历上各种3年5年开发经验，知识面很狭窄，技术深度很浅，对源码和原理基本不了解，一些普通技术的基本使用也说不清楚，要么英语发音让我完全听不懂，要么是以时间长了忘了为由搪塞过去。</p>
<p>但是，重点来了：薪资要求，动辄16K+17薪，动辄20K+15薪。语气霸气且坚定，坚持“反正不能比我以前的薪资低！”。</p>
<h1 id="懵逼型"><a href="#懵逼型" class="headerlink" title="懵逼型"></a>懵逼型</h1><p>这类同学不知道为什么选择来应聘，因为他们完全没有做好面试的准备。</p>
<p>整个面试过程基本处于一个懵逼状态，问啥啥不知道，四大组件只知道Activity，Service和BroadCast只是“听说过”。</p>
<ul>
<li>线程池？？ 。。。</li>
<li>Handler实现机制？？。。。</li>
<li>MVP是指什么？？。。。</li>
</ul>
<p>甚至还有一个同学，简历上有Github和CSDN的账号，我现场用手机登录，发现博客里很多都是教别人怎么学习Android，怎么做开发，面试题集锦等等，让他讲一篇他自己写的博客，也是支支吾吾，连10个字都说不出来。</p>
<p>这都是啥意思呢？当然，这类面试也结束的最快。</p>
<h1 id="装逼型"><a href="#装逼型" class="headerlink" title="装逼型"></a>装逼型</h1><p>这种类型的同学有以下特点：</p>
<ul>
<li>表达能力不错</li>
<li>看不上一些技术点，更喜欢谈宏观理论，对普通的技术知识有一种明显的不屑感</li>
<li>喜欢以基于A问题延展出自己比较了解的但是可能跟A相关度不大的B问题侃侃一番，而企图绕过A问题</li>
<li>喜欢转移话题，偷换概念</li>
</ul>
<p>让我印象最深的是两个：</p>
<p>一个是9年开发经验，2年Java，7年Android，之前公司的头衔是技术总监；一个是6年开发，多次创业经历，各种天使轮A轮什么的。</p>
<p>由于我自己只是一个普通的开发人员，而且公司招的也只是Android开发人员，那我当然要问Android开发需要的知识和技能了。但是得到的答复很多情况下都是：</p>
<ul>
<li>原理这块啊，时间长了，忘记了。</li>
<li>内存处理这块，也没什么难处理的问题，都是小事。</li>
<li>开发中遇到的问题？也没什么问题，或者算不上问题，反正最终都能解决。</li>
<li>数据结构这块，我没有深入研究过。</li>
<li>我最近3年都在做SDK开发，这些我们都用不上，所以都记不清了。<ul>
<li>问：你觉得你最近3年做SDK，对于现在将要应聘的应用开发来说，有什么不利因素吗？</li>
<li>答：没有不利因素，因为SDK开发还是用到的应用开发中的一些技术。</li>
<li>问：那你们做SDK这块，最主要使用了哪些技术？</li>
<li>答：XXX,XXX,XXX。</li>
<li>问：聊聊XXX吧。 </li>
<li>答：（参考上面几种回答）</li>
</ul>
</li>
</ul>
<p>那。。。还怎么继续聊呢？</p>
<p>如果觉得招聘要求上的条目都很小儿科，那为什么搞不定这些小儿科的问题呢？那为什么还来应聘这个小儿科的职位呢？我们也没有招CTO啊？</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="技术角度而言"><a href="#技术角度而言" class="headerlink" title="技术角度而言"></a>技术角度而言</h2><p>其实技术是永无止境的，无论是从深度还是广度来讲，每个人都在不停的学习过程中，也很少有人说自己精通了什么。</p>
<p>我自己对于底层原理，FrameWork，数据结构和算法也都是入门级，甚至门都没入。但是工作了几年，不可能任何的深入研究的尝试都没有做过，不可能连很多基础的使用都以“忘记了”来搪塞，不可能所有的细节都以“这些都是小问题”来糊弄。</p>
<p>做技术，还是要有严谨的态度，还是要有所追求的。</p>
<h2 id="职场而言"><a href="#职场而言" class="headerlink" title="职场而言"></a>职场而言</h2><p>一个萝卜一个坑，无论是BAT，还是小米，今日头条，饿了么，美团，还是诸多默默无闻的中小企业，都需要技术人员，公司有大小，技术人员的水平有高低，但是大家各自都有自己合适的位置，合适的坑。</p>
<p>自己感觉自己技术不错，有更好的追求了，就追求更大的平台去挑战一下；自己感觉还需要再沉淀，那就继续再修炼。</p>
<p>我自己技术水平一般，面试了阿里也没有进去，有自知之明且有目标和追求，所以我在现在的位置上珍惜 + 努力。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Android7.0适配之FileProvider的使用]]></title>
      <url>/2017/04/25/Android7.0%E9%80%82%E9%85%8D%E4%B9%8BFileProvider%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>本文包括4个部分:</p>
<ul>
<li>FileProvider登场的背景</li>
<li>尝试翻译官方文档 FileProvider (只是自己学习的过程中顺便翻译了,并未校验,因为懒的弄;如发现错误,麻烦帮忙指正;如果掉坑里了,后果自负-_-!)</li>
<li>FileProvider支持的path类型</li>
<li>FileProvider的使用示例</li>
</ul>
<h1 id="Android-7-0-文件权限的变化"><a href="#Android-7-0-文件权限的变化" class="headerlink" title="Android 7.0 文件权限的变化"></a>Android 7.0 文件权限的变化</h1><p>为了提高私有文件的安全性，在targetSdk版本为N或者以后版本的app中，其私有目录将会限制访问。这可以防止私有文件元数据的泄露，比如文件大小或者是文件是否存在。但这给开发者带来了一些不利的影响：</p>
<ul>
<li>文件的所有者不能放宽文件权限，如果你使用MODE_WORLD_READABLE<br>或者 MODE_WORLD_WRITEABLE操作文件，将会触发<code>SecurityException</code>。</li>
<li>当跨package域传递file://的URI时，接收者得到的将是一个无权访问的路径，因此，这将会触发<code>FileUriExposedException</code>。对于这类操作，可以使用<code>ContentProvider</code>, 但官方推荐的方式是使用<code>FileProvider</code>.<br>在targetSdk为Android N之前的系统版本中，可以使用如下方法调用系统相机拍照并存入指定路径中</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">Uri uri = Uri.fromFile(sdcardTempFile);</div><div class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);</div></pre></td></tr></table></figure>
<p>但是当你将targetSdk设置为Android N时 , 在执行到这段代码时app就crash了，crash的原因便是<code>FileUriExposedException</code> 。这里有两种解决方案:</p>
<p><strong>方案1: ContentProvider</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">ContentValues contentValues = <span class="keyword">new</span> ContentValues(<span class="number">1</span>);</div><div class="line">contentValues.put(MediaStore.Images.Media.DATA, sdcardTempFile.getAbsolutePath());</div><div class="line">Uri uri = context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);</div></pre></td></tr></table></figure>
<p><strong>方案2: FileProvider</strong></p>
<h1 id="FileProvider简介"><a href="#FileProvider简介" class="headerlink" title="FileProvider简介"></a>FileProvider简介</h1><p><code>FileProvider</code> 是 <code>ContentProvider</code> 一个特殊的子类,用于通过创建<code>content://</code>  类型的URI来替代<code>file://</code> 类型的URI,从而为一个app提供更加安全的文件分享操作.</p>
<p>一个content URI允许你授予临时的读写权限,当你创建一个包含content URI的intent时,为了将这个content URI发送给一个客户端app,还可以调用Intent.setFlags()方法添加权限.这个Content类型的URI只要app存在活跃的activity就会一直有效,一旦退出app,该URI失效.</p>
<p>相比之下,<code>File://</code>类型的URI一旦提供了以后,任何app都可以使用该URI,并且在主动改变URI路径之前,这个URI一直有效,可以随时访问.这使得安全性大为降低.<br>由于Content URI提供的更高等级的文件安全机制,使得FileProvider成为Android安全架构的一个关键部分.</p>
<p>FileProvider主要包含以下5方面的知识点:</p>
<ul>
<li>定义一个FileProvider</li>
<li>指定可访问的文件</li>
<li>为一个文件创建一个Content URI</li>
<li>为URI提供临时权限</li>
<li>将Content URI提供给另外一个app</li>
</ul>
<h2 id="1-定义一个FileProvider"><a href="#1-定义一个FileProvider" class="headerlink" title="1.定义一个FileProvider"></a>1.定义一个FileProvider</h2><p>由于FileProvider默认提供了为文件创建content URI的功能,因此你就不必再在代码中定义一个它的子类了.你可以直接在XML文件中声明一个FileProvider.</p>
<p>声明FileProvider步骤:</p>
<ol>
<li>在application标签下添加一个标签</li>
<li>设置android:name 属性为android.support.v4.content.FileProvider</li>
<li>基于app的包名来设置android:authorities属性,例如:包名为mydomain.com,那么授权路径为:com.mydomain.fileprovider</li>
<li>设置android:exported 属性为false;FileProvider不需要public</li>
<li>设置android:grantURIPermissions 属性为true,允许文件的临时访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">        ...</div><div class="line">        <span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">            <span class="attr">android:authorities</span>=<span class="string">"com.mydomain.fileprovider"</span></div><div class="line">            <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">            <span class="attr">android:grantURIPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果想重写FileProvider中的方法,那么继承FileProvider类,并且在XML文件中的声明时,android:name 需要使用自定义类的全路径类名</p>
<h2 id="2-指定可访问的文件"><a href="#2-指定可访问的文件" class="headerlink" title="2.指定可访问的文件"></a>2.指定可访问的文件</h2><p>一个FileProvider只能为提前指定好的文件目录生成content URI.可以通过在xml文件中,以<code>&lt;paths&gt;</code>标签的形式指定文件目录.<br>比如下面的代码,表明你计划为 images/ 目录下的子文件请求content URI</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">"my_images"</span> <span class="attr">path</span>=<span class="string">"images/"</span>/&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;paths&gt;</code>标签必须包含一个或多个下列标签</p>
<ul>
<li><code>&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code><br>内部存储路径,与Context.getFilesDir()返回的路径一致</li>
</ul>
<ul>
<li><code>&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code><br>内部缓存路径,与Context.getExternalFilesDir() 返回的路径一致</li>
</ul>
<ul>
<li><code>&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code><br>外置存储卡根目录,与Context.getExternalFilesDir()返回的路径一致</li>
</ul>
<blockquote>
<p>注意</p>
</blockquote>
<ul>
<li>name代表URI的路径,为了安全起见,隐藏了具体的目录位置 , 具体的目录位置由path字段指定</li>
<li>所有的path指定的都是目录名,包含了旗下的子目录,而不是文件名.无法通过文件名来指定单个文件,也无法通过通配符的形式指定一系列子文件.</li>
</ul>
<p>必须为每个需要content URI的路径在xml提供标签来指定,比如下面的代码就提供了两个目录</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">"my_images"</span> <span class="attr">path</span>=<span class="string">"images/"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">"my_docs"</span> <span class="attr">path</span>=<span class="string">"docs/"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在资源目录下创建对应的xml文件,比如res/xml/file_paths.xml,在Manifest文件中将路径xml通过<code>&lt;meta-data&gt;</code>标签与<code>FileProvider</code>绑定起来.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">    <span class="attr">android:authorities</span>=<span class="string">"com.mydomain.fileprovider"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:grantURIPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">        <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-为文件生成content-URI"><a href="#3-为文件生成content-URI" class="headerlink" title="3.为文件生成content URI"></a>3.为文件生成content URI</h2><p>为了与其他app通过content URI来分享文件,你的app需要生成一个content URI.方法如下:</p>
<p><strong>分享方app:</strong></p>
<ol>
<li>为该文件创建一个File对象</li>
<li>将File对象传递给getUriForFile(),获取一个URI对象</li>
<li>将该URI对象通过intent传递给其他的app</li>
</ol>
<p><strong>接收方app:</strong><br>通过ContentResolver.openFileDescriptor获取一个ParcelFileDescriptor , 读取该文件</p>
<p>例如:<br>假设你的app需要提供给其他app一个FileProvider , authority授权名为<code>com.mydomain.fileprovider</code> , 为内部存储目录<code>images/</code> 目录下的<code>default_image.jpg</code> 文件创建一个content URI.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File imagePath = <span class="keyword">new</span> File(Context.getFilesDir(), <span class="string">"images"</span>);</div><div class="line">File newFile = <span class="keyword">new</span> File(imagePath, <span class="string">"default_image.jpg"</span>);</div><div class="line">Uri contentUri = FileProvider.getUriForFile(getContext(), <span class="string">"com.mydomain.fileprovider"</span>, newFile);</div></pre></td></tr></table></figure>
<p>代码结果:<br><code>getUriForFile()</code>方法返回了一个contentUri , 路径内容为: <code>content://com.mydomain.fileprovider/my_images/default_image.jpg</code></p>
<h2 id="4-给URI提供临时权限"><a href="#4-给URI提供临时权限" class="headerlink" title="4.给URI提供临时权限"></a>4.给URI提供临时权限</h2><p>从getUriForFile()获取到content URI以后,通过以下任意一种方式授予访问权限</p>
<p><strong>方式1:</strong><br>调用<code>Context.grantUriPermission(package, Uri, mode_flags)</code>为content URI 授权.使用指定的mode_flags</p>
<p>这里需指定授权的包名和mode_flags,权限分为</p>
<ul>
<li>FLAG_GRANT_READ_URI_PERMISSION 读</li>
<li>FLAG_GRANT_WRITE_URI_PERMISSION 写</li>
</ul>
<p>可单选可多选<br>权限的有效期为:手动撤销授权revokeUriPermission() 或 重启设备.</p>
<p><strong>方式2:</strong><br>通过调用<code>Intent</code> 的 <code>setData()</code>方法将此content URI放入intent中<br>调用<code>Intent.setFlags()</code> ,选项为</p>
<ul>
<li>FLAG_GRANT_READ_URI_PERMISSION 读</li>
<li>FLAG_GRANT_WRITE_URI_PERMISSION 写</li>
</ul>
<p>可单选可多选<br>将此intent发送给其他app.一般情况下,会通过<code>setResult()</code>方法发送给其他intent</p>
<p><strong>权限有效期</strong> : 当接收到的activity处于活跃状态时持续有效 , 退出时自动失效,一个activity获取到得content URI权限,这个权限会延展至所属的整个app.</p>
<h2 id="5-为其他app提供content-URI"><a href="#5-为其他app提供content-URI" class="headerlink" title="5.为其他app提供content URI"></a>5.为其他app提供content URI</h2><h3 id="5-1其他app请求自己app"><a href="#5-1其他app请求自己app" class="headerlink" title="5.1其他app请求自己app"></a>5.1其他app请求自己app</h3><p>为一个文件提供content URI给其他app有很多形式,其中一个常用的方式时接收其他app通过<code>startActivityResult()</code>方法启动自己的app , 通过Intent来启动自己app中的一个Activity.<br>你可以立即返回一个content URI , 或者展示一个交互界面供用户选择一个文件 , 一旦用户选择了该文件 , 就将该文件的的content URI返回给请求者app . 无论哪种方式 , 最终都通过<code>setResult()</code>方式将content URI返回给请求者.</p>
<h3 id="5-2自己app请求其他app"><a href="#5-2自己app请求其他app" class="headerlink" title="5.2自己app请求其他app"></a>5.2自己app请求其他app</h3><p>将content URI放入<code>ClipData</code>对象中,然后将ClipData对象添加进Intent中,再将Intent发送给一个app.</p>
<p>调用<code>Intent.setClipData()</code>来添加<code>ClipData</code>对象,可以放入1个或多个 . 每个ClipData对象都包含一个content URI</p>
<p>当通过<code>Intent.setFlags()</code>来设置临时访问权限时,这些权限会适用于所有的content URIs</p>
<blockquote>
<p>注意</p>
</blockquote>
<p><code>Intent.setClipData()</code>方法只能在API 16(Android4.1)以上才能使用 , 如果为了确保版本的兼容性,那么只能每次通过intent发送一个content URI.将<code>ACTION_SEND</code>添加进<code>action</code>,通过<code>setData()</code>将content URI添加进<code>data</code>.</p>
<h1 id="FileProvider支持的path类型"><a href="#FileProvider支持的path类型" class="headerlink" title="FileProvider支持的path类型"></a>FileProvider支持的path类型</h1><p>从FileProvider源码查看其中涉及的Path类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_ROOT_PATH = <span class="string">"root-path"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_FILES_PATH = <span class="string">"files-path"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_CACHE_PATH = <span class="string">"cache-path"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_EXTERNAL = <span class="string">"external-path"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_EXTERNAL_FILES = <span class="string">"external-files-path"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_EXTERNAL_CACHE = <span class="string">"external-cache-path"</span>;</div></pre></td></tr></table></figure>
<p>从Android官方文档上可以看出FileProvider提供以下几种path类型：</p>
<ul>
<li><code>&lt;files-path path=&quot;&quot; name=&quot;camera_photos&quot; /&gt;</code></li>
</ul>
<p>该方式提供在应用的内部存储区的文件/子目录的文件。它对应<code>Context.getFilesDir()</code>返回的路径，例如<code>/data/data/com.crocutax.mytest/files</code></p>
<ul>
<li><code>&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code></li>
</ul>
<p>该方式提供在应用的内部存储区的缓存子目录的文件。它对应<code>Context.getCacheDir()</code>返回的路径，例如<code>/data/data/com.crocutax.mytest/cache</code></p>
<ul>
<li><code>&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code></li>
</ul>
<p>该方式提供在外部存储区域根目录下的文件。它对应<code>Environment.getExternalStorageDirectory()</code>返回的路径，例如<code>/storage/emulated/0</code></p>
<ul>
<li><code>&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code></li>
</ul>
<p>该方式提供在应用的外部存储区根目录的下的文件。它对应<code>Context.getExternalFilesDir(String type)</code>返回的路径。例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ContextCompat.getExternalFilesDirs(MainActivity.<span class="keyword">this</span>,<span class="keyword">null</span>)[<span class="number">0</span>]:  </div><div class="line"><span class="comment">//log输出: /storage/emulated/0/Android/data/com.crocutax.mytest/files</span></div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</code></li>
</ul>
<p>该方式提供在应用的外部缓存区根目录的文件。它对应<code>Context.getExternalCacheDir()</code>返回的路径。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ContextCompat.getExternalCacheDirs(MainActivity.<span class="keyword">this</span>)[<span class="number">0</span>]: </div><div class="line"><span class="comment">//log输出: /storage/emulated/0/Android/data/com.crocutax.mytest/cache</span></div></pre></td></tr></table></figure>
<h1 id="FileProvider的使用示例"><a href="#FileProvider的使用示例" class="headerlink" title="FileProvider的使用示例"></a>FileProvider的使用示例</h1><h2 id="1-在Manifest文件中定义FileProvider"><a href="#1-在Manifest文件中定义FileProvider" class="headerlink" title="1.在Manifest文件中定义FileProvider"></a>1.在Manifest文件中定义FileProvider</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">     <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">     <span class="attr">android:authorities</span>=<span class="string">"com.touchmedia.daolan.fileprovider"</span></div><div class="line">     <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">     <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">     <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">         <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">         <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</div><div class="line"> <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-res-xml-file-paths中指定共享目录"><a href="#2-res-xml-file-paths中指定共享目录" class="headerlink" title="2.res/xml/file_paths中指定共享目录"></a>2.res/xml/file_paths中指定共享目录</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">"sdcard_path"</span> <span class="attr">path</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-通过FileProvider获取ContentUri"><a href="#3-通过FileProvider获取ContentUri" class="headerlink" title="3.通过FileProvider获取ContentUri"></a>3.通过FileProvider获取ContentUri</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装app</span></div><div class="line">...</div><div class="line"><span class="comment">//通过FileProvider获取contentUri</span></div><div class="line">Uri contentUri = FileProvider.getUriForFile(mContext, <span class="string">"com.touchmedia.daolan.fileprovider"</span>, apkFile);</div><div class="line"><span class="comment">//授予临时访问权限</span></div><div class="line">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">intent.setDataAndType(contentUri,<span class="string">"application/vnd.android.package-archive"</span>);</div><div class="line"><span class="comment">//跳往安装界面</span></div><div class="line">mContext.startActivityForResult(intent,INSTALL_APP);</div></pre></td></tr></table></figure>
<p>其他涉及到本地文件读取的操作,例如图库,操作方式都一样,跟以前唯一的不同仅仅只是FileProvider的引入.</p>
<p>另外,可参考如下链接:</p>
<p><a href="https://github.com/commonsguy/cw-omnibus/tree/master/ContentProvider/V4FileProvider" target="_blank" rel="external">CommonsWare FileProvider专题</a><br><a href="http://blog.csdn.net/fengyuzhengfan/article/details/52876586" target="_blank" rel="external">FileProvider无法获取外置SD卡问题解决方案</a><br><a href="http://www.devio.org/2016/09/28/Android7.0%E9%80%82%E9%85%8D%E5%BF%83%E5%BE%97/" target="_blank" rel="external">Android7.0适配心得</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 版本特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio导入Eclipse项目-填坑记录]]></title>
      <url>/2017/04/25/AndroidStudio%E5%AF%BC%E5%85%A5Eclipse%E9%A1%B9%E7%9B%AE-%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>最早开始使用AndroidStudio的时候 , 导入Eclipse项目 , 填了很多坑 , 当时也没想着记录下来 . 最近公司做一个视频监控的项目 , down下来硬件厂商提供的Android SDK之后 , 发现竟然是Eclipse写的!!! 这已经是2017年了!!! Eclipse !!!</p>
<p>导入的过程中,再次填坑2个,在此记录.以后再遇到此类问题,都会补充在这篇文章里,不过考虑到Eclipse写Android项目真是几乎绝迹了,所以估计这篇文章收录的也不会再多了-_-!</p>
<h1 id="Could-not-determine-the-class-path-for-interface"><a href="#Could-not-determine-the-class-path-for-interface" class="headerlink" title="Could not determine the class-path for interface"></a>Could not determine the class-path for interface</h1><p><strong>错误信息:</strong><br><code>Error:Could not determine the class-path for interface com.android.builder.model.AndroidProject.</code><br><img src="http://upload-images.jianshu.io/upload_images/1958298-3c58b10cf5ec4f79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常信.png"></p>
<p><strong>原因</strong><br>Gradle配置错误</p>
<p><strong>解决方案:</strong><br><strong>第一步:</strong><br>将 项目根目录下的build.gradle文件中gradle的classpath修改成一个本地已有的gradle版本,比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    classpath <span class="string">'com.android.tools.build:gradle:2.3.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>第二步:</strong><br>将gradle目录下gradle-wrapper.properties文件中distributionUrl修改为对应的gradle包,比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-3.3-all.zip</span></div></pre></td></tr></table></figure>
<p><strong>第三步:</strong><br>rebuild</p>
<p>参考地址: <a href="https://stackoverflow.com/questions/42777321/could-not-determine-the-class-path-for-interface-com-android-builder-model-andro/42993473#42993473" target="_blank" rel="external">stackoverflow 链接直达</a></p>
<h1 id="非法字符-‘-ufeff’-错误-需要class-interface或enum"><a href="#非法字符-‘-ufeff’-错误-需要class-interface或enum" class="headerlink" title="非法字符: ‘\ufeff’ 错误: 需要class, interface或enum"></a>非法字符: ‘\ufeff’ 错误: 需要class, interface或enum</h1><p><strong>错误信息:</strong><br><img src="http://upload-images.jianshu.io/upload_images/1958298-9708a77ecf34472a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非法字符 &#39;\ufeff&#39;.png"></p>
<p><strong>原因</strong><br>该文件非UTF-8 无 BOM 格式，具体原因未知,可能是Android Studio检测更加严格了?(就像当初很多Eclipse中的.9图放在AndroidStudio就报错一样) 这里只是猜测.</p>
<p><strong>解决方案:</strong><br>手动把该文件转换为UTF-8 无 BOM格式编码, 我使用的时Notepad++,打开该文件后,直接编码转换即可</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-caaf240e493a2ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="转换为UTF-8 无 BOM编码格式.png"></p>
<p>然后rebuild就可以了.</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线程池基础知识整理]]></title>
      <url>/2017/04/23/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="1-为什么需要线程池"><a href="#1-为什么需要线程池" class="headerlink" title="1.为什么需要线程池"></a>1.为什么需要线程池</h1><p>在面向对象编程中 ,创建和销毁对象是很耗时的,因为创建一个对象要获取内存资源或者其他更多资源.所以在日常编程中才会有意的避免过多的创建并不必要的对象.</p>
<p>线程的创建和销毁也是同样,而且相比于普通的对象更为消耗资源.线程池技术的引入,就是为了解决这一问题.</p>
<h2 id="1-1-线程池简介"><a href="#1-1-线程池简介" class="headerlink" title="1.1 线程池简介"></a>1.1 线程池简介</h2><p><strong>线程池</strong>是指在初始化一个多线程应用程序过程中创建的一个线程集合,线程池在任务未到来之前,会创建一定数量的线程放入空闲队列中.这些线程都是处于睡眠状态,即均未启动,因此不消耗CPU,只是占用很小的内存空间.当请求到来之后,线程池给这次请求分配一个空闲线程,把请求传入此线程中运行,进行处理.</p>
<p>当预先创建的线程都处于运行状态时,线程池可以再创建一定数量的新线程,用于处理更多的任务请求.</p>
<p>如果线程池中的最大线程数使用满了,则会抛出异常,拒绝请求.当系统比较清闲时,也可以通过移除一部分一直处于停用状态的线程,线程池中的每个线程都有可能被分配多个任务,一旦任务完成,线程回到线程池中并等待下一次分配任务.</p>
<p>使用线程池可以提升性能,减少CPU资源的消耗,同时还可以控制活动线程,防止并发线程过多,避免内存消耗过度.</p>
<h2 id="1-2-线程池优点总结"><a href="#1-2-线程池优点总结" class="headerlink" title="1.2 线程池优点总结"></a>1.2 线程池优点总结</h2><ul>
<li>复用线程池中的线程,避免因为线程的创建和销毁所带来的性能开销</li>
<li>能有效控制线程池的最大并发数量,避免大量线程之间因互相抢占系统资源而导致的阻塞现象.</li>
<li>能够对线程进行简单的管理,并提供定时执行,指定间隔,循环执行等功能.</li>
</ul>
<h1 id="2-Executor的继承关系图"><a href="#2-Executor的继承关系图" class="headerlink" title="2.Executor的继承关系图"></a>2.Executor的继承关系图</h1><p>黄色为接口 , 蓝色为类</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-1442fe24be61cbf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Executor继承关系图.png"></p>
<p>体系成员简介:</p>
<ul>
<li><p><strong>Executor</strong><br>线程池体系的顶层接口,只有一个execute()方法用于执行Runnable任务.该体系内的所有类,接口都默认实现/继承 此接口,并在此基础上进行分类扩展.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//源码</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> command Runnable任务</div><div class="line">     * <span class="doctag">@throws</span> RejectedExecutionException 如果任务无法继续执行,则抛出此异常</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException 如果传入的Runnable为null,则抛出此异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>ExecutorService</strong><br>Executor的扩展接口,用于定义一些Runnable管理相关的方法,比如</p>
<ul>
<li><code>void shutdown();</code> 有序关闭已经提交的任务,但是不再接受新的任务,重复shotdown无效.而且此方法不会等待已提交任务的执行完毕.</li>
<li><code>List&lt;Runnable&gt; shutdownNow();</code> 尝试停止所有正在执行的任务,终止所有处于等待队列中的任务,并将这些等待被执行的任务返回给调用者</li>
<li><code>boolean isShutdown();</code> 判断线程池是否已关闭</li>
<li><code>boolean isTerminated();</code> 当调用了showdown()方法后,所有任务是否已执行结束.注意:如果不事先调用showdown()方法,则此方法永远返回false.</li>
<li><code>boolean awaitTermination(long timeout, TimeUnit unit);</code> 当调用shotdown()方法后,调用此方法可以设置等待时间,等待执行中的任务全部结束,全部结束返回true.如果超时,或线程中断导致未全部结束则返回false.</li>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</code> 提交有返回值的Runnable任务.</li>
<li><code>&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,long timeout, TimeUnit unit)</code> 执行传入的任务,当所有任务执行结束或超时后,返回持有任务状态和结果的Future集合.<strong>注意:一个任务结束有两种情况:1.正常执行完成;2.抛出异常.</strong></li>
<li><code>&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks);</code> 执行传入的任务,只要有任何一个任务成功执行完成(不抛出异常),一旦有结果返回,或抛出异常,则其他任务取消.</li>
</ul>
</li>
<li><p><strong>ScheduledExecutorService</strong><br>ExecutorService的子接口,定义了延迟或周期性执行Runnable任务的方法.</p>
</li>
<li><p><strong>AbstractExecutorService</strong><br>ExecutorService的默认抽象实现类,对ExecutorService进行了简单实现,开发者可以参考并重写这些方法.</p>
</li>
<li><p><strong>SerialExecutorService</strong><br>ExecutorService的子接口,标记型接口,该类型的线程池会以队列(先进先出)的顺序执行提交的任务.</p>
</li>
<li><p><strong>ThreadPoolExecutor</strong><br>AbstractExecutorService子接口的默认实现类,可以使用这个类自定义线程池使用.系统提供的几种常用线程池,最终都是通过此类来创建.</p>
</li>
<li><p><strong>ScheduledThreadPoolExecutor</strong><br>ScheduledExecutorService子接口的实现类,继承ThreadPoolExecutor,用于延迟或周期性执行Runnable任务.</p>
</li>
</ul>
<h1 id="3-如何创建线程池"><a href="#3-如何创建线程池" class="headerlink" title="3.如何创建线程池"></a>3.如何创建线程池</h1><p>Executor是Java中的一个接口,其默认实现类是ThreadPoolExecutor,构造方法如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory,</div><div class="line">                          RejectedExecutionHandler handler)</div></pre></td></tr></table></figure></p>
<p>ThreadPoolExecutor一共有4个重载的构造方法,上述代码中的后三位参数都是可选参数.<br>通过构造方法即可自定义线程池.然后通过execute()来执行Runnable任务.</p>
<p>涉及到的几个参数解释如下:</p>
<ul>
<li><strong>corePoolSize</strong> </li>
</ul>
<p>线程池的核心线程数,默认情况下,核心线程会在线程池中一直存活,即使它们处于闲置状态.如果将ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true,那么闲置的[核心线程]在等待新任务到来时会有超时策略,这个时间间隔由keepAliveTime所指定,当等待时间超过keepAliveTime所指定的时长后,核心线程就会被终止.</p>
<ul>
<li><strong>maximumPoolSize</strong></li>
</ul>
<p>线程池所能容纳的最大线程数,当活动线程数达到这个数值后,后续的新任务将会被阻塞.</p>
<ul>
<li><strong>keepAliveTime</strong></li>
</ul>
<p>非核心线程闲置时的超时时长,超过这个时长,非核心线程就会被回收.当ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true时, keepAliveTime同样会作用于核心线程.</p>
<p><strong>这个[保活时间]设计的巧妙之处在于</strong>:当线程处于闲置状态时,并不马上销毁，而是在指定时间段内将其缓存在线程池中,以方便在限定的时间段内如果再有任务来临，能够快速的重新启用等待中的线程.处于闲置状态的空闲线程并不会占用多少内存,而且这样就能显著减少频繁的创建,销毁线程造成的内存消耗及性能下降.</p>
<ul>
<li><strong>unit</strong></li>
</ul>
<p>用于指定keepAliveTime参数的时间单位,这是一个枚举,常用的有TimeUnit.NANOSECONDS(毫秒),TimeUnit.SECONDS(秒),TimeUnit.MINUTES(分钟)等</p>
<ul>
<li><strong>workQueue</strong></li>
</ul>
<p>线程池中等待被执行的任务队列,这个队列仅持有通过execute方法提交的Runnable任务.</p>
<ul>
<li><strong>threadFactory</strong></li>
</ul>
<p>线程工厂,ThreadFactory是个接口,它只有一个方法,·<code>Thread newThread(Runnable r)</code>,executor创建新线程时调用</p>
<ul>
<li><strong>RejectedExecutionHandler</strong> 当由于线程阻塞,任务队列容量已满等因素导致无法成功执行任务时,这个handler会调用rejectedExecution方法来通知调用者.</li>
</ul>
<h1 id="4-系统封装的4种线程池"><a href="#4-系统封装的4种线程池" class="headerlink" title="4.系统封装的4种线程池"></a>4.系统封装的4种线程池</h1><p>这里要使用到Executors类,它是Executor体系的静态工厂类,类中封装了一些创建线程池的方法.<br>Executor与其子接口及其实现类负责定义和规范线程池,而Executors负责创建线程池.</p>
<h2 id="4-1-SingleThreadExecutor"><a href="#4-1-SingleThreadExecutor" class="headerlink" title="4.1 SingleThreadExecutor"></a>4.1 SingleThreadExecutor</h2><p>SingleThreadExecutor内部只有一个核心线程,它确保所有的任务都在同一个线程中按顺序执行.<br>它的意义在于统一所有的外界任务到一个线程中,使得在这些任务之间不需要处理线程同步的问题.</p>
<p>内部实现如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>代码测试:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">singleThreadExecutorTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//单一线程池</span></div><div class="line">    ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</div><div class="line">    <span class="comment">//开启5次线程</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        singleThreadExecutor.execute(<span class="keyword">new</span> MyThread());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//关闭线程池</span></div><div class="line">    singleThreadExecutor.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Log输出:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div></pre></td></tr></table></figure></p>
<h2 id="4-2-FixedThreadPoolExecutor"><a href="#4-2-FixedThreadPoolExecutor" class="headerlink" title="4.2 FixedThreadPoolExecutor"></a>4.2 FixedThreadPoolExecutor</h2><p>FixedThreadPoolExecutor是一种线程数量固定的线程池,只有核心线程,没有超时机制,任务队列没有大小限制.<br>当所有的线程都处于活动状态时,新任务都会处于等待状态,直到有线程空闲出来.<br>当线程处于空闲状态时,它们并不会被回收,除非线程池被关闭了.这意味着它能够更加快速的响应外界的请求.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码测试:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**自定义一个线程类,继承Thread,打印Log*/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" 执行"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixedThreadPoolTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//容量为2的固定线程池</span></div><div class="line">    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//创建5条线程</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        fixedThreadPool.execute(<span class="keyword">new</span> MyThread());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//关闭线程池</span></div><div class="line">    fixedThreadPool.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Log输出:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">2</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">2</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">2</span> 执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span> 执行</div></pre></td></tr></table></figure></p>
<p>可以发现,虽然new了5个Thread,但是系统只用两条线程来执行5个任务.</p>
<h2 id="4-3-CachedThreadPool"><a href="#4-3-CachedThreadPool" class="headerlink" title="4.3 CachedThreadPool"></a>4.3 CachedThreadPool</h2><p>CachedThreadPool线程数量不定,只有非核心线程,并且其最大线程数为Integer.MAX_VALUE(相当于无限大)<br>当线程池中的线程都处于活动状态时,线程池会创建新的线程来处理新任务,否则就会利用空闲的线程来处理新任务.</p>
<p>空闲线程都有超时时机,这个超时时长为60秒,限制超60秒就会被回收.</p>
<p>和FixedThreadPoolExecutor不同的是,CachedThreadPool的任务队列其实相当一个空集合,这将导致任何任务都会被立即执行,因为此时SynchronousQueue是无法插入任务的.<br>CachedThreadPool线程池比较适合执行大量+耗时较少的任务.当整个线程池都处于闲置状态时,会因超时而被停止,此时没有线程的线程池几乎不占用任何系统资源.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>代码测试:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cachedThreadPoolTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//缓存线程池</span></div><div class="line">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">    <span class="comment">//创建5条线程</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        cachedThreadPool.execute(<span class="keyword">new</span> MyThread());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//关闭线程池</span></div><div class="line">    cachedThreadPool.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Log输出:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span>执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">1</span>执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">2</span>执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">3</span>执行</div><div class="line">System.out: pool-<span class="number">1</span>-thread-<span class="number">4</span>执行</div></pre></td></tr></table></figure></p>
<h2 id="4-4-ScheduledThreadPoolExecutor"><a href="#4-4-ScheduledThreadPoolExecutor" class="headerlink" title="4.4 ScheduledThreadPoolExecutor"></a>4.4 ScheduledThreadPoolExecutor</h2><p>ScheduledThreadPoolExecutor核心线程数固定,非核心线程数没有限制,并且非核心线程闲置时会被回收<br>主要用于执行定时任务 和 具有固定周期的重复任务.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Executors静态方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//继续追查ScheduledThreadPoolExecutor源码,会发现最终还是通过ThreadPoolExecutor的构造来创建</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">         Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>常用方法:</strong></p>
<ul>
<li><code>schedule(Runnable command,long delay, TimeUnit unit)</code>XXX时间之后,执行指定的任务</li>
<li><code>scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)</code><br>XXX时间后,执行指定任务,每隔XXX时间执行一次</li>
</ul>
<p><strong>代码测试:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduledThreadPoolTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//定时任务线程池</span></div><div class="line">    ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">//3秒后打印一次Log</span></div><div class="line">    scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"~~~~~~~~~3秒之后露个脸~~~~~~~~~"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="number">3000</span>,TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line">    <span class="comment">//0秒初始化延迟,每秒打印Log</span></div><div class="line">    scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"每隔一秒打印一次"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="number">0</span>,<span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Log输出:</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out: 每隔一秒打印一次</div><div class="line">System.out: 每隔一秒打印一次</div><div class="line">System.out: 每隔一秒打印一次</div><div class="line">System.out: ~~~~~~~~~<span class="number">3</span>秒之后露个脸~~~~~~~~~</div><div class="line">System.out: 每隔一秒打印一次</div><div class="line">System.out: 每隔一秒打印一次</div><div class="line">System.out: 每隔一秒打印一次</div></pre></td></tr></table></figure></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>可以发现,系统提供的4种线程池,最终都是通过配置ThreadPoolExecutor的不同参数,来巧妙的达到不同的线程管理效果.</p>
<p>以上只是关于线程池的一些基础认知,下一篇进行 <a href="http://www.jianshu.com/p/edab547f2710" target="_blank" rel="external">线程池运行原理分析</a>.</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[线程池运行原理分析]]></title>
      <url>/2017/04/23/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>上一篇 <a href="http://www.jianshu.com/p/a38113f925d9" target="_blank" rel="external">线程池基础知识整理</a> 做了简单的总结后,本篇来试着追一追源码,看看线程池的内部运行逻辑.</p>
<p>要想分析透彻整个线程池运行的逻辑,是个庞杂的工程,牵扯到线程池生命周期管理,队列管理,拒绝策略,调配逻辑等等.这里只是从一个Runnable任务发布到线程池中以后,线程池内部的运行逻辑角度去尝试分析.</p>
<p>先贴出整理的线程池操作流程图 , 然后开始追源码:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-7a6ae7778a4c6009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线程池运行流程图.png"></p>
<h1 id="线程数量控制策略"><a href="#线程数量控制策略" class="headerlink" title="线程数量控制策略"></a>线程数量控制策略</h1><p>ThreadPoolExecutor是线程池的实现类,无论是自定义线程池,还是使用系统提供的线程池,都会使用到这个类.通过类的execute(Runnable command)方法来执行Runnable任务.<br>那么一旦将一个Runnable任务execute()以后,到底发生了什么? 直接看代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将该Runnable任务加入线程池并在未来某个时刻执行</div><div class="line"> * 该任务可能执行在一个新的线程 或 一个已存在的线程池中的线程</div><div class="line"> * 如果该任务提交失败,可能是因为线程池已关闭,或者已达到线程池队列和线程数已满.</div><div class="line"> * 该Runnable将交给RejectedExecutionHandler处理,抛出RejectedExecutionException</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="comment">//如果没传入Runnable任务,则抛出空指针异常</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> c = ctl.get();</div><div class="line">    <span class="comment">//当前线程数 小于 核心线程数</span></div><div class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">        <span class="comment">//直接开启新的线程,并将Runnable传入作为第一个要执行的任务,成功返回true,否则返回false</span></div><div class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        c = ctl.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//c &lt; SHUTDOWN代表线程池处于RUNNING状态 + 将Runnable添加到任务队列,如果添加成功返回true失败返回false</span></div><div class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">        <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">        <span class="comment">//成功加入队列后,再次检查是否需要添加新线程(因为已存在的线程可能在上次检查后销毁了,或者线程池在进入本方法后关闭了)</span></div><div class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))&#123;</div><div class="line">            <span class="comment">//如果线程池处于非RUNNING状态 并且 将该Runnable从任务队列中移除成功,则拒绝执行此任务</span></div><div class="line">            <span class="comment">//交给RejectedExecutionHandler调用rejectedExecution方法,拒绝执行此任务</span></div><div class="line">            reject(command);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">//如果线程池线程数量为0,则创建一条新线程,去执行</span></div><div class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;   </div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">        <span class="comment">//如果线程池处于非RUNNING状态 或 将Runnable添加到队列失败(队列已满导致),则执行默认的拒绝策略</span></div><div class="line">        reject(command);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>整理流程如下:</strong></p>
<ol>
<li>如果线程池中的线程数量少于corePoolSize(核心线程数量),那么会直接开启一个新的核心线程来执行任务,即使此时有空闲线程存在.</li>
<li>如果线程池中线程数量大于等于corePoolSize(核心线程数量),那么任务会被插入到任务队列中排队,等待被执行.此时并不添加新的线程.</li>
<li>如果在步骤2中由于任务队列已满导致无法将新任务进行排队,这个时候有两种情况:<ul>
<li>线程数量 [未] 达到maximumPoolSize(线程池最大线程数) , 立刻启动一个非核心线程来执行任务.</li>
<li>线程数量 [已] 达到maximumPoolSize(线程池最大线程数) , 拒绝执行此任务.ThreadPoolExecutor会通过RejectedExecutionHandler,抛出RejectExecutionException异常.</li>
</ul>
</li>
</ol>
<p>以上就是一旦将一个Runnable任务execute()以后,执行的一系列逻辑,理解起来并不难,下面再对其中调用的一些方法做一些追查,就更方便理解其中的运行逻辑.</p>
<h1 id="线程数量及线程池状态管理"><a href="#线程数量及线程池状态管理" class="headerlink" title="线程数量及线程池状态管理"></a>线程数量及线程池状态管理</h1><p>我们发现在execute()方法中频繁的执行这句<code>c = ctl.get();</code>代码,那么这ctl是什么,get()方法获取到的是什么,获取到的c又用来做什么?</p>
<p>上源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建AtomicInteger对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>; <span class="comment">//32-3 = 29</span></div><div class="line"><span class="comment">//最大线程容量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>; <span class="comment">//将1的二进制向右位移29位,再减1</span></div><div class="line"></div><div class="line"><span class="comment">//运行状态保存在int值的高3位 (所有数值左移29位)</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</div><div class="line"></div><div class="line"><span class="comment">//运行状态</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</div><div class="line"><span class="comment">//线程数量</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</div><div class="line"><span class="comment">//是否正在运行</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> c &lt; SHUTDOWN;&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码中的信息整理如下:</p>
<ul>
<li>clt是一个AtomicInteger对象,(提供原子操作进行Integer的使用,适用于高并发场景.该AtomicInteger的value可以自动刷新,确保在高并发环境下的唯一性.),而ctl.get()获取的就是该value值.</li>
<li>线程池用一个AtomicInteger来保存 [线程数量] 和 [线程池状态] ,一个int数值一共有32位,高3位用于保存运行状态,低29位用于保存线程数量</li>
<li>系统默认的线程容量就是(2^29)-1 , 大约5亿条线程-_-!</li>
</ul>
<p><strong>所以由此得知 :</strong><br>频繁的调用<code>c = ctl.get();</code>是为了获取该AtomicInteger的最新值,进而通过位运算获取线程池的最新运行状态,线程数量.</p>
<p>[线程池状态]: </p>
<ul>
<li><strong>RUNNING:</strong> 接收新任务,并执行队列中的任务</li>
<li><strong>SHUTDOWN:</strong> 不接收新任务,但是执行队列中的任务</li>
<li><strong>STOP:</strong> 不接收新任务,不执行队列中的任务,中断正在执行中的任务</li>
<li><strong>TIDYING:</strong> 所有的任务都已结束,线程数量为0,处于该状态的线程池即将调用terminated()方法</li>
<li><strong>TERMINATED:</strong> terminated()方法执行完成</li>
</ul>
<h1 id="新线程的创建"><a href="#新线程的创建" class="headerlink" title="新线程的创建"></a>新线程的创建</h1><p>在execute()方法中获知通过addWorker()方法来添加新线程,那么到底是如何添加和管理的?<br>开始追源码,一看究竟.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 往线程池中添加Worker对象</div><div class="line"> * <span class="doctag">@param</span>  firstTask 线程中第一个要执行的任务 </div><div class="line"> * <span class="doctag">@param</span>  core      是否为核心线程</div><div class="line"> * <span class="doctag">@return</span>           添加是否成功</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</div><div class="line">    <span class="comment">//这里有两层[死循环],外循环:不停的判断线程池的状态</span></div><div class="line">    retry: <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = ctl.get();</div><div class="line">            <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">            <span class="comment">//一系列判断条件:线程池关闭,Runnable为空,队列为空,则直接return false,代表Runnable添加失败</span></div><div class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp; !workQueue.isEmpty()))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//内循环:不停的检查线程容量        </span></div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">                <span class="comment">//超过线程数限制,则return false</span></div><div class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize))&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//★ 添加线程成功,则直接跳出两层循环,继续往下执行.</span></div><div class="line">                <span class="comment">//注意:这里只是把线程数成功添加到了AtomicInteger记录的线程池数量中,真正的Runnable添加,在下面的代码中进行</span></div><div class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))&#123;</div><div class="line">                    <span class="keyword">break</span> retry;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//再次判断线程池最新状态,如果状态改变了(内循环和外循环记录的状态不符),则重新开始外层死循环</span></div><div class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></div><div class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)&#123;</div><div class="line">                    <span class="keyword">continue</span> retry;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//结束循环之后,开始真正的创建线程.</span></div><div class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</div><div class="line">    Worker w = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//创建一个Worker对象,并将Runnable当做参数传入</span></div><div class="line">        w = <span class="keyword">new</span> Worker(firstTask);</div><div class="line">        <span class="comment">//从worker对象中取出线程</span></div><div class="line">        <span class="keyword">final</span> Thread t = w.thread;</div><div class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">            <span class="comment">//拿到锁</span></div><div class="line">            mainLock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//再次检查线程池最新状态</span></div><div class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                    <span class="comment">//检查准备执行Runnable的Thread的状态,如果该Thread已处于启动状态,则抛出状态异常(因为目前还没启动呢)</span></div><div class="line">                    <span class="keyword">if</span> (t.isAlive())&#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                    &#125; </div><div class="line">                    <span class="comment">//将新创建的worker,添加到worker集合</span></div><div class="line">                    workers.add(w);</div><div class="line">                    ...</div><div class="line">                    workerAdded = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//释放锁</span></div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (workerAdded) &#123;</div><div class="line">                <span class="comment">//★Thread开始启动</span></div><div class="line">                t.start();</div><div class="line">                workerStarted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">//添加worker失败</span></div><div class="line">        <span class="keyword">if</span> (! workerStarted)&#123;</div><div class="line">            addWorkerFailed(w);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> workerStarted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结:</p>
<ol>
<li>先判断线程池状态和线程池中线程的容量,如果满足线程添加的条件,则先把AtomicInteger中记录的线程数量+1.然后再进行线程添加的工作.</li>
<li>创建worker对象,并将Runnable作为参数传递进去,并从worker中取出Thread对象,进行一系列条件判断后.开启Thread的start()方法,线程开始运行.所以worker对象中必然包含了一个Thread和一个要被执行的Runnable.</li>
</ol>
<p>那么接下来继续追源码,印证下第二点的推断,看看Worker到底干了什么.</p>
<blockquote>
<p>Worker类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ThreadPoolExecutor的内部finial类</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//当前worker要执行任务所用的线程(如果创建失败,则可能是null)</span></div><div class="line">    <span class="keyword">final</span> Thread thread;</div><div class="line">    <span class="comment">//第一个要执行的任务(可能是null)</span></div><div class="line">    Runnable firstTask;</div><div class="line">    <span class="comment">//当前线程执行完的任务总数</span></div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</div><div class="line"></div><div class="line">    <span class="comment">//通过构造传入Runnable任务</span></div><div class="line">    Worker(Runnable firstTask) &#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">this</span>.firstTask = firstTask;</div><div class="line">        <span class="comment">//通过ThreadFactory()创建新线程</span></div><div class="line">        <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//调用外部类runWorker()方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        runWorker(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>worker类中的内部实现也印证了我们的推断:</p>
<ul>
<li>每个worker,都是一条线程,同时里面包含了一个firstTask,即初始化时要被首先执行的任务.</li>
<li>最终执行任务的,是runWorker()方法</li>
</ul>
<h1 id="线程的复用"><a href="#线程的复用" class="headerlink" title="线程的复用"></a>线程的复用</h1><p>继续追runWorker()方法的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ThreadPoolExecutor的final类,该方法由内部类Worker的run()方法调用</span></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">    Thread wt = Thread.currentThread();</div><div class="line">    <span class="comment">//取出Worker对象中的Runnable任务</span></div><div class="line">    Runnable task = w.firstTask;</div><div class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//★注意这个while循环,在这里实现了 [线程复用]</span></div><div class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//上锁</span></div><div class="line">            w.lock();</div><div class="line">            <span class="comment">//检查Thread状态的代码</span></div><div class="line">            ...</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ...</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">//执行Worker中的Runnable任务</span></div><div class="line">                    task.run();</div><div class="line">                &#125; <span class="keyword">catch</span> (...) &#123;</div><div class="line">                   ...<span class="keyword">catch</span>各种异常</div><div class="line">                &#125; </div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//置空任务(这样下次循环开始时,task依然为null,需要再通过getTask()取) + 记录该Worker完成任务数量 + 解锁</span></div><div class="line">                task = <span class="keyword">null</span>;</div><div class="line">                w.completedTasks++;</div><div class="line">                w.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//该线程已经从队列中取不到任务了,改变标记</span></div><div class="line">         completedAbruptly = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">//线程移除</span></div><div class="line">        processWorkerExit(w, completedAbruptly);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的源码,发现通过一个while循环,不断的getTask()取任务出来执行,以这种方式实现了线程的复用.</p>
<p><strong>线程复用逻辑整理如下:</strong></p>
<ol>
<li>如果task不为空,则开始执行task</li>
<li>如果task为空,则通过getTask()再去取任务,并赋值给task,如果取到的Runnable不为空,则执行该任务</li>
<li>执行完毕后,通过while循环继续getTask()取任务</li>
<li>如果getTask()取到的任务依然是空,那么整个runWorker()方法执行完毕</li>
</ol>
<p>上面只是从getTask()方法名和其返回值来猜测此方法的作用,下面就继续追源码,来证实和研究getTask()到底是怎么取任务的,从哪取,怎么取.</p>
<blockquote>
<p>getTask()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        ...</div><div class="line">        <span class="comment">// 如果线程池已关闭 或 任务队列为空,则AtomicInteger中记录的线程数量-1,并return null,结束本方法</span></div><div class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class="line">            decrementWorkerCount();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//获取当前线程池中的总线程数</span></div><div class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">        <span class="comment">//allowCoreThreadTimeOut参数是使用者自行设置的(默认false),用来设置:是否允许核心线程有超时策略</span></div><div class="line">        <span class="comment">//条件1:核心线程超时 条件2:当前线程数 &gt; 核心线程数,满足任何一个条件则timed标记为true </span></div><div class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line"></div><div class="line">        <span class="comment">//超过最大线程数 或 超时 或 任务队列为空...  线程数量-1 + return null</span></div><div class="line">        ...</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//根据timed标记,使用不同的方式(限时等待 or 阻塞)从BlockingQueue&lt;Runnable&gt; workQueue 队列中取任务</span></div><div class="line">            Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : workQueue.take();</div><div class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//如果取到了,就将Runnable返回</span></div><div class="line">                <span class="keyword">return</span> r;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//如果没取到,则重新for循环</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将以上源码中的信息整理如下:</p>
<ul>
<li>线程池使用BlockingQueue来管理整个线程池中的Runnable任务,变量workQueue存放的都是待执行的任务</li>
<li>BlockingQueue是个阻塞队列，BlockingQueue.take()方法如果得到的是空，则进入等待状态,直到BlockingQueue有新的对象被加入时,才可以正常将Runnable取出并返回,线程开始正常运转,正常执行Runnable任务。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 先进先出的阻塞队列</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检索并移除队列的顶部元素,如果该元素不可用则等待,直至元素可用</div><div class="line">     * Retrieves and removes the head of this queue, waiting if necessary</div><div class="line">     * until an element becomes available.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the head of this queue</div><div class="line">     * <span class="doctag">@throws</span> InterruptedException if interrupted while waiting</div><div class="line">     */</div><div class="line">    <span class="function">E <span class="title">take</span><span class="params">()</span></span></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让我们整理一下上面几段源码的逻辑顺序:</p>
<ol>
<li>execute()方法执行之后,进行一系列的逻辑判断来控制线程池中的线程数量,并通过addWorker()方法创建新线程</li>
<li>一旦Worker里的Thread开始start()之后,执行的其实是Worker里的run()方法,run()方法调用runWorker(Worker w)方法.</li>
<li>在runWorker()方法里面通过getTask()方法不停的取workQueue队列中的任务来执行,如果取到了就执行,如果没取到就等待.</li>
</ol>
<p><strong>结论:</strong></p>
<ul>
<li>一旦一个线程开启之后,会一直执行下去,直至任务队列中的任务执行完毕,达成了线程的复用</li>
<li>以Runnable队列为目标的worker虽然是串行操作,但是由于可以通过addWorker()添加多个worker,并且多个worker取的是同一个BlockingQueue中的Runnable,所以就实现了并行处理.</li>
</ul>
<h1 id="线程的移除"><a href="#线程的移除" class="headerlink" title="线程的移除"></a>线程的移除</h1><p>在runWorker()方法中有如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (getTask()...) &#123;</div><div class="line">            ...</div><div class="line">            处理任务</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//该线程已经从队列中取不到任务了,改变标记,该标记表示:该线程是否因用户因素导致的异常而终止</span></div><div class="line">         completedAbruptly = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">//线程移除</span></div><div class="line">        processWorkerExit(w, completedAbruptly);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>processWorkerExit这里用来将worker从worker集合中移除,步骤如下:</p>
<ol>
<li>先移除传入的Worker(线程)</li>
<li>判断线程池里的最少线程数,如果最少线程数为0条,但是队列里依然有任务未执行完毕.那么必须确保线程池中至少有1条线程.(将最小线程数置为1)</li>
<li>如果当前线程数 &gt; 最小线程数,本方法结束,不再往下执行</li>
<li>否则添加一条新线程,来替代当前线程,继续去执行队列中的任务.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> w the worker 线程</div><div class="line"> * <span class="doctag">@param</span> completedAbruptly 该线程是否因用户因素导致的异常而终止</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//记录该线程完成任务的总数</span></div><div class="line">        completedTaskCount += w.completedTasks;</div><div class="line">        <span class="comment">//从worker集合中移除本worker(线程)</span></div><div class="line">        workers.remove(w);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="comment">//如果在runWoker()中正常执行任务完毕,这里completedAbruptly传入的就是false</span></div><div class="line">    <span class="keyword">if</span> (!completedAbruptly) &#123;</div><div class="line">        <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</div><div class="line">        <span class="comment">//如果线程池里最少线程数为0,但是此时任务队列里依然还有任务</span></div><div class="line">        <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())&#123;</div><div class="line">            <span class="comment">//那么必须保留一条线程,所以将最小值设置为1</span></div><div class="line">            min = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果当前线程数&gt;= 最小线程数,则直接return</span></div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &gt;= min)&#123;</div><div class="line">            <span class="keyword">return</span>; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//否则添加一条新线程,来替代当前线程,继续去执行队列中的任务.</span></div><div class="line">    addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次源码分析就先到这里,一路从execute()开始,走到线程移除.其实线程池里面涉及到的问题很多,以后有时间再慢慢研究.</p>
<p>参考链接:<br><a href="http://silencedut.com/2016/06/25/%E4%BB%8E%E4%BD%BF%E7%94%A8%E5%88%B0%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/" target="_blank" rel="external">从使用到原理学习Java线程池</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android开发规范]]></title>
      <url>/2017/04/22/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="分包规范"><a href="#分包规范" class="headerlink" title="分包规范"></a>分包规范</h1><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名为xxx（公司名），三级包名根据应用进行命名，四级包名为模块名或层级名。 例如：com.longke.qq.activity</p>
<pre><code>com.xxx.activity    Activity类
com.xxx.service        Service
com.xxx.receiver    BroadCastReceiver
com.xxx.provider    ContentProvider
com.xxx.base        基类
com.xxx.adapter        ViewPager/RecyclerView等适配器
com.xxx.util        各种StringUtil,NetUtil,BitmapUtil等工具类    
com.xxx.view        自定义view/第三方开源控件
com.xxx.bean        各种实体类,下面可以再细分VO,PO,DTO
com.xxx.db            数据库操作类
</code></pre><p><strong>注意:</strong></p>
<ul>
<li>部分特殊的第三方SDK,比如微信支付,Zxing,讯飞语言等对如果对包位置有特殊要求的,按第三方要求来</li>
<li>MyApplication等全局相关的配置类,放在包名目录下</li>
</ul>
<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>核心原则</p>
<ul>
<li>见名知意</li>
<li>禁用拼音</li>
<li>标准统一</li>
</ul>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote>
<p>Activity / Fragment / Adapter / Bean…</p>
</blockquote>
<p>类名由一个或多个单词组成，采用 <strong>大驼峰命名法</strong></p>
<p>同一界面,不同类型的类,前缀必须一样,比如:HomePageActivity,HomePageFragment,HomePageListAdapter…</p>
<blockquote>
<p>Listener</p>
</blockquote>
<p>Listener接口监听事件的命名规范：以On开头Listener作为后缀。<br>具体：On+事件描述+Listener</p>
<p>例如：点击事件：OnClickListener</p>
<p>对应的调用方法：setOnClickListener()</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量命名采用 : 全大写 + 下划线方式例如：</p>
<pre><code>public static final int LOGIN_FLAG = 1 ;
</code></pre><p>intent标记的key以INTENT 开头 , 各个单词以_隔开,例如：</p>
<pre><code>public static final String INTENT_CAR_ID = &quot;intentCarId&quot;;
</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量以<strong>小驼峰式命名法</strong>,不同类型的变量又有不同的命名方式.</p>
<h3 id="私有成员变量"><a href="#私有成员变量" class="headerlink" title="私有成员变量"></a>私有成员变量</h3><p>必须以”ｍ”开头 + 变量名</p>
<pre><code>例如：
private int mThemeId = 0;
private boolean mIsOpen;
private List&lt;Strng&gt; mUrlList;
</code></pre><h3 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h3><p>必须以”s”开头 + 变量名</p>
<pre><code>private static boolean sIsOpen = false;
</code></pre><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>小驼峰命名法</p>
<pre><code>public String getUserName(){
    String userName = getUserNameFromDB();
    ...
}
</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法命名规则采用<strong>小驼峰命名法</strong>例如:</p>
<pre><code>onCreate() / onResume() / onRun()
getXX()返回某个值的方法
initXX() 初始化相关方法，比如初始化布局:initView()
checkXX()和isXX()方法为boolean值的时候使用is或者check为前缀
saveXX() 保存数据
clearXX()和removeXX() 清除数据
updateXX() 更新数据
processXX() 对数据进行处理
dispalyXX() 显示某某信息
</code></pre><blockquote>
<p>对于方法的其他一些规范</p>
</blockquote>
<ul>
<li>方法的参数尽可能不超过4个，多余4个考虑采用builder模式或者JavaBean形式</li>
<li>注意单一职责原则</li>
<li>方法尽量避免返回null,可以考虑抛异常或空数据,比如Collections.emptyList()</li>
</ul>
<h1 id="类声明规范"><a href="#类声明规范" class="headerlink" title="类声明规范"></a>类声明规范</h1><h2 id="区块划分"><a href="#区块划分" class="headerlink" title="区块划分"></a>区块划分</h2><p>建议使用注释将源文件分为明显的区块，区块划分如下</p>
<pre><code>常量声明区
UI控件成员变量声明区
普通成员变量声明区
内部接口声明区
初始化相关方法区
事件响应方法区
普通逻辑方法区
重载的逻辑方法区
生命周期回调方法区
内部类声明区
</code></pre><h2 id="类成员排列通用规则"><a href="#类成员排列通用规则" class="headerlink" title="类成员排列通用规则"></a>类成员排列通用规则</h2><pre><code>按照发生的先后顺序排列
常量按照使用先后排列
UI控件成员变量按照layout文件中的先后顺序排列
普通成员变量按照使用的先后顺序排列
方法基本上都按照调用的先后顺序在各自区块中排列
相关功能作为小区块放在一起（或者作为一个封装体引入）
重载方法永不分离,当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。
</code></pre><h1 id="资源文件命名规范"><a href="#资源文件命名规范" class="headerlink" title="资源文件命名规范"></a>资源文件命名规范</h1><ul>
<li>Activity对应的布局文件命名:<code>XxxActivity--&gt; activity_xxx.xml</code>,比如<code>MainActivity.java--&gt; activity_main.xml</code></li>
<li>XML中控件命名:控件名<em>界面名</em>作用,例如:tv_homepage_name ,et_login_phone </li>
<li>图片命名,资源文件,控件id命名：activity名称+功能名称（背景bg，按钮bt,图片控件iv等）+自己名称</li>
<li>RecyclerView / ListView中的item布局文件命名规范：以item_list作为前缀，以页面名称作为中缀，以列表描述作为后缀。具体：”item<em>list</em>“+页面名称+列表描述,例如：item_list_login_users.xml</li>
<li>Dialog布局文件命名规范：以dialog作为前缀，如果是通用的dialog则以common作为中缀以功能描述作为后缀。如果是对应页面定制的dialog,以页面描述作为中缀，dialog描述作为后缀。<br>具体：</li>
</ul>
<p>通用的dialog：dialog+common+功能描述，例如dialog_common_hint.xml</p>
<p>指定页面的dialog：dialog+页面名称+功能描述，例如dialog_login_pwd_error.xml</p>
<h2 id="values下文件命名"><a href="#values下文件命名" class="headerlink" title="values下文件命名"></a>values下文件命名</h2><h3 id="strings-xml"><a href="#strings-xml" class="headerlink" title="strings.xml"></a>strings.xml</h3><p>直接以对应的内容的英文单词组合命名.例如：</p>
<pre><code>&lt;string name=&quot;buy_ticket&quot;&gt;购票&lt;/string&gt;
&lt;string name=&quot;region_list&quot;&gt;景区列表&lt;/string&gt;
</code></pre><h3 id="colors-xml"><a href="#colors-xml" class="headerlink" title="colors.xml"></a>colors.xml</h3><p>具体：页面+”_”+描述+颜色名称,例如：<br>登录页面登录按钮字体颜色</p>
<pre><code>&lt;!--登录页面登录按钮字体颜色  --&gt;  
&lt;color name=&quot;login_activity_login_btn_text&quot;&gt;#000000&lt;/color&gt;
</code></pre><p>当然还有一些APP主题色,规范为:common_描述 ,例如: </p>
<pre><code>&lt;!--通用的item字体颜色  --&gt;  
&lt;color name=&quot;common_item_text&quot;&gt;#33AACC&lt;/color&gt;
</code></pre><h3 id="dimens-xml文件命名"><a href="#dimens-xml文件命名" class="headerlink" title="dimens.xml文件命名"></a>dimens.xml文件命名</h3><pre><code>&lt;resources&gt;
    &lt;!-- Default screen margins, per the Android Design guidelines. --&gt;
    &lt;dimen name=&quot;activity_horizontal_margin&quot;&gt;16dp&lt;/dimen&gt;
    &lt;dimen name=&quot;activity_vertical_margin&quot;&gt;16dp&lt;/dimen&gt;
&lt;/resources&gt;
</code></pre><h2 id="drawable目录下资源文件命名规范："><a href="#drawable目录下资源文件命名规范：" class="headerlink" title="drawable目录下资源文件命名规范："></a>drawable目录下资源文件命名规范：</h2><h3 id="selector文件"><a href="#selector文件" class="headerlink" title="selector文件"></a>selector文件</h3><p>以selector作为前缀，以某个页面的作为中缀如果是多个页面就以模块名称作为中缀或者是项目通用的就以common作为中缀，以功能描述作为后缀。 </p>
<pre><code>具体：
selector+页面名称+功能描述
selector+模块名称+功能描述
selector+common+功能描述

例如：
登陆页面的确认按钮：selector_login_confirm_btn.xml（login为页面名称）
所有支付模块购买的按钮：selector_pay_buy_btn.xml(buy为模块名称)
所有通用按钮的背景：selector_common_btn_bg.xml
</code></pre><h3 id="shape图形"><a href="#shape图形" class="headerlink" title="shape图形"></a>shape图形</h3><p>以shape 作为前缀，如果是通用的以common作为中缀，如果是单独页面的以页面名称作为中缀，或者以模块名称作为中缀，以功能描述作为后缀。</p>
<p>具体形式和selector一样。</p>
<h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p>图片资源命名规范 全部小写，采用下划线命名法，加前缀区分 命名模式：可加后缀 _small 表示小图, _big 表示大图，逻辑名称可由多个单词加下划线组成，采用以下规则：</p>
<pre><code>用途_模块名_逻辑名称
用途_模块名_颜色
用途_逻辑名称
用途_颜色  

icon图片资源以ic开头；
具体： 前缀+&quot;&quot;+页面名称+&quot;&quot;+描述 （如果页面和描述一致的则不用重复）
欢迎页面背景图 bg_welcome.png

登录页面 登录按钮背景  bg_login_btn.png

btn_main_home.png 按键

divider_maket_white.png 分割线

ic_edit.png 图标

bg_main.png 背景

btn_red.png 红色按键

btn_red_big.png 红色大按键

ic_head_small.png 小头像

bg_input.png 输入框背景

divider_white.png 白色分割线
</code></pre><h2 id="anim目录"><a href="#anim目录" class="headerlink" title="anim目录"></a>anim目录</h2><p>全部小写，采用下划线命名法，加前缀区分。具体动画采用以下规则：</p>
<p>模块名_逻辑名称<br>逻辑名称</p>
<pre><code>refresh_progress.xml
market_cart_add.xml
market_cart_remove.xml
</code></pre><p>普通的tween动画采用如下命名方式:</p>
<pre><code>// 前面为动画的类型，后面为方向
动画命名例子    描述
fade_in            淡入
fade_out        淡出
push_down_in    从下方推入
push_down_out    从下方推出
push_left        推向左方
slide_in_from_top    从头部滑动进入
zoom_enter        变形进入
slide_in        滑动进入
shrink_to_middle    中间缩小
</code></pre><h1 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h1><ul>
<li>每完成一个小功能，无论是单个界面的UI，还是某个模块的逻辑，都先本地commit，最后统一push</li>
<li>每天下班之前必须push当天代码</li>
<li>必须确保push到远程仓库的代码是可以正常运行的，不能存在编译错误</li>
<li>使用.gitignore过滤掉自动生成的文件</li>
<li>养成push之前先pull的习惯</li>
</ul>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>编程框架标配为 RxJava2.0 + Retrofit2.0 + MVP</p>
<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>以下自选：</p>
<ul>
<li>MVP</li>
<li>MVVM</li>
</ul>
<blockquote>
<p>禁用</p>
</blockquote>
<ul>
<li>MVC</li>
<li>万能Activity</li>
</ul>
<h2 id="备选开源库"><a href="#备选开源库" class="headerlink" title="备选开源库"></a>备选开源库</h2><p>选择开源库时考虑的因素：</p>
<ul>
<li>低耦合</li>
<li>单一职责</li>
<li>star 和 issue数</li>
<li>维护频率</li>
</ul>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul>
<li>Glide</li>
<li>Picasso</li>
<li>Fresco</li>
</ul>
<blockquote>
<p>禁用</p>
</blockquote>
<ul>
<li>UIL</li>
<li>Volley</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>Retrofit + Okhttp</p>
<blockquote>
<p>禁用</p>
</blockquote>
<ul>
<li>XUtils</li>
<li>Volley</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>GreenDao</li>
<li>Realm</li>
</ul>
<blockquote>
<p>禁用</p>
</blockquote>
<ul>
<li>XUtils</li>
<li>原生Sqlite</li>
</ul>
<h3 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h3><ul>
<li>EventBus</li>
<li>RxBus</li>
</ul>
<p>如非必须，不用BroadcastReceiver，使用BroadcastReceiver时应用内通信首选LocalBroadcastReceiver.</p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul>
<li>ButterKnife</li>
<li>Dagger2</li>
</ul>
<blockquote>
<p>禁用</p>
</blockquote>
<ul>
<li>XUtils</li>
<li>手动findViewById</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如发现有其他更加优秀的开源库,欢迎讨论,补充</p>
<h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><ul>
<li>定义类或者接口 首行留空格，末尾不留；其次每个逻辑分区都要留单行空格（除普通常量定义外）</li>
<li>定义类或者接口变量时，请使用基类或者顶层接口定义变量</li>
<li>自行控制类、接口、及其成员的访问权限，尽量缩小访问权限</li>
<li>类如果不是为扩展而设计的请加final修饰符</li>
<li>遇到switch语句时，酌情考虑将每个case语句拆分成单个函数调用</li>
<li>接口定义不加“I”前缀，实现添加”impl”后缀，如果有必要请提供默认的实现和其它实现 （默认实现:Default+接口名+impl，其它实现 :具体扩展功能 + 接口 + impl）</li>
<li>具有controller功能的类或者接口定义 都以 功能+“manager” 形式定义</li>
<li>所有表示层设计的实体定义形式为 : 功能+“model”</li>
<li>所有列表展示用RecyclerView，禁用ListView</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[观影随笔-《生化危机-终章》和《刺客信条》]]></title>
      <url>/2017/02/26/%E8%A7%82%E5%BD%B1%E9%9A%8F%E7%AC%94-%E3%80%8A%E7%94%9F%E5%8C%96%E5%8D%B1%E6%9C%BA-%E7%BB%88%E7%AB%A0%E3%80%8B%E5%92%8C%E3%80%8A%E5%88%BA%E5%AE%A2%E4%BF%A1%E6%9D%A1%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>今天去看了《生化危机-终章》和《刺客信条》,这是两部期待已久的作品，随便扯点淡记录下。</p>
<h1 id="《生化危机-终章》"><a href="#《生化危机-终章》" class="headerlink" title="《生化危机-终章》"></a>《生化危机-终章》</h1><p><img src="http://upload-images.jianshu.io/upload_images/1958298-68faa21da1e88ee5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生化危机-终章"><br>《生化危机》是从小学的时候就开始玩的游戏,当时还是用一部手柄+电视机在玩，曾经被惊险、恐怖、刺激的场景深深吸引，也曾苦恼于重来了好几回都打不过的BOSS。后来忘记了在什么时候,也许是高中,也许是大学,反正当发现有《生化危机》电影时，真是非常的激动，前三部一气呵成的看完了，过瘾！后来陆续出了第四部，第五部，直到今天看完了终章，最后一部。</p>
<p>去看终章，就像一个习惯一样，好像找不出不去看的理由。</p>
<p>米拉乔沃维奇老了，阳伞公司终结了，爱丽丝最终拯救了世界，当时那么霸气性感的女汉子，现在也已经是个中年妇人了。所以这样挺好，适可而止，为经典画上一个句号，也可以让经典永存，免除让后人狗尾续貂的可能性，以及对经典的破坏机会。</p>
<p>最后一部把前几部都串联起来了，从第一部一帮人闯入阳伞基地的全军覆没，到后来爱丽丝的克隆计划，到揭开艾萨克斯的整个阴谋等等，是回顾也是真正意义上的终章，最终给这一切画上了一个圆满的句号，完美！</p>
<h1 id="刺客信条"><a href="#刺客信条" class="headerlink" title="刺客信条"></a>刺客信条</h1><p><img src="http://upload-images.jianshu.io/upload_images/1958298-a7389830e00f3803.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刺客信条"><br>今天的《刺客信条》真是给了我很大的震撼，让我对自己一直比较欣赏的刺客精神又有了更深刻的认识和理解。</p>
<p>去看之前还在犹豫，因为在网上看到的关于这部影片的只言片语的评价都不是特别好。还在想，莫非又是一部毁了经典游戏的电影，根据游戏改编成电视剧、电影搞砸的比比皆是。但是考虑到自己对《刺客信条》游戏的喜爱，考虑到当初听到游戏要拍成电影时的兴奋和期待，考虑到没必要人云亦云，也有很多时候自己对影片的观点和大众不太一致等情况，还是去看了。</p>
<p>果然，不虚此行。没玩过游戏的、没有提前了解影片背景的、去凑热闹的、去约会的人可能看不懂，但是对于一个游戏玩家来说，觉得这部电影很有诚意的。里面的情节发展基本符合游戏本身的逻辑，刺客执行任务以及逃离战场的场景也都是极力还原游戏，刺客们最后共同的反抗更是印证了他们对自己信仰的坚持和不遗余力的守护，总而言之感受到了制片方对于原著的尊重。</p>
<p>记得之前看网上的评论，说什么剧情沉闷冗长没有起伏，老是在房子上跳来跳去玩跑酷很烦。。。只能呵呵。</p>
<p>下面总结下这次看影片印象比较深刻的几点：</p>
<p>1.Nothing is ture, Everything is permitted(万物皆虚，万事皆允)<br>当世人的心灵盲从所谓的真理时，万物皆虚；当世人的行为被道德或法律约束时，万事皆允。</p>
<p>2.We work in the dark to serve the light,we are assassins.<br>我们为了光明而耕耘于黑暗，我们是刺客。</p>
<p>3.Your blood is not your now.<br>你的血不只是你自己的。</p>
<p>4.Assassins 一词源于阿拉伯语，原意是沉迷于大麻的人，刺客们都是些社会底层的人，他们抽大麻，酗酒，偷盗，杀人，被人排挤，唾弃。。。而刺客们利用这些卑微的社会地位隐藏他们的真实信仰，这让他们逐渐变得比他们的敌人更加强大。</p>
<p>以上几点，每个想去理解的人，都会有自己的理解和感悟。《刺客信条》光游戏都出了5部了，这部电影仅仅只是个开端，继续期待吧。</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Movie </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记-技术人成长百科指南]]></title>
      <url>/2017/02/06/%E7%AC%94%E8%AE%B0-%E6%8A%80%E6%9C%AF%E4%BA%BA%E6%88%90%E9%95%BF%E7%99%BE%E7%A7%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>做技术到了一定阶段，总会遇到瓶颈，也一直在寻找突破点，无论是广度和深度上，都在努力尝试。偶然看到这篇推送的集合文章 <a href="http://mp.weixin.qq.com/s/VO2YXFRD5k-2KuFQUPq6hg" target="_blank" rel="external">技术人成长百科指南：给你一束光，路在你脚下</a>，收获颇多，非常感谢各位前辈的指导。</p>
<h1 id="天天写「业务代码」，如何成为「技术大牛」"><a href="#天天写「业务代码」，如何成为「技术大牛」" class="headerlink" title="天天写「业务代码」，如何成为「技术大牛」?"></a>天天写「业务代码」，如何成为「技术大牛」?</h1><p>技术提升就像游戏中升级打怪一样，开始打小怪，经验值很高，越到后面经验值越少，打小怪已经不能提升经验值了。这个时候就需要打一些更高级的怪，刷一些有挑战的副本了，没看到哪个游戏只要一直打小怪就能升到顶级的。</p>
<blockquote>
<p>错误观点:</p>
</blockquote>
<p> 1、上班做的都是重复工作，要想提升必须自己额外去学习<br> 2、学习需要大段的连续时间</p>
<blockquote>
<p>实际情况</p>
</blockquote>
<p>实际上正好相反：首先我们应该在工作中学习和提升，因为学以致用或者有实例参考，学习的效果是最好的；其次工作后学习不需要大段时间，而是要挤出时间，利用时间碎片来学习。</p>
<h2 id="Do-more"><a href="#Do-more" class="headerlink" title="Do more"></a>Do more</h2><p>做的更多，做的比你主管安排给你的任务更多。</p>
<blockquote>
<ol>
<li>熟悉更多业务</li>
</ol>
</blockquote>
<ul>
<li>需求分析时更加精准,提前识别风险,影响,难度</li>
<li>问题处理时更加快速</li>
<li>方案设计时考虑更加周全</li>
</ul>
<blockquote>
<ol>
<li>熟悉端到端</li>
</ol>
</blockquote>
<p>“系统性”、“全局性”、“综合性”这些字眼看起来比较虚，但其实都是技术大牛的必备的素质，要达到这样的境界，必须去熟悉更多系统、业务、代码。</p>
<blockquote>
<p>自学</p>
</blockquote>
<p>如果是公司封装好的框架,平时的业务代码确实不需要太多的技术含量,可能就是if else,因此必须要深度自学,以备不时之需</p>
<h2 id="Do-Better"><a href="#Do-Better" class="headerlink" title="Do Better"></a>Do Better</h2><p>只要你去想，其实总能发现可以改进的地方的,识别出这些地方，并且给出解决方案，然后向主管提出，一次不行两次，多提几次，只要有一次落地了，这就是你的机会。</p>
<p>如果你觉得系统哪里都没有改进的地方，那就说明你的水平还不够，可以多学习相关技术，多看看业界其它公司怎么做，BAT都怎么做</p>
<h2 id="Do-exercise"><a href="#Do-exercise" class="headerlink" title="Do exercise"></a>Do exercise</h2><p>自己可以学习很多知识,但是在实际工作中运用到的却不多,不可能一个人干所有技术点所涉及到得工作,学到得技术如何运用?</p>
<blockquote>
<p>1、Learning</p>
</blockquote>
<p>注重系统性,建议先通过书籍系统性的学习之后,再去看博客,Google,视频</p>
<blockquote>
<p>2、Trying</p>
</blockquote>
<p>自己模拟环境,自己写Demo,自己测试.顺便也了解了端到端.</p>
<blockquote>
<p>3、Teaching</p>
</blockquote>
<p>自学和练习只能学到70%,分享出去,在整理和反馈中才能发现剩余的30%.</p>
<h2 id="先定一个小目标"><a href="#先定一个小目标" class="headerlink" title="先定一个小目标"></a>先定一个小目标</h2><p>将目标进行三次分解,划分成短期内可以达到的小目标.</p>
<blockquote>
<p>一段分解:等级</p>
</blockquote>
<p>1）0 ~ 1年：菜鸟，需要别人手把手来教<br>2）1 ~ 3年：初级，需要别人带你做<br>3）3 ~ 5年：高级，能独当一面，可以带初级技术人员了<br>4）5 ~ 8年：资深，能独挡多面<br>5）8 ~ 10年：大牛，统筹规划，高屋建瓴</p>
<blockquote>
<p>二段分解:技能</p>
</blockquote>
<p>为了达到一段目标，我需要具备什么样的技能.做一个思维导图,哪里不懂补哪里</p>
<blockquote>
<p>三段分解：执行</p>
</blockquote>
<p>可以根据实际情况,进行顺序的灵活调整</p>
<h1 id="年龄渐长，技术人的发展之路该怎么走？"><a href="#年龄渐长，技术人的发展之路该怎么走？" class="headerlink" title="年龄渐长，技术人的发展之路该怎么走？"></a>年龄渐长，技术人的发展之路该怎么走？</h1><blockquote>
<p><a href="http://coolshell.cn/articles/10688.html" target="_blank" rel="external">编程能力与编程年龄</a></p>
</blockquote>
<ul>
<li>根据StackOverflow的统计数据,从事编程的人员25-30岁的居多,但是真正的能力输出高峰,确是在40-50岁.也就是说,绝大多数人都止步在了程序员的入门/初级/中级阶段,就止步,转行了.</li>
<li>如果你没有编程到30岁，你还不能成为一个“合格”的程序员。所以，并不是编程编到30岁就玩完了，而是编程编到30岁才刚刚入门.</li>
<li>程序员技术能力上升是可以到50岁或60岁的。</li>
<li>老程序员在获取新技术上的能力并不比年轻的程序员差。</li>
</ul>
<blockquote>
<p>30岁之前要培养的能力</p>
</blockquote>
<ul>
<li>高效的学习能力</li>
<li>解决问题的能力</li>
</ul>
<p>一味的埋头加班苦干是没有意义的,一定要在技术基础,深度,广度上加强.宁肯工作延期也要做这些事情.</p>
<blockquote>
<p>工作中的Leadership</p>
</blockquote>
<ul>
<li>帮人解问题</li>
<li>被人所依赖</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Study </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记-《普京传》]]></title>
      <url>/2017/02/02/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E6%99%AE%E4%BA%AC%E4%BC%A0%E3%80%8B/</url>
      <content type="html"><![CDATA[<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><ul>
<li>从小调皮的孩子会更具可塑性，若加以良好的教育，更能成大气。</li>
<li>从小的胡同文化培养了普京尚武的性格，而由于自身个头比较弱小，他又企图通过体育运动来增强自己面对外界时的自信，从跑步，球类运动，到拳击，最终探索到了摔跤，最后是更高级的柔道。强健体魄的同时，柔道的理念后来也影响到他在政治舞台的博弈理念。</li>
<li>普京是个热爱看书的人，腹有诗书造就了他沉稳的性格，优秀的分析能力和文字表达能力。</li>
<li>普京从小就树立了自己的目标-加入克格勃，并一直为之努力，调整自己的学习精力投放和相关素养培养。很小的年纪就自己前往克格勃大楼求职，虽然注定失败，但是因此获知了很多关于克格勃招人的信息及要求，为后来的成功加入提供了非常重要的准备。</li>
<li>普京从最底层做起，做了20年副手，工作成绩优秀，但是从来不抢上级的威风和功劳，所以虽然不算平步青云但是稳步高升(这一点其实很少有人能做到)。这种高情商的处世哲学也让其终生受益，最终由于其坚持原则的舍身护师，也赢得了政治对手叶利钦的尊敬和看重，被逐步选为其接班人。所以，自己是一个弱势群体的时候，不要摆出一副天下我有的姿态而不服从任何人，默默地把事情做好，把人际关系处理到位，才是正确的姿态和道路。</li>
<li>无论何时，干出成绩是最重要的，叶利钦的成功在于其不流血的粉碎了高度集权的政治经济体制，失败在于没有成功让国家在政治经济两个方面完成转型，造成政党林立，通货膨胀，官商腐败，经济倒退。被叶利钦推上总理位置的普京，既可以说是机遇也可以说是挑战，因为普京必须通过重振经济的业绩来赢得反对党和民众的心。“文”靠经济业绩，“武”则靠解决俄罗斯历史性难题-车臣共和国，两方面的成功让普京顺利坐稳了总统宝座，最终由总理-&gt;代总统-&gt;总统 成功。</li>
<li>普京在发展经济，中央集权改革，平定车臣，团结独联体，国际外交等方面齐发力，政绩卓著。</li>
<li>外交以国家利益为核心原则而不受政治信仰或其他因素的影响，所以无论是英法德还是美国，无论是乌克兰白俄罗斯还是朝鲜韩国，都积极展开活动。这个理念很适用于人际关系的交往。</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>俄罗斯是全球国土面积最大的联合体国家，突然间的所谓政治民主化导致国家陷入混乱，经济休克，而一年2500%的通货膨胀让俄罗斯经济倒退了20年。（原来政治决策的破坏力可以如此之大）</p>
<p>这需要下一代领导者用更长的时间去挽回倒退和追赶应有的发展进度，也让美苏争霸变成美国成为唯一的超级大国，俄罗斯就此陨落成普通国家。普京后来不得不重新加强了中央集权的改革，确保了国家的稳定统一和政策落实，并且提到 “得先有集权，才能再谈限制集权” 。</p>
<p>有这个先例在这摆着，当再提到中国的民主化问题时，不应盲目崇拜美国式民主，一味的批评中国的独裁和专治，而是更加客观、全面、理性。试想：如果中国也像叶利钦那样瞬间全面放开,中国这么多民族，这么大的地域，不知道会蹦出多少个各自为政的党派来，中国会迅速进入动乱的时代。</p>
<p>由此也认识到：越狭隘，越偏激。还是要多读书,掌握更多的信息，知道的越多,越能更加全面的看待问题,对问题的看法或许就会有所不同。</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Book </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记-技术小黑屋LIVE-如何写好博客]]></title>
      <url>/2017/01/12/%E7%AC%94%E8%AE%B0-%E6%8A%80%E6%9C%AF%E5%B0%8F%E9%BB%91%E5%B1%8BLIVE-%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>一直想好好整理一下博客，但是却一直是一拖再拖，一直觉得自己太菜了需要再准备下，明日复明日，却一直没有准备好，最终想写的东西逐渐都淡忘了，也没有落实太多行动，看来永远都没有真正算得上是 “准备好了”的时候。</p>
<p>今天听了技术小黑屋的一场LIVE，讲的挺好，决定无论多垃圾，反正是自己用来记录的，无所谓了，有胜于无，垃圾总比没有好，开始好好整理下吧。</p>
<h1 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h1><ul>
<li>记录与备忘</li>
<li>深入理解知识点</li>
<li>在开放的回馈中发现自己理解的不足(技术知识是永无止境的)</li>
<li>开源与分享,提升个人名气和收益</li>
</ul>
<h1 id="如何写好"><a href="#如何写好" class="headerlink" title="如何写好"></a>如何写好</h1><ul>
<li>能够将一件事情讲清楚</li>
<li>格式清晰</li>
<li>思路清晰</li>
</ul>
<p>是什么,为什么,怎么做?</p>
<h1 id="如何讲清楚一件事"><a href="#如何讲清楚一件事" class="headerlink" title="如何讲清楚一件事"></a>如何讲清楚一件事</h1><ul>
<li>抓住本质</li>
<li>认清楚彼此的知识差距，照顾下限</li>
<li>联系现实</li>
<li>借鉴质量可靠的文章来理解一些概念(英文原文或大牛文章)</li>
<li><p>不要引入无关、干扰的概念</p>
</li>
<li><p>文章不要太长，一般人对太长的文章都有本能的排斥</p>
</li>
<li>注意无序和有序列表的使用</li>
<li>高亮代码是对程序员最基本的尊重</li>
</ul>
<h1 id="如何选题"><a href="#如何选题" class="headerlink" title="如何选题"></a>如何选题</h1><ul>
<li>以读者需求为导向 (快速提高关注度)</li>
<li>以个人研究为导向 (提升自我能力)</li>
</ul>
<h1 id="没有时间怎么办"><a href="#没有时间怎么办" class="headerlink" title="没有时间怎么办"></a>没有时间怎么办</h1><blockquote>
<p>第一阶段：研究阶段</p>
</blockquote>
<ul>
<li>可以将一个技术切换成零散的点，用零碎的时间去分开研究这些技术点</li>
<li>可以睡觉前、早晨、工作间歇等时间点</li>
</ul>
<blockquote>
<p>第二阶段：书写阶段</p>
</blockquote>
<ul>
<li>最好是连续的时间</li>
</ul>
<h1 id="博客平台的选择"><a href="#博客平台的选择" class="headerlink" title="博客平台的选择"></a>博客平台的选择</h1><blockquote>
<p>第三方平台：CSDN、简书</p>
</blockquote>
<ul>
<li>技术成本低</li>
<li>流量获取快</li>
<li>权限低,可控性低</li>
</ul>
<blockquote>
<p>自己搭建</p>
</blockquote>
<ul>
<li>可控性高</li>
<li>前期流量太低,像一个孤岛</li>
</ul>
<h1 id="技术不太行-先学习还是先写文章"><a href="#技术不太行-先学习还是先写文章" class="headerlink" title="技术不太行,先学习还是先写文章"></a>技术不太行,先学习还是先写文章</h1><ul>
<li>员工想着让老板先涨薪再努力工作,老板想着让员工先努力工作再涨薪.先技术还是先博客,道理一样.</li>
<li>每个阶段都有可以写的文章,一项文章如果自己了解了60%,那么就写这60%,在写的过程中,将会学习到剩下的40%.</li>
<li>看别人写的文章,一点点学习等方式技术进步都略慢.因为自己并没有深入思考,而且会随着时间的推移而忘记,真正的输出知识,才是进步最快的方式.</li>
</ul>
<h1 id="技术文章写的像文档-怎么区分"><a href="#技术文章写的像文档-怎么区分" class="headerlink" title="技术文章写的像文档,怎么区分"></a>技术文章写的像文档,怎么区分</h1><ul>
<li>进行模块切分</li>
<li>注意引言和总结</li>
<li>做好承前启后的过渡</li>
</ul>
<h1 id="写博客注意事项"><a href="#写博客注意事项" class="headerlink" title="写博客注意事项"></a>写博客注意事项</h1><ul>
<li>无论如何选择,最好支持Markdown,因为书写效率较高.</li>
<li>尽量少用大块的代码片段,如果需要大量代码,则需要删除一些无用的代码,最后可以给出代码链接.</li>
<li>避免代码横向过长,避免横向水平滚动条</li>
<li>一图胜千言</li>
<li>可以写一系列小而精的文章,而不要写一篇大而全的文章.</li>
<li>需要标明引用或转载<ul>
<li>如果是翻译,需要标注原文+获得原作者授权.</li>
<li>如果是转载或参考,则需要加入原文链接.</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Study </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[开发中的TextView技巧点整理]]></title>
      <url>/2016/12/28/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84TextView%E6%8A%80%E5%B7%A7%E7%82%B9%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>本篇文章主要是记录一下日常开发中,对<code>TextView</code>控件的一些使用过的技巧的整理,仅限自己开发中用到的一些点,并不全面,<strong>也没有太多技术含量</strong>.只是为了方便一些程序员小伙伴用到得时候，搜到之后拿来即用。如发现有错误,烦请帮忙指证,谢谢!</p>
<p>本文主要罗列了以下技巧点：</p>
<ul>
<li>通过换行符换行</li>
<li>在TextView中引入图片资源</li>
<li>动态变换TextView中的图片资源</li>
<li>设置字体和样式</li>
<li>加载自定义字体</li>
<li>限制TextView字符数</li>
<li>多文字展示中常见的【显示全部-收起】</li>
<li>价格标签与下划线</li>
<li>文字描边与阴影</li>
<li>跑马灯效果</li>
<li>设置字间距与行间距</li>
</ul>
<p>Demo动态图如下：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-67bcba0ae2428538?imageMogr2/auto-orient/strip" alt="Demo动态图"></p>
<h1 id="1-通过换行符换行"><a href="#1-通过换行符换行" class="headerlink" title="1.通过换行符换行"></a>1.通过换行符换行</h1><p>非常基础的换行符<code>“\n”</code>的使用，有些时候在一些复杂ItemView中，会有上下两行TextView罗列用来展示内容的情况，如果两行TextView的字体样式一致，并且数据来源固定或统一，此时可以考虑用一个TextView搞定，能少绘制一个TextView，甚至是用来包裹他们的LineaLayout也省了。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--普通换行--&gt;</div><div class="line"> &lt;TextView</div><div class="line">      android:layout_width=&quot;wrap_content&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      android:background=&quot;@color/colorAccent&quot;</div><div class="line">      android:text=&quot;&apos;好好学习\n天天向上&quot; /&gt;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-cea8c518a93c4142?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通过换行符换行"></p>
<h1 id="2-在TextView中引入图片资源"><a href="#2-在TextView中引入图片资源" class="headerlink" title="2.在TextView中引入图片资源"></a>2.在TextView中引入图片资源</h1><p>一个图片+几个文字的的控件搭配在任何项目中都太常见了，比如<br><img src="http://upload-images.jianshu.io/upload_images/1958298-246a3c8dd924bb31?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="点赞"></p>
<p>这个可以用LineaLayout来水平包裹ImageView+TextView，也可以直接通过TextView的drawableXxx属性来将图片资源嵌入TextView中。其中Xxx是指图片摆放的位置，包括</p>
<ul>
<li>drawableLeft   左侧</li>
<li>drawableRight 右侧</li>
<li>drawableTop  上方</li>
<li>drawableBottom 下方</li>
<li>drawableStart  控件空间的起始位置</li>
<li>drawableEnd  控件空间的末尾</li>
</ul>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">     android:id=&quot;@+id/tv_drawable&quot;</div><div class="line">     android:layout_width=&quot;wrap_content&quot;</div><div class="line">     android:layout_height=&quot;wrap_content&quot;</div><div class="line">     android:layout_marginTop=&quot;10dp&quot;</div><div class="line">     android:drawablePadding=&quot;10dp&quot;</div><div class="line">     android:drawableRight=&quot;@drawable/password_hide&quot;</div><div class="line">     android:gravity=&quot;center&quot;</div><div class="line">     android:text=&quot;点下试试&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-3d599082fd5d85f4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在TextView中引入图片资源"></p>
<h1 id="3-动态变换TextView中的图片资源"><a href="#3-动态变换TextView中的图片资源" class="headerlink" title="3.动态变换TextView中的图片资源"></a>3.动态变换TextView中的图片资源</h1><p>上面谈到的图片+文字的两种布局方式中，LinearLayout水平包裹的方式虽然略显臃肿，但是动态替换其中的图片比较方便，直接操作包裹的ImageView即可。而TextView内嵌图片的方式，在动态替换图片资源时，略显繁琐，不过也很简单，主要是对Drawable对象的操作。</p>
<p>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.通过图片资源获取Drawable对象</span></div><div class="line">Drawable showPwdDrawable = getResources().getDrawable(R.drawable.password_show);</div><div class="line"><span class="comment">//2.设置Drawable对象的显示范围</span></div><div class="line">showPwdDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, showPwdDrawable.getMinimumWidth(), showPwdDrawable.getMinimumHeight());</div><div class="line"><span class="comment">//3.将Drawable设置给TextView(方法中的4个参数，分别对应Drawable相对于文字而言放置的位置：左上右下四个位置)</span></div><div class="line">textview.setCompoundDrawables(<span class="keyword">null</span>, <span class="keyword">null</span>, showPwdDrawable, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-60900bd93c42a911?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="动态变换TextView中的图片资源"></p>
<h1 id="4-设置字体和样式"><a href="#4-设置字体和样式" class="headerlink" title="4.设置字体和样式"></a>4.设置字体和样式</h1><p>TextView的<code>typeface</code>属性可以用来设置字体,默认有4种类型</p>
<ul>
<li>normal</li>
<li>sans</li>
<li>serif</li>
<li>monospace</li>
</ul>
<p><code>textStyle</code>属性可以用来设置样式，默认有3种类型：</p>
<ul>
<li>bold 粗体</li>
<li>italic 斜体</li>
<li>normal 正常(默认)</li>
</ul>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!--粗体+serif样式--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_marginTop=&quot;10dp&quot;</div><div class="line">    android:text=&quot;@string/study&quot;</div><div class="line">    android:textStyle=&quot;bold&quot;</div><div class="line">    android:typeface=&quot;serif&quot; /&gt;</div><div class="line"></div><div class="line">&lt;!--斜体 + monospace样式--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_marginTop=&quot;10dp&quot;</div><div class="line">    android:text=&quot;@string/study&quot;</div><div class="line">    android:textStyle=&quot;italic&quot;</div><div class="line">    android:typeface=&quot;monospace&quot; /&gt;</div></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-ab88b4a021a9caf5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置字体和样式"></p>
<h1 id="5-加载自定义字体"><a href="#5-加载自定义字体" class="headerlink" title="5.加载自定义字体"></a>5.加载自定义字体</h1><p>除了系统默认提供的几种字体以外,还可以加载自定义的字体.<br>注意:字体文件必须是真正的ttf(TrueTypeFont)文件,否则要么没有效果 , 要么直接抛<code>java.lang.RuntimeException: Font asset not found fonts</code>异常,.</p>
<p>步骤:<br>1.将ttf字体文件放在Module的<code>src/main/assets/fonts/</code>目录下<br>2.加载字体文件到内存,并设置给TextView</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//通过Typeface的静态方法加载字体资源到内存</div><div class="line">Typeface typeface = Typeface.createFromAsset(getAssets(), &quot;fonts/华文行楷.ttf&quot;);</div><div class="line">//将typeface设置给TextView</div><div class="line">tvCustomTypeface.setTypeface(typeface);</div></pre></td></tr></table></figure>
<p>效果图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-4e940bfad705619d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="加载自定义字体"></p>
<h1 id="6-限制TextView字符数"><a href="#6-限制TextView字符数" class="headerlink" title="6.限制TextView字符数"></a>6.限制TextView字符数</h1><p>为了UI效果或者屏幕适配等因素,经常需要对TextView展示出来的字数做限制,其实也很简单通过3个属性就可以搞定:</p>
<ul>
<li>ellipsize 省略位置</li>
<li>maxEms 最大字符数,一个汉字占1个字符,1个英文/符号占半个字符;从第maxEms+1位置开始用省略号代替</li>
<li>maxLines 行数限制(singleLine也行,但是已被标记为Deprecated)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--限制字符数--&gt;</div><div class="line">&lt;TextView</div><div class="line">     android:layout_width=&quot;wrap_content&quot;</div><div class="line">     android:layout_height=&quot;wrap_content&quot;</div><div class="line">     android:ellipsize=&quot;end&quot;</div><div class="line">     android:maxLines=&quot;1&quot;</div><div class="line">     android:maxEms=&quot;7&quot;</div><div class="line">     android:text=&quot;@string/study&quot; /&gt;</div></pre></td></tr></table></figure>
<p>效果图:<br><img src="http://upload-images.jianshu.io/upload_images/1958298-577aa7faf0d06238?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="限制TextView字符数"></p>
<h1 id="7-多文字展示中常见的【显示全部-收起】"><a href="#7-多文字展示中常见的【显示全部-收起】" class="headerlink" title="7.多文字展示中常见的【显示全部-收起】"></a>7.多文字展示中常见的【显示全部-收起】</h1><p>这个比较常见,比如看个朋友圈或者微博,不会直接将文字内容全部罗列展示出来,而是末尾有个[更多]or[显示全部],点击后就会将文字内容全部显示出来.(当然也有点击后跳转页面的,跟这次谈的内容无关,这是举个例子)</p>
<p>实现起来也比较简单,通过setMaxLines(int maxLines)方法即可达到目的.</p>
<p>每次点击[显示全部-收起]按钮时 , 执行以下事件 , 即可实现 . 效果图请看文章开头的gif图.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">showAll = !showAll;</div><div class="line">if(showAll)&#123;</div><div class="line">      tvShowAll.setMaxLines(2);</div><div class="line">      btnShowAll.setText(&quot;查看全部&quot;);</div><div class="line">  &#125;else &#123;</div><div class="line">      tvShowAll.setMaxLines(20);</div><div class="line">      btnShowAll.setText(&quot;收起&quot;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
</blockquote>
<p>开发中当碰到上述问题时,同时必然存在一个前提场景,那就是根据数据内容来动态判断是该展示 [显示全部]按钮.</p>
<p>此时需要动态获取textview加载了内容后占据了几行,比如我们需求规定超过3行,末尾就要省略+展示[显示更多] . 此时需要用到TextView的<code>getLineCount()</code>方法.</p>
<blockquote>
<p>getLineCount() 方法<br>Return the number of lines of text, or 0 if the internal Layout has not been built.返回TextView内容的行数 , 如果没内容则返回0</p>
</blockquote>
<p>需要注意的时,此方法不能直接在onCreate()中调用,因为此时TextView的内容可能还没有加载完毕导致获取到得行数为0.可以用如下方式来决定[显示全部]按钮是否显示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">textview.post(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        if(textview.getLineCount() &gt; 3)&#123;</div><div class="line">            //textview内容大于行数限制,展示[显示全部]按钮&quot;</div><div class="line">        &#125;else &#123;</div><div class="line">            //textview内容小于等于行数限制&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="8-价格标签与下划线"><a href="#8-价格标签与下划线" class="headerlink" title="8.价格标签与下划线"></a>8.价格标签与下划线</h1><p>在商品交易类模块必然牵扯到商品价格 , 而一般出于促销目的,会在界面上展示出商品原价和现价 ,原价远高于现价, 同时再把原价划上一条横线表示作废以刺激客户消费 . 这是很常见的 价格促销UI.</p>
<p> 这个效果需要TextView通过Paint对象来绘制,系统都封装好了,我们简单使用即可.</p>
<p>第一步,正常定义XML</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!--价格标签--&gt;</div><div class="line">&lt;!--中间横线--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/tv_line_middle&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:text=&quot;￥20.00&quot;</div><div class="line">    android:textColor=&quot;@android:color/holo_red_dark&quot; /&gt;</div><div class="line"></div><div class="line">&lt;!--底部横线--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/tv_line_end&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_marginTop=&quot;10dp&quot;</div><div class="line">    android:text=&quot;￥20.00&quot;</div><div class="line">    android:textColor=&quot;@android:color/holo_red_dark&quot; /&gt;</div></pre></td></tr></table></figure>
<p>第二步,通过TextView的Paint对象来划线</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//中间横线</span></div><div class="line">tvLineMiddle.getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG );</div><div class="line"><span class="comment">//下划线</span></div><div class="line">tvLineEnd.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);</div></pre></td></tr></table></figure>
<p>效果图:<br><img src="http://upload-images.jianshu.io/upload_images/1958298-e6858e7b656bcbf1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="价格标签与下划线"></p>
<h1 id="9-文字描边与阴影"><a href="#9-文字描边与阴影" class="headerlink" title="9.文字描边与阴影"></a>9.文字描边与阴影</h1><p>涉及属性:</p>
<ul>
<li>shadowColor :   Place a blurred shadow of text underneath the text, drawn with the specified color.用指定颜色在文字下方绘制模糊的阴影 </li>
<li>shadowDx   Horizontal offset of the text shadow. 文字阴影的横向/水平偏移量</li>
<li>shadowDy  Vertical offset of the text shadow. 文字阴影的纵向/垂直偏移量</li>
<li>shadowRadius    Blur radius of the text shadow.   阴影的半径范围</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!--文字描边与阴影--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:shadowColor=&quot;#ff0000&quot;</div><div class="line">    android:shadowDx=&quot;5&quot;</div><div class="line">    android:shadowDy=&quot;5&quot;</div><div class="line">    android:shadowRadius=&quot;5&quot;</div><div class="line">    android:text=&quot;@string/study&quot; /&gt;</div></pre></td></tr></table></figure>
<p>效果图:<br><img src="http://upload-images.jianshu.io/upload_images/1958298-884bd8d17cfe7c09?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文字描边与阴影"></p>
<h1 id="10-跑马灯效果"><a href="#10-跑马灯效果" class="headerlink" title="10.跑马灯效果"></a>10.跑马灯效果</h1><p>现在这种效果用的越来越少了,不赘述了.</p>
<p>直接上代码,效果图见文章顶部gif:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!--跑马灯效果--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;200dp&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;@android:color/holo_blue_light&quot;</div><div class="line">    android:ellipsize=&quot;marquee&quot;</div><div class="line">    android:focusable=&quot;true&quot;</div><div class="line">    android:focusableInTouchMode=&quot;true&quot;</div><div class="line">    android:marqueeRepeatLimit=&quot;marquee_forever&quot;</div><div class="line">    android:singleLine=&quot;true&quot;</div><div class="line">    android:text=&quot;@string/poem&quot; /&gt;</div></pre></td></tr></table></figure>
<h1 id="11-设置字间距与行间距"><a href="#11-设置字间距与行间距" class="headerlink" title="11.设置字间距与行间距"></a>11.设置字间距与行间距</h1><p>涉及属性:</p>
<ul>
<li>letterSpacing 字间距<ul>
<li>Must be a floating point value, such as “0.2”. (0.0~1.0 stands for a letter)  —–必须是0.0~1.0之间的小数,以一个字母为空间标准 </li>
</ul>
</li>
<li>lineSpacingExtra 行距<ul>
<li>Must be a dimension value, which is a floating point number appended with a unit such as “14.5sp”. Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size), in (inches), mm (millimeters). —–直接通过px,dp,sp等单位指定行距,例如14.5sp</li>
</ul>
</li>
<li>lineSpacingMultiplier 行间距的倍数<ul>
<li>Must be a floating point value, such as “1.2”.—-比如1.2倍</li>
</ul>
</li>
</ul>
<p>直接使用上述属性,即可达到设置字间距,行间距的目的,代码如下,效果图见文章顶部gif</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> &lt;!--字间距0.5字符--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;0dp&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout_weight=&quot;1&quot;</div><div class="line">    android:background=&quot;@android:color/darker_gray&quot;</div><div class="line">    android:letterSpacing=&quot;0.5&quot;</div><div class="line">    android:text=&quot;@string/poem&quot; /&gt;</div><div class="line">    </div><div class="line">&lt;!--行间距10sp--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;0dp&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout_weight=&quot;1&quot;</div><div class="line">    android:background=&quot;@android:color/holo_green_light&quot;</div><div class="line">    android:lineSpacingExtra=&quot;10sp&quot;</div><div class="line">    android:text=&quot;@string/poem&quot; /&gt;</div><div class="line"></div><div class="line">&lt;!--行间距1.8倍--&gt;</div><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;0dp&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout_weight=&quot;1&quot;</div><div class="line">    android:lineSpacingMultiplier=&quot;1.8&quot;</div><div class="line">    android:text=&quot;@string/poem&quot; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p><a href="http://download.csdn.net/detail/wangxw725/9766975" target="_blank" rel="external">Demo下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager+Fragment组合的预加载和懒加载]]></title>
      <url>/2016/12/23/ViewPager+Fragment%E7%BB%84%E5%90%88%E7%9A%84%E9%A2%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h1 id="预加载介绍"><a href="#预加载介绍" class="headerlink" title="预加载介绍"></a>预加载介绍</h1><p>ViewPager+Fragment的搭配在日常开发中也比较常见,可用于切换展示不同类别的页面,我们日常所见的咨询、购物、金融、社交等类型的APP都有机会用到这种控件组合.</p>
<p>例如:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-37e73e6e5239c911.png?imageMogr2/auto-orient/strip" alt="今日头条APP"></p>
<p>ViewPager控件有个特有的预加载机制,即默认情况下当前页面左右两侧的1个页面会被加载,以方便用户滑动切换到相邻的界面时,可以更加顺畅的显示出来.</p>
<p>通过ViewPager的<code>setOffscreenPageLimit(int limit)</code>可以设置预加载页面数量，当前页面相邻的limit个页面会被预加载进内存.</p>
<p>效果如下:注意看Log输出</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-7d7826bf55116679.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="viewpager预加载2页"></p>
<h1 id="懒加载介绍"><a href="#懒加载介绍" class="headerlink" title="懒加载介绍"></a>懒加载介绍</h1><p>所谓的懒加载,其实也就是延迟加载,就是等到该页面的UI展示给用户时,再加载该页面的数据(从网络、数据库等),而不是依靠ViewPager预加载机制提前加载两三个,甚至更多页面的数据.这样可以提高所属Activity的初始化速度,也可以为用户节省流量.而这种懒加载的方式也已经/正在被诸多APP所采用.</p>
<p>但是通过ViewPager方法<code>setOffscreenPageLimit(int limit)</code>的源码可以发现,ViewPager通过一定的逻辑判断来确保<strong>至少</strong>会预加载左右两侧相邻的<strong>1个页面</strong>,也就是说无法通过简单的配置做到懒加载的效果.</p>
<blockquote>
<p>ViewPager方法setOffscreenPageLimit(int limit) 相关源码</p>
</blockquote>
<pre><code>//默认的缓存页面数量(常量)
private static final int DEFAULT_OFFSCREEN_PAGES = 1;

//缓存页面数量(变量)
private int mOffscreenPageLimit = DEFAULT_OFFSCREEN_PAGES;

public void setOffscreenPageLimit(int limit) {
    //当我们手动设置的limit数小于默认值1时,limit值会自动被赋值为默认值1(即DEFAULT_OFFSCREEN_PAGES)
    if (limit &lt; DEFAULT_OFFSCREEN_PAGES) {
        Log.w(TAG, &quot;Requested offscreen page limit &quot; + limit + &quot; too small; defaulting to &quot;+ DEFAULT_OFFSCREEN_PAGES);
        limit = DEFAULT_OFFSCREEN_PAGES;
    }

    if (limit != mOffscreenPageLimit) {
        //经过前面的拦截判断后,将limit的值设置给mOffscreenPageLimit,用于
        mOffscreenPageLimit = limit;
        populate();
    }
}
</code></pre><p>关于变量mOffscreenPageLimit到底是什么.可以从其get方法注释中略见端倪</p>
<pre><code>/**
 * 返回空闲状态下的视图层级中,当前页面任何一侧保存的页面数量,默认是1
 * Returns the number of pages that will be retained to either side of the
 * current page in the view hierarchy in an idle state. Defaults to 1.
 *
 * @return How many pages will be kept offscreen on either side
 * @see #setOffscreenPageLimit(int)
 */
public int getOffscreenPageLimit() {
    return mOffscreenPageLimit;
}
</code></pre><p>至于mOffscreenPageLimit到底是怎么影响ViewPager控件预加载的,暂不追查,因为此次的目的并不是ViewPager运行原理分析.</p>
<h1 id="如何做到懒加载"><a href="#如何做到懒加载" class="headerlink" title="如何做到懒加载"></a>如何做到懒加载</h1><p>既然通过ViewPager无法达到我们想要的懒加载效果,那么就得从Fragment自身入手了.</p>
<p>Fragment为我们提供了一个方法<code>setUserVisibleHint(boolean isVisibleToUser)</code>,其中的参数<code>isVisibleToUser</code>就是表示该Fragment的UI对于用户是否可见</p>
<blockquote>
<p>Fragment的方法 setUserVisibleHint(boolean isVisibleToUser)</p>
</blockquote>
<pre><code>/**
 * Set a hint to the system about whether this fragment&apos;s UI is currently visible
 * to the user. This hint defaults to true and is persistent across fragment instance
 * state save and restore.
 *
 * &lt;p&gt;An app may set this to false to indicate that the fragment&apos;s UI is
 * scrolled out of visibility or is otherwise not directly visible to the user.
 * This may be used by the system to prioritize operations such as fragment lifecycle updates
 * or loader ordering behavior.&lt;/p&gt;
 *
 * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method may be called outside of the fragment lifecycle.
 * and thus has no ordering guarantees with regard to fragment lifecycle method calls.&lt;/p&gt;
 *
 * @param isVisibleToUser true if this fragment&apos;s UI is currently visible to the user (default),
 *                        false if it is not.
 */
public void setUserVisibleHint(boolean isVisibleToUser) {
    if (!mUserVisibleHint &amp;&amp; isVisibleToUser &amp;&amp; mState &lt; STARTED
            &amp;&amp; mFragmentManager != null &amp;&amp; isAdded()) {
        mFragmentManager.performPendingDeferredStart(this);
    }
    mUserVisibleHint = isVisibleToUser;
    mDeferStart = mState &lt; STARTED &amp;&amp; !isVisibleToUser;
}
</code></pre><p>大意就是通过此方法来设置Fragment的UI对用户是否可见,当该页面对用户可见/不可见时,系统都会回调此方法. </p>
<p>我们可以重写此方法，然后根据回调的<code>isVisibleToUser</code>参数来进行相关的逻辑判断,以达到懒加载的效果,比如如果<code>isVisibleToUser==true</code>的话表示当前Fragment对用户可见，此时再去加载页面数据.</p>
<p>由于ViewPager内会装载多个Fragment,而这种懒加载机制对于各个Fragment属于共同操作,因此适合将其抽取到BaseFragment中.</p>
<blockquote>
<p>注意</p>
</blockquote>
<p><code>setUserVisibleHint(boolean isVisibleToUser)</code>方法会多次回调,而且可能会在<code>onCreateView()</code>方法执行完毕之前回调.如果isVisibleToUser==true,然后进行数据加载和控件数据填充,但是<code>onCreateView()</code>方法并未执行完毕,此时就会出现NullPointerException空指针异常.</p>
<p>基于以上原因,我们进行数据懒加载的时机需要满足两个条件</p>
<ol>
<li><code>onCreateView()</code>方法执行完毕</li>
<li><code>setUserVisibleHint(boolean isVisibleToUser)</code>方法返回true</li>
</ol>
<p>所以在BaseFragment中用两个布尔型标记来记录这两个条件的状态.只有同时满足了,才能加载数据</p>
<pre><code>//Fragment的View加载完毕的标记
private boolean isViewCreated;

//Fragment对用户可见的标记
private boolean isUIVisible;
</code></pre><blockquote>
<p>第一步,改变<code>isViewCreated</code>标记</p>
</blockquote>
<p>当<code>onViewCreated()</code>方法执行时,表明View已经加载完毕,此时改变<code>isViewCreated</code>标记为<strong>true</strong>,并调用<code>lazyLoad()</code>方法</p>
<pre><code>@Override
public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
    super.onViewCreated(view, savedInstanceState);
    isViewCreated = true;
    lazyLoad();
}
</code></pre><blockquote>
<p>第二步,改变<code>isUIVisible</code>标记</p>
</blockquote>
<p>当<code>setUserVisibleHint(boolean isVisibleToUser)</code>回调为<strong>true</strong>时,改变<code>isUIVisible</code>标记为<strong>true</strong>,并调用<code>lazyLoad()</code>方法</p>
<pre><code>@Override
public void setUserVisibleHint(boolean isVisibleToUser) {
    super.setUserVisibleHint(isVisibleToUser);
    //isVisibleToUser这个boolean值表示:该Fragment的UI 用户是否可见
    if (isVisibleToUser) {
        isUIVisible = true;
        lazyLoad();
    } else {
        isUIVisible = false;
    }
}
</code></pre><blockquote>
<p>第三步: 在lazyLoad()方法中进行双重标记判断,通过后即可进行数据加载</p>
</blockquote>
<pre><code>private void lazyLoad() {
    //这里进行双重标记判断,是因为setUserVisibleHint会多次回调,并且会在onCreateView执行前回调,必须确保onCreateView加载完毕且页面可见,才加载数据
    if (isViewCreated &amp;&amp; isUIVisible) {
        loadData();
        //数据加载完毕,恢复标记,防止重复加载
        isViewCreated = false;
        isUIVisible = false;

        printLog(mTextviewContent+&quot;可见,加载数据&quot;);
    }
}
</code></pre><blockquote>
<p>第四步:定义抽象方法<code>loadData()</code>,具体加载数据的工作,交给子类去完成</p>
</blockquote>
<pre><code>protected abstract void loadData();
</code></pre><p><strong>注意:</strong> 数据加载完毕要恢复标记,防止数据重复加载</p>
<p>效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-c705c1be475d11d8.gif?imageMogr2/auto-orient/strip" alt="Fragment懒加载示例"></p>
<h1 id="Demo源码"><a href="#Demo源码" class="headerlink" title="Demo源码"></a>Demo源码</h1><p><a href="https://github.com/Crocutax/FragmentLazyloadDemo" target="_blank" rel="external">Github源码</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观影随笔-《百鸟朝凤》]]></title>
      <url>/2016/10/06/%E8%A7%82%E5%BD%B1%E9%9A%8F%E7%AC%94-%E3%80%8A%E7%99%BE%E9%B8%9F%E6%9C%9D%E5%87%A4%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>这是一部关于非物质文化遗产的电影，一部让人叹息和沉默的电影。</p>
<h1 id="方励"><a href="#方励" class="headerlink" title="方励"></a>方励</h1><p>谈《百鸟朝凤》就不得不谈到方励，自己也确实是从方励同学这一跪，才知道了《百鸟朝凤》上映的消息，经过对影片的简单了解后才立即决定去看这部电影，所以自己也是8600万票房的贡献者之一。</p>
<p>对方励的认知有两个：</p>
<ul>
<li>《后会无期》 制片人</li>
<li><a href="https://v.qq.com/x/page/b01390e2jb5.html" target="_blank" rel="external">方励 一席 演讲</a></li>
</ul>
<p>由于喜欢韩寒，所以对于作为韩寒电影制片人的方励也就顺便多了一点了解的兴趣，但是真正让自己印象最深刻的，还是第二条，就是听他在一席的演讲。</p>
<p>听完他对人生的理解之后，直接促成我下定决心离开已工作将近5年的公司，去更加透彻的燃烧自己的生命。</p>
<p>出于自以为是的职业精神的考虑，裸辞了工作（而公司却早有准备，直接让他人替代了自己的岗位，当初真单纯-_-！），当初也是面临着非常大的压力，以及对未来不确定性的恐慌，而现在看来，非常庆幸自己当初的决定：）</p>
<p>方励这一跪，无论他人如何评说，起码为《百鸟朝凤》这部电影赢来了更多的排片场次，让有可能无法在院线跟观众见面的一部良心影片起死回生了，让大家有机会得以了解《百鸟朝凤》，所以，这个最终的结果是好的。</p>
<h1 id="匠人的傲骨"><a href="#匠人的傲骨" class="headerlink" title="匠人的傲骨"></a>匠人的傲骨</h1><p>在唢呐人的心里，坐在太师椅上给故人吹《百鸟朝凤》是双方的荣誉，在唢呐人这边，首先没几个人会吹奏这首曲子，其次如果故人家属不给予唢呐师傅足够的尊重和礼遇，他们也不会吹奏这首曲子；而对于已故的人来说，如果生前的所作所为没有得到老百姓的认可和尊敬，那么故去时就不配享有《百鸟朝凤》的荣誉。</p>
<p>所以，在丧礼上吹奏《百鸟朝凤》，对于唢呐人而言，是技艺与地位的体现；而对于故人而言，则是对其生平最大的肯定与赞颂。</p>
<p>因此在吹奏《百鸟朝凤》这件事上，我们在影片中看到了焦三爷坚决拒绝的时候，也看到了体力不支即使吐血硬抗也要坚持吹奏的时候，因为焦三爷内心有一份唢呐人的傲骨，这份傲骨，并不是傲气，而是一种唢呐人行为标准的坚持</p>
<h1 id="师徒之情"><a href="#师徒之情" class="headerlink" title="师徒之情"></a>师徒之情</h1><p>精心挑选，从小当孩子一样养，根据徒弟的情况一点一点的传授技艺，培养能力。陆续把自己一手建立的班子转成“游家班”，徒弟撑不起来台子时自己拼了老命顶上，把祖传的自己都舍不得拿出来的唢呐倾囊相授，把家里仅剩的一头牛卖了自己即使病不治也要给徒弟置办唢呐班的行头……</p>
<p>这样的师徒关系令人动容，这是围绕着唢呐这门艺术的全心全意的传承，焦三爷是个根深蒂固的手艺人，在他看来，没有什么东西比把唢呐这门艺术传承下去更加重要。所以当初选徒弟的时候，虽然两个人当中蓝玉在天分和技艺上都更胜一筹，但是焦三爷最终还是选择了游天鸣，因为这孩子实诚，靠得住，能把这门手艺踏踏实实的传下去。</p>
<h1 id="匠人的挽歌"><a href="#匠人的挽歌" class="headerlink" title="匠人的挽歌"></a>匠人的挽歌</h1><p>在网上看到了一篇影评名称“《百鸟朝凤》是匠人的挽歌，还是反击的号角？”，文章没有点进去看，因为就目前的情形而言，应该是前者。</p>
<p>影片本身在后期也表达了这种传统曲艺在现实面前的无力和焦虑：</p>
<ul>
<li>游家班的老伙计们不是不想出活，是老百姓追求新潮而越来越多请了西洋乐器班替代传统的唢呐班，这是几个人的力量所无法扭转的局面；</li>
<li>不是不想继续吹唢呐，而是出活的次数越来越少，收入越来越低，家人的生活无法保障，家人的病没钱去医治；</li>
<li>不是不想回去接着干，而是工厂无保护措施的体力劳动，让他们有的断了手，有的得了肺病，虽然赚了些生活费，但是却永远失去了一些东西，比如身体的健康，比如吹唢呐的能力……</li>
</ul>
<p>而街头乞讨的唢呐艺人，更是对唢呐现状的回应，是对满心干劲想重新操持起唢呐班的游天鸣的耳光，是给焦三爷最后的希望泼的冷水。如果说一个个的现实让人们只是心情压抑、唏嘘叹息的话，影片最终定格的画面则让人潸然泪下：为别人吹了一辈子唢呐的唢呐王，在自己故去的时候，最终来送行的却只有一个自己的关门弟子一人……为师父吹奏他理应享有的《百鸟朝凤》……</p>
<p>最终留给观众的是悬而未决的思考题：</p>
<ul>
<li>这是焦三爷的宿命还是唢呐的宿命，还是民俗的宿命？</li>
<li>游天鸣在这种局面下，应该固执的坚持，还是应该放弃？</li>
<li>坚持真的是对的吗？放弃真的是错的吗？</li>
</ul>
<h1 id="民族的才是世界的"><a href="#民族的才是世界的" class="headerlink" title="民族的才是世界的"></a>民族的才是世界的</h1><p>影片中用街头唢呐艺人来暗示现实中当前唢呐人的命运，其实这应该只是导演想在那时那景来做一个衬托而已，是一种呐喊和号召而已。因为街头艺人不只有吹唢呐的，还有弹吉他的、拉小提琴的、有唱歌的，甚至有敲架子鼓、弹钢琴的。</p>
<p>并不是说吹唢呐的只能最终落得那个结局，地下通道里有吉他歌手，演唱会上也有。一门传统艺术并不因出现的场合而有优劣、高低之分。这里真正重要的，对这些传统民俗有影响的，其实还是人们的观念。</p>
<p>比如一提到传统艺术，人们的印象好像就是土、旧、没意思，好像这些全都是中老年人的爱好，而就跟影片中的情景一样，一群人的眼球更愿意停留在扭屁股露大腿的美女身上，因为那代表着新潮、漂亮、时尚，而追逐这些让自己也显得优人一等。90年代如此，现在20年过去了依然如此。</p>
<p>为什么传统民俗艺术不可以像唐装、旗袍一样优雅？一样可以。</p>
<p>这其实是很悲哀，也很危险的现象。所以陈道明在《传承者》节目中，当一帮年轻人针对一个群体大鼓表演表达出“这些没有前途，以后没有用，以后个人也没法脱颖而出”等观点时，才会直接了当的表示“不同意”和批评。</p>
<p>“民族的才是世界的”这个观点特别好，而世界的并不是你民族的，比如日本、韩国、西欧等许多国家都有自己的传统文化特色，无论是物质还是非物质的，这些也都保留的非常好，在各自的国家而言这些都是瑰宝。其实我们自己的传统文化，在别人看来也同样，只是我们自己可能并不那么重视和喜欢而已。在一些人看来，那些只是在对外的时候用来给自己增光和提升自豪感的。</p>
<h1 id="政府的扶持"><a href="#政府的扶持" class="headerlink" title="政府的扶持"></a>政府的扶持</h1><p>从今年开始，政府好像增加了基层文化宣传方面的支出，因为听说乡镇范围开始搞一些民间艺术活动，比如戏曲,不知道这是不是政府在以补贴的方式提升民俗活动的活跃度。</p>
<p>当然，有胜于无，但其实如果真正想让传统民俗保持长久的生命力，还是得从人们的观念转变开始，还是得从市场化角度开始。虽然这两个角度看起来都有点过于艰巨，甚至有点绝望，但或许是唯一的道路。</p>
<p>观念的转变而言，习大大早就提出要在教育中更加注重传统文化，我想这个传统文化绝对不是仅仅只四书五经之类的。</p>
<p>市场化而言，有一个很明显的励志的例子，就是德云社的相声，有它和没它，观众对相声的认知能一样吗？</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Movie </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[笔记-代码家学习经验分享]]></title>
      <url>/2016/10/02/%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E5%AE%B6%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p>在微信公众号上看了代码家的分享文章 <a href="https://mp.weixin.qq.com/s?__biz=MzA3MDQ2OTQ3Mw%3D%3D&amp;mid=2652591829&amp;idx=1&amp;sn=defd4cfb64adc6dfbf0b8c63c7420768" target="_blank" rel="external">分享一些自己的学习历程和学习建议</a> ,了解到了大神的学习方法，颇有收获。</p>
<p>对比自己，发现确实是二手知识获取的太多了，一手知识和自主思考太少了，学习时越轻松，工作时越麻烦，而真正应有的学习方式应该是反过来。</p>
<p>技术永无止境，而学习方式也尤其重要，整理阅读笔记如下：</p>
<h1 id="学习的三个阶段"><a href="#学习的三个阶段" class="headerlink" title="学习的三个阶段"></a>学习的三个阶段</h1><ul>
<li>第一阶段：消费者阶段</li>
<li>第二阶段：实践者阶段</li>
<li>第三阶段：创造者阶段</li>
</ul>
<h1 id="真正的学习"><a href="#真正的学习" class="headerlink" title="真正的学习"></a>真正的学习</h1><p>学习的过程都是伴随着思考和痛苦的，如果你边笑边学习（学习过程非常轻松），那你真的得醒醒了</p>
<h1 id="目标和激励很重要"><a href="#目标和激励很重要" class="headerlink" title="目标和激励很重要"></a>目标和激励很重要</h1><p>用小Demo做目标,而不是一味的学习，一味的输入知识.有激励才有动力,持续的输入而没有输出,会很快丧失兴趣和动力.</p>
<p>用适度的成果输出来激励自己，能更高的提升知识输入的效率和效果。</p>
<h1 id="你永远无法一步达到完美"><a href="#你永远无法一步达到完美" class="headerlink" title="你永远无法一步达到完美"></a>你永远无法一步达到完美</h1><p>以最低成本去展现你想法的核心部分，后期再迭代，而非直接做一个大而全的方案</p>
<h1 id="赶在兴趣消失之前，马上开始学习新知识"><a href="#赶在兴趣消失之前，马上开始学习新知识" class="headerlink" title="赶在兴趣消失之前，马上开始学习新知识"></a>赶在兴趣消失之前，马上开始学习新知识</h1><p>如果对哪门新技术产生了兴趣，不要往后拖,赶紧去入个门,否则这个兴趣会很快消失,而自己也失去了一次了解新知识的机会.</p>
<h1 id="少看别人写的文章，多看优秀的代码"><a href="#少看别人写的文章，多看优秀的代码" class="headerlink" title="少看别人写的文章，多看优秀的代码"></a>少看别人写的文章，多看优秀的代码</h1><p>慢慢减少对二手知识的依赖,多学习官方文档,源码,更加全面的培养自主知识体系和解决问题的能力</p>
<h1 id="收藏的意义不大"><a href="#收藏的意义不大" class="headerlink" title="收藏的意义不大"></a>收藏的意义不大</h1><ul>
<li>以后不会看的,没有时间.</li>
<li>如果以后用到了,再去Google就可以了,说不定能找到更好的.</li>
</ul>
<h1 id="培养一些对产品的感觉"><a href="#培养一些对产品的感觉" class="headerlink" title="培养一些对产品的感觉"></a>培养一些对产品的感觉</h1><ul>
<li>培养产品经理的思维,而不是一味的做一个码农</li>
<li>每个人都应该有个 idea list</li>
</ul>
<h1 id="争取去更优秀的地方"><a href="#争取去更优秀的地方" class="headerlink" title="争取去更优秀的地方"></a>争取去更优秀的地方</h1><p>顾名思义</p>
]]></content>
      
        <categories>
            
            <category> Note </category>
            
            <category> Study </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio使用中的问题记录]]></title>
      <url>/2016/06/03/AndroidStudio%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Android Studio在使用过程中遇到了各种各样的小问题 , 记录在此 , 方便备查 , 后续若再有新问题 , 也追加到这里.</p>
<h1 id="首次安装AS，卡在downloading-Components界面"><a href="#首次安装AS，卡在downloading-Components界面" class="headerlink" title="首次安装AS，卡在downloading Components界面"></a>首次安装AS，卡在downloading Components界面</h1><ol>
<li>从任务管理器中强制退出</li>
<li>在AndroidStudio安装目录的bin目录下，打开 idea.properties 文件</li>
<li>在文件末尾追加 <code>disable.android.first.run=true</code> 即可</li>
</ol>
<h1 id="卡在Refreshing-…gradle-project"><a href="#卡在Refreshing-…gradle-project" class="headerlink" title="卡在Refreshing …gradle project"></a>卡在Refreshing …gradle project</h1><p>这是因为AS去联网下载对应的gradle了，如果网速比较慢的话 , 这个过程可能需要消耗很长时间 . </p>
<p><strong>解决:</strong><br>可以选择去gradle网站下载好安装包，然后再复制到C:\Users\Administrator.gradle\wrapper\dists目录下即可.<br><a href="http://services.gradle.org/distributions" target="_blank" rel="external">gradle安装包下载地址</a>（不用翻墙，可用）</p>
<h1 id="It-is-currently-in-use-by-another-Gradle-instance"><a href="#It-is-currently-in-use-by-another-Gradle-instance" class="headerlink" title="It is currently in use by another Gradle instance"></a>It is currently in use by another Gradle instance</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Error:<span class="function">Timeout waiting to lock artifact <span class="title">cache</span> <span class="params">(C:\Users\Crocutax\.gradle\caches\modules<span class="number">-2</span>)</span>. It is currently in use by another Gradle instance.</span></div><div class="line">Owner PID: 16896</div><div class="line">Our PID: 10860</div><div class="line">Owner Operation: resolve configuration ':classpath'</div><div class="line">Our operation: resolve configuration ':classpath'</div><div class="line">Lock file: C:\Users\Crocutax\.gradle\caches\modules-2\modules-2.lock</div></pre></td></tr></table></figure>
<p><strong>解决方法:</strong></p>
<ol>
<li>去往指定目录C:\Users\Crocutax.gradle\caches\modules-2</li>
<li>删除modules-2.lock文件,此时会提示该文件被Java占用,无法删除</li>
<li>调出任务管理器,将跟Java相关的进程杀死,即可正常删除该文件<br><img src="http://upload-images.jianshu.io/upload_images/1958298-0160203b78fcec7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Java进程"></li>
<li>Android Studio 重新Build即可</li>
</ol>
<h1 id="gradle-project-refresh-failed-Error：-“Invalid-argument”"><a href="#gradle-project-refresh-failed-Error：-“Invalid-argument”" class="headerlink" title="gradle project refresh failed Error： “Invalid argument”"></a>gradle project refresh failed Error： “Invalid argument”</h1><p>app/build.gradle里dependencies有错误 , 看看是不是小手一抖,把某个依赖的名字改错了.</p>
<h1 id="Plugin-with-id-‘android-library’-not-found"><a href="#Plugin-with-id-‘android-library’-not-found" class="headerlink" title="Plugin with id ‘android-library’ not found"></a>Plugin with id ‘android-library’ not found</h1><p>在项目的build.gradle中添加如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.1'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h1><blockquote>
<p>Error:UNEXPECTED TOP-LEVEL ERROR:<br>Error:java.lang.OutOfMemoryError: GC overhead limit exceeded</p>
</blockquote>
<p>编译时内存溢出,需要为为虚拟机分配更大的内存,在module的builg.gradle文件中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    dexOptions &#123;</div><div class="line">        <span class="comment">//incremental true</span></div><div class="line">        javaMaxHeapSize <span class="string">"2048M"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Error-147-Apostrophe-not-preceded-by-in-Cost-can’t-be-empty"><a href="#Error-147-Apostrophe-not-preceded-by-in-Cost-can’t-be-empty" class="headerlink" title="Error:(147) Apostrophe not preceded by \ (in Cost can’t be empty)"></a>Error:(147) Apostrophe not preceded by \ (in Cost can’t be empty)</h1><p>项目中的一个strings.xml文件里有某个string标签中的字符串含有 “ ’ “ 符号，我们只要在 “ ’ “ 符号 之前加 “\” 进行转义就可以解决这个错误，比如把<code>Can’t</code>修改为<code>Can\’t</code>就可以了。</p>
<pre><code>&lt;string name=&quot;cost_no_empty&quot;&gt;Cost can&apos;t be empty&lt;/string&gt; 错误
&lt;string name=&quot;cost_no_empty&quot;&gt;Cost can\&apos;t be empty&lt;/string&gt; 正确
</code></pre><h1 id="XML中无法预览"><a href="#XML中无法预览" class="headerlink" title="XML中无法预览"></a>XML中无法预览</h1><p>提示 <code>Rendering Problems Missing styles</code><br><strong>解决 :</strong><br>选一个App Theme即可,比如 <code>Black.No TitleBar</code></p>
<h1 id="识别不到Genymotion-Device"><a href="#识别不到Genymotion-Device" class="headerlink" title="识别不到Genymotion Device"></a>识别不到Genymotion Device</h1><ol>
<li>打开genymotion.exe , settings -&gt; ADB -&gt; Use custom Android SDK tools</li>
<li>设置sdk的目录位置为你Android studio使用的sdk的目录 , 例如 <code>D:\Dev\Android\sdk</code></li>
<li>将Genymotion Device和AndroidStudio 都重启</li>
</ol>
<h1 id="Error-Execution-failed-for-task-‘-app-packageDebug’-gt-zip-isFile"><a href="#Error-Execution-failed-for-task-‘-app-packageDebug’-gt-zip-isFile" class="headerlink" title="Error:Execution failed for task ‘:app:packageDebug’. &gt; !zip.isFile()"></a>Error:Execution failed for task ‘:app:packageDebug’. &gt; !zip.isFile()</h1><p>顶部工具栏 Clean and Rebuild project 完事</p>
<h1 id="Find-in-Path全局搜索失败"><a href="#Find-in-Path全局搜索失败" class="headerlink" title="Find in Path全局搜索失败"></a>Find in Path全局搜索失败</h1><p>Ctrl+Shift+F 调出Find in path全局搜索页面,输入关键字搜索时,发现明明项目里有这个内容,但是却在Preview界面没有任何结果展示.</p>
<p><strong>解决方案:</strong></p>
<p>Find in path-&gt;Options-&gt;File name filter,把File masks的对勾去掉.就可以正常使用了.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-82dbefdb18ce3176.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FindInPath设置.png"></p>
<h1 id="AndroidStudio2-X目录移动至其他目录"><a href="#AndroidStudio2-X目录移动至其他目录" class="headerlink" title=".AndroidStudio2.X目录移动至其他目录"></a>.AndroidStudio2.X目录移动至其他目录</h1><p>.AndroidStudio2.X 默认放在C盘的C:\Users{yourUsername}/目录下,轻轻松松占用几个G的磁盘空间,不过一般C盘是系统盘,所以希望保留足够的剩余空间.此时可以将此目录剪切到任何地方.然后做如下配置修改:</p>
<p>1.在AndroidStudio安装目录(比如<code>D:\Dev\Android\Android Studio\bin</code>),找到<code>idea.properties</code>配置文件</p>
<p>里面有两个默认配置如下</p>
<pre><code>#---------------------------------------------------------------------
# Uncomment this option if you want to customize path to IDE config folder. Make sure you&apos;re using forward slashes.
#---------------------------------------------------------------------
# idea.config.path=${user.home}/.AndroidStudio/config

#---------------------------------------------------------------------
# Uncomment this option if you want to customize path to IDE system folder. Make sure you&apos;re using forward slashes.
#---------------------------------------------------------------------
# idea.system.path=${user.home}/.AndroidStudio/system
</code></pre><p>2.针对于<code>idea.config.path</code> 和 <code>idea.system.path</code>,可以修改原有默认配置,或者新增均可,然后取消前面的注释符号<code>#</code>即可.<br>比如修改后为</p>
<pre><code>idea.config.path=D:\cache\.AndroidStudio2.3\config
idea.system.path=D:\cache\.AndroidStudio2.3\system
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AndroidStudio自定义配置]]></title>
      <url>/2016/05/06/AndroidStudio%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="AndroidStudio主题"><a href="#AndroidStudio主题" class="headerlink" title="AndroidStudio主题"></a>AndroidStudio主题</h1><p><a href="http://color-themes.com/" target="_blank" rel="external">官方主题站</a>,另外还有一个 <a href="http://www.riaway.com/theme.php" target="_blank" rel="external">国内站点</a>   ,下载速度会快一些.</p>
<p>将主题jar包下载下来 , AS中点击左上角File–&gt;,import settings,导入jar包即可.</p>
<h1 id="AS项目中哪些文件需要保留-哪些是自动生成的"><a href="#AS项目中哪些文件需要保留-哪些是自动生成的" class="headerlink" title="AS项目中哪些文件需要保留,哪些是自动生成的?"></a>AS项目中哪些文件需要保留,哪些是自动生成的?</h1><p>需要保留的有: </p>
<blockquote>
<p>Project下,3个</p>
</blockquote>
<ul>
<li>app</li>
<li>build.gradle</li>
<li>settings.gradle</li>
</ul>
<blockquote>
<p>Module下 , 4个</p>
</blockquote>
<ul>
<li>libs</li>
<li>src</li>
<li>build.gradle</li>
<li>proguard-rules.pro</li>
</ul>
<p>其他全部都是自动生成的 , 均可删除 . 如果要将代码备份留存 , 保留以上文件即可 , 这样可以极大的缩小体积.</p>
<h1 id="取消Android-Studio启动时自动打开上次关闭时的界面"><a href="#取消Android-Studio启动时自动打开上次关闭时的界面" class="headerlink" title="取消Android Studio启动时自动打开上次关闭时的界面"></a>取消Android Studio启动时自动打开上次关闭时的界面</h1><p>Settings–&gt;Appearance Behavior–&gt;System Settings–&gt;取消勾选 Reopen last project on startup</p>
<p>这个如果勾选 , 启动后会直接进入上次退出时正在编辑的界面.   如果不勾选,就会进入初始化主界面.</p>
<h1 id="格式化代码不换行"><a href="#格式化代码不换行" class="headerlink" title="格式化代码不换行"></a>格式化代码不换行</h1><p>File–&gt;Code Style–&gt;java –&gt;Wrapping and  Braces  –&gt;line  breaks<br>把这勾勾去掉   就可以了  </p>
<h1 id="Offline离线模式"><a href="#Offline离线模式" class="headerlink" title="Offline离线模式"></a>Offline离线模式</h1><p>Settings –&gt;Build,Execution,Deployment–&gt;Gradle–&gt;勾选Offline work<br>优点 : 提高项目的编译效率,不用每次都去联网更新.<br>缺点 : 当导入一些其他项目时,可能需要去下载一些依赖,如果离线,则无限下载.导致项目无法使用. 而且很多远程依赖会定期更新,采用离线模式无法达到及时更新.</p>
<h1 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h1><p>1.修改编辑区字体大小<br>Settings–&gt;Editor–&gt;Colors&amp;Fonts–&gt;Font–&gt;Save AS         保存自己的风格.然后就可以修改字体,并使用自定义的风格了.    </p>
<p>2.修改工程目录区字体大小<br>Settings–&gt;Appearance–&gt;修改字体大小即可</p>
<h1 id="添加-更换字体"><a href="#添加-更换字体" class="headerlink" title="添加/更换字体"></a>添加/更换字体</h1><p>Settings–&gt;Editor–&gt;Colors&amp;Fonts–&gt;Font–&gt;Editor Font选项 选择字体喜欢的字体.</p>
<p><strong>Show only monospace fonts</strong> 表示是否 [只显示等宽字体]</p>
<blockquote>
<p>另外,可以去网上搜索下载自己喜欢的字体样式,然后按照如下方式配置</p>
</blockquote>
<ol>
<li>下载字体文件,Windows下使用 <strong>ttf</strong> 格式的字体文件</li>
<li>安装字体文件<ol>
<li>方式1:直接双击ttf文件-&gt;安装(推荐方式)</li>
<li>方式2:把该字体复制粘贴到C:\Windows\Fonts目录下,系统会自动把该字体安装</li>
</ol>
</li>
<li>重启AndroidStudio</li>
</ol>
<p>AndroidStudio的字体默认也是从系统字体中选择的,经过以上配置,就可以使用自己想要的字体了.</p>
<p>个人比较喜欢的字体样式有:</p>
<ul>
<li>consolas</li>
<li>Fira</li>
<li>menlo</li>
<li>monaco</li>
<li>UbuntuMono</li>
<li>Source Code Pro</li>
</ul>
<p>下载地址:</p>
<p><a href="http://download.csdn.net/detail/wangxw725/9855412" target="_blank" rel="external">AndroidStudio常用字体备份</a></p>
<h1 id="代码块-方法分割线"><a href="#代码块-方法分割线" class="headerlink" title="代码块/方法分割线"></a>代码块/方法分割线</h1><p>Settings–&gt;Editor–&gt;General–&gt;Appearance–&gt;Show Method separators    </p>
<h1 id="每行代码最大容量"><a href="#每行代码最大容量" class="headerlink" title="每行代码最大容量"></a>每行代码最大容量</h1><p>Settings–&gt;Editor–&gt;Code Style–&gt;Default Options–&gt;Right margin(columns)</p>
<h1 id="代码提示时忽略大小写"><a href="#代码提示时忽略大小写" class="headerlink" title="代码提示时忽略大小写"></a>代码提示时忽略大小写</h1><p>Settings–&gt;Editor–&gt;General–&gt;Code Completion–&gt;Case sensitive completion–&gt;选择None即可(默认是First Letters)</p>
<h1 id="自定义字体颜色"><a href="#自定义字体颜色" class="headerlink" title="自定义字体颜色"></a>自定义字体颜色</h1><p>Settings–&gt;Editor–&gt;Colors&amp;Fonts–&gt;Language Defaults     点击示例文本中的关键字,可以自动选择名称,修改颜色.</p>
<h1 id="修改代码区背景色"><a href="#修改代码区背景色" class="headerlink" title="修改代码区背景色"></a>修改代码区背景色</h1><p>Settings–&gt;Edito–&gt;colors &amp; fonts–&gt;General–&gt;Text–&gt;default text<br>在右侧选择前景色 , 背景色</p>
<p>个人喜欢使用专家们建议的豆沙绿（RGB：#BEEDBE）or （204,232,207）</p>
<h1 id="修改控制台Logcat颜色"><a href="#修改控制台Logcat颜色" class="headerlink" title="修改控制台Logcat颜色"></a>修改控制台Logcat颜色</h1><p>File–&gt;Settings–&gt;Editor –&gt; Colors &amp;Fonts –&gt; Android Logcat<br>将Use Inberited attributes 去掉勾选 ,然后就可以根据Logcat级别自定义颜色了</p>
<h1 id="自定义文件注释模板"><a href="#自定义文件注释模板" class="headerlink" title="自定义文件注释模板"></a>自定义文件注释模板</h1><p>Settings–&gt;Editor–&gt;File and Code Templates–&gt;Includes–&gt;File Header<br>在里面自定义即可.</p>
<p>比如我的模板是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wangxiwen on $&#123;DATE&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;.</div><div class="line"> * E-mail : wangxw725@gmail.com</div><div class="line"> * Function : </div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>那么每当新创建一个类时,就会带上这个文件头<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by wangxiwen on 2017/4/15 06:44.</div><div class="line"> * E-mail : wangxw725@gmail.com</div><div class="line"> * Function :</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<h1 id="全屏编辑代码"><a href="#全屏编辑代码" class="headerlink" title="全屏编辑代码"></a>全屏编辑代码</h1><p>View–&gt;Enter Presentation Mode</p>
<h1 id="恢复已删除的文件"><a href="#恢复已删除的文件" class="headerlink" title="恢复已删除的文件"></a>恢复已删除的文件</h1><p>VCS–&gt;Local History–&gt;Show History</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 经验总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础-位运算符回顾]]></title>
      <url>/2016/04/01/Java%E5%9F%BA%E7%A1%80-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9B%9E%E9%A1%BE/</url>
      <content type="html"><![CDATA[<p>撸代码时间越长，越体会到的基础知识的重要性，研究原理越多，越感觉到数据结构和算法的重要性。这些东西在日常的业务代码中体会不是很明显，但是一旦稍微往深了研究，立刻就能发现自己不足。</p>
<p>今天在看源码的时候，发现居然忘记了位运算符是怎么玩的了，赶紧回顾了一下，顺便写个笔记记录一下，加深下印象。</p>
<p>位运算符主要针对二进制数，包括以下几种：</p>
<ul>
<li>&amp; 与运算符</li>
<li>| 或运算符</li>
<li>^ 异或运算符</li>
<li>~ 非运算符</li>
</ul>
<blockquote>
<p>&amp; 与运算符</p>
</blockquote>
<p><strong>规则:</strong>两个二进数对应bit位上的数都为1时,值为1,否则为0.类似于求1的交集.</p>
<p>例如:<br>128的二进制表示:00000000 00000000 00000000 10000000<br>129的二进制表示:00000000 00000000 00000000 10000001<br>128&amp;129的结果  :00000000 00000000 00000000 10000000  (十进制值为 128)</p>
<blockquote>
<p>| 或运算符</p>
</blockquote>
<p><strong>规则:</strong>两个二进数对应bit位上的数只要有一个为1,则值为1,否则为0.类似于求1的并集.</p>
<p>例如:<br>128的二进制表示:00000000 00000000 00000000 10000000<br>129的二进制表示:00000000 00000000 00000000 10000001<br>128 | 129的结果 :00000000 00000000 00000000 10000001  (十进制值为 129)</p>
<blockquote>
<p>^ 异或运算符</p>
</blockquote>
<p><strong>规则:</strong>两个二进数对应bit位上的数,相同则为0,不同则为1.</p>
<p>例如:<br>128的二进制表示:00000000 00000000 00000000 10000000<br>129的二进制表示:00000000 00000000 00000000 10000001<br>128 ^ 129的结果:00000000 00000000 00000000 00000001  (十进制值为 1)</p>
<blockquote>
<p>~ 非运算符</p>
</blockquote>
<p><strong>规则:</strong>如果该bit位上数值是0,则为1;如果是1,则为0.也就是取反运算.</p>
<p>例如:<br>129的二进制表示:00000000 00000000 00000000 10000001<br>~129的计算结果 :11111111 11111111 11111111 01111110 (注意此时仍为补码)<br>根据补码求反码 : 11111111 11111111 11111111 01111101<br>根据反码求原码 : 10000000 00000000 00000000 10000010 (十进制值为 -130)</p>
<p><strong>取反公式:</strong> <code>~(x) = -1*(x+1);</code> </p>
<p>例: 6取反=-7 ; 9取反=-10 ; 129取反=-130</p>
<p><strong>代码测试</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> a = <span class="number">128</span>;</div><div class="line">		<span class="keyword">int</span> b = <span class="number">129</span>;</div><div class="line">		System.out.println(<span class="string">"128 &amp; 129: "</span>+(<span class="number">128</span> &amp; <span class="number">129</span>));</div><div class="line">		System.out.println(<span class="string">"128 | 129: "</span>+(<span class="number">128</span> | <span class="number">129</span>));</div><div class="line">		System.out.println(<span class="string">"128 ^ 129: "</span>+(<span class="number">128</span> ^ <span class="number">129</span>));</div><div class="line">		System.out.println(<span class="string">"~129 : "</span>+(~<span class="number">129</span>));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Log输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">128</span> &amp; <span class="number">129</span>: <span class="number">128</span></div><div class="line"><span class="number">128</span> | <span class="number">129</span>: <span class="number">129</span></div><div class="line"><span class="number">128</span> ^ <span class="number">129</span>: <span class="number">1</span></div><div class="line">~<span class="number">129</span> : -<span class="number">130</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github Pages搭建个人博客]]></title>
      <url>/2016/03/10/Hexo+Github%20Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="Github-Pages仓库创建"><a href="#Github-Pages仓库创建" class="headerlink" title="Github Pages仓库创建"></a>Github Pages仓库创建</h1><p>官方教程：<a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a><br>官方教程里已经有很详细的步骤了，这里只是把几个需要注意的地方记录一下。</p>
<ol>
<li>首先必须得有Github账号，作为世界上最大的同性交友网站，越早注册越好，带你进入一个全新的世界！</li>
<li>New Repository时，必须以username.github.io命名，username就是指自己的用户名，例如crocutax.github.io，注意必须严格按照这个格式来命名，否则无效.官网给出的警告是:</li>
</ol>
<blockquote>
<p>If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right.</p>
</blockquote>
<p>3.为仓库配置SSH keys,后期以更加安全的SSH方式管理远程仓库(毕竟是个人博客,还是SSH方式好些)</p>
<p>在电脑任意位置右键打开Git bash窗口（必须已安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>），输入<code>ssh-keygen -t rsa -C &quot;youremailAddress（你的邮箱地址）&quot;</code>，</p>
<p>此时会提示创建密码，此密码会在之后向仓库push时使用，如果为空的话之后push时就不用输入。</p>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-ed5214825a1bdcbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SSH keys"></p>
<p>生成好之后，第二个红圈表示SSH keys生成的位置，在C盘的用户目录下，比如我的是<code>C:\Users\Crocutax\.ssh\</code>，找到该文件夹的位置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-cacbc72488139fcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的ssh keys.png"></p>
<p>将其中的id_rsa.pub （公匙）用文本编辑器打开，复制其中的内容，<br>打开刚刚创建的Github Repository，位置如下：crocutax.github.io–&gt;Settings–&gt;Deploy keys–&gt;Add key</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-3221daef1d84fcff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加公匙.png"></p>
<h1 id="个人域名解析"><a href="#个人域名解析" class="headerlink" title="个人域名解析"></a>个人域名解析</h1><p>购买了域名之后，添加域名解析，即将自己的域名指向哪个具体的主机 IP。</p>
<p>打开dos窗口，输入<code>ping xxx.github.io</code> ，获取到主机IP，如图所示</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-36b156c26a3decdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取主机IP.png"></p>
<p>获取到主机IP后，在域名管理后台进行添加</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-171f8a1ef49d19b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加主机IP.png"></p>
<p>添加完毕后，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-e6b65bdabb917389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析设置完毕.png"></p>
<p>除了这里进行域名解析的设置，要想正常通过<a href="http://www.crocutax.com">http://www.crocutax.com</a> 来访问<a href="http://crocutax.github.io" target="_blank" rel="external">http://crocutax.github.io</a> 的内容，还需要在Repository–&gt;Settings–&gt;Options–&gt;GitHub Pages-Custom domain中进行配置</p>
<p>如图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-9b9246b991bda866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将自己的域名指向github pages域名.png"></p>
<p>这样配置之后，后面等到Hexo初始化完毕后，再完成最后一步：在source/目录下创建一个CNAME文件（后面再说），就可以直接通过<a href="http://www.crocutax.com">http://www.crocutax.com</a> 来访问<a href="http://crocutax.github.io" target="_blank" rel="external">http://crocutax.github.io</a> 的内容了。不过现在我们github仓库里是空的，接下来就开始搭建Hexo环境了。</p>
<h1 id="搭建Hexo环境"><a href="#搭建Hexo环境" class="headerlink" title="搭建Hexo环境"></a>搭建Hexo环境</h1><p>Hexo的运行依靠Node.js，因此需要先 <a href="https://nodejs.org/en/download/" target="_blank" rel="external">安装Node.js</a> 。</p>
<blockquote>
<p>$ npm install -g hexo</p>
</blockquote>
<p>然后继续开启Git bash窗口，输入<code>npm install -g hexo</code>，开始安装Hexo。<br>这里我碰到了一个问题，就是提示</p>
<blockquote>
<p>npm WARN deprecated swig@1.4.2: This package is no longer maintained</p>
</blockquote>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/1958298-37d605ab006c0cb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="This package is no longer maintained.png"></p>
<p>起初以为是报了个错误，于是网上一顿搜，各种更新各种折腾。后来发现，其实一直是在安装中，只是速度慢而已，导致我认为出了错误。通过google，通过<code>npm config set registry &quot;https://registry.npm.taobao.org&quot;</code>设置淘宝镜像源后，很快就安装完毕了，弹出了如下界面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1958298-67b72d43df1b35c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hexo install succeed.png"></p>
<blockquote>
<p>$  hexo init</p>
</blockquote>
<p>Hexo安装完毕后，创建一个想要在此创建网站目录的文件夹，比如我的是D:\Blog，在此处打开Git bash窗口，输入<code>hexo init</code> 进行初始化。</p>
<p>输出以下两个命令<br>$ hexo g<br>$ hexo s</p>
<p>第一个命令用于生成静态文件，第二个命令用于启动本地服务器，此时用浏览器打开<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ，就可以看到hexo内置样式的Blog了。</p>
<blockquote>
<p>创建CNAME文件</p>
</blockquote>
<p>前面提到等Hexo初始化完毕后，需要在source/目录下创建一个CNAME文件，才能最终完成独立域名与Github Pages的绑定。关于CNAME的具体知识我现在还没有去深入的了解，这里只记录使用方法，注意：</p>
<ul>
<li>CNAME文件名全部为大写字母</li>
<li>文件没有后缀名，注意不要创建成CNAME.txt了</li>
<li>文件内容为你的域名，不带<code>http://</code>，比如<code>www.crocutax.com</code>即可</li>
</ul>
<p>其实此时整个基础环境已经搭建完毕了，新建文章，deploy到远程仓库就可以了，但是一般我们都不会满足于hexo默认提供的主题样式，所以接下来开始选择主题。</p>
<h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><p>如果要自定义主题，还是需要耗点时间的，所以为了快速的先把环境搭建起来，最好的方式是用前辈们创建好的主题，有很多<a href="https://hexo.io/themes/" target="_blank" rel="external">官网主题</a>都有漂亮，自己选一个吧！</p>
<p>根据主题提供者的安装，配置步骤，一步一步来就行了。</p>
<p>由于自己长期做Android开发，所以对Material Design风格情有独钟，就选用了<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a>主题，感谢前辈的付出。</p>
<h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><p>可以在官网学习<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">Hexo 指令</a>,常用的有</p>
<ul>
<li>hexo clean (清除缓存文件 (db.json) 和已生成的public目录下的静态文件，在某些情况下，尤其是更换主题后，如果发现对站点的更改无论如何也不生效，可能需要运行该命令)</li>
<li>hexo g  (hexo generate的简化命令，用于生成静态文件)</li>
<li>hexo s (hexo server的简化命令，用于启动本地服务器，一般用于测试)</li>
<li>hexo d (hexo deploy的简化命令，用将本地内容部署到远程仓库)</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>在_config.yml 文件的配置中,必须注意yml文件的语法格式 :　字段＋冒号＋<strong>空格</strong>＋内容，比如<code>url: http://www.crocutax.com/</code> ,这个空格一定不能省,否则会报错</li>
<li>通过<code>hexo s</code> 运行起本地服务之后 ,git bash会显示如下内容<code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code> ,此时按Ctrl+C 是停止运行的作用,而不是我们常用的复制,在这里可以再git bash窗口中通过鼠标右键+copy来复制.</li>
</ul>
<h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><h3 id="Github-pages-的custom-domain重置问题"><a href="#Github-pages-的custom-domain重置问题" class="headerlink" title="Github pages 的custom domain重置问题"></a>Github pages 的custom domain重置问题</h3><p>为了使用<a href="http://www.corcutax.com替代http://corcutax.github.io来访问我们的博客,除了需要设置DNS解析之外,还需要在Github" target="_blank" rel="external">http://www.corcutax.com替代http://corcutax.github.io来访问我们的博客,除了需要设置DNS解析之外,还需要在Github</a> pages–&gt;Settings–&gt;Custom domain中设置.</p>
<p>但是在使用过程中发现 , 每次<code>hexo deploy</code> 之后 , <a href="http://www.corcutax.com" target="_blank" rel="external">http://www.corcutax.com</a> 都会出现404,而<a href="http://corcutax.github.io" target="_blank" rel="external">http://corcutax.github.io</a> 则访问正常.再次来到Github pages–&gt;Settings–&gt;Custom domain , 发现Custom domain已经重置了 . 需要手动再次重新关联.</p>
<p>google了一下 , 网上小伙伴们遇到了同样的问题 , 比如:<br><a href="https://github.com/hexojs/hexo/issues/2446" target="_blank" rel="external">https://github.com/hexojs/hexo/issues/2446</a><br><a href="https://www.zhihu.com/question/28814437" target="_blank" rel="external">https://www.zhihu.com/question/28814437</a></p>
<p>问题原因 : CNAME文件每次部署都被自动删除.<br>解决方案 : 将CNAME文件放在source目录下.</p>
<p>如图:<br><img src="http://upload-images.jianshu.io/upload_images/1958298-ea2a2542d1cea24b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CNAME文件.png"></p>
<p>CNAME文件内容为 : <code>www.crocutax.com</code><br>完事!</p>
<p>部署过程中参考到的网址有：<br><a href="http://www.cnblogs.com/olddoublemoon/p/6629398.html" target="_blank" rel="external">设置DNS解析</a><br><a href="http://www.jianshu.com/p/3bb5f1eac51b" target="_blank" rel="external">CNAME</a><br><a href="http://www.jianshu.com/p/017e01718d41" target="_blank" rel="external">记录第一次搭建Hexo</a><br><a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="external">搭建Hexo博客</a><br><a href="http://www.jianshu.com/p/a2fe56d11c4f" target="_blank" rel="external">搭建Hexo博客中碰到的坑</a></p>
<p>还有一些后期在性能优化上可能会用到，先在此记录：<br><a href="http://login926.github.io/2017/01/19/MomentjsLiveTime/" target="_blank" rel="external">为博客添加运行时间</a><br><a href="https://github.com/wuhaoworld/github-issues-blog" target="_blank" rel="external">解决访问次数限制</a><br><a href="http://baixin.io/2016/06/HEXO_Advanced/" target="_blank" rel="external">Hexo进阶</a><br><a href="http://fezvrasta.github.io/bootstrap-material-design/#about" target="_blank" rel="external">MD插件库</a><br><a href="http://blog.geekaholic.cn/2017/02/22/%E5%88%B6%E4%BD%9CHexo%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/" target="_blank" rel="external">如何自己制作主题</a></p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为什么一定要捯饬个人网站]]></title>
      <url>/2016/03/01/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%80%E5%AE%9A%E8%A6%81%E6%8D%AF%E9%A5%AC%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p>个人对于知识整理的行为 , 经历了如下过程 : </p>
<h1 id="不做笔记阶段"><a href="#不做笔记阶段" class="headerlink" title="不做笔记阶段"></a>不做笔记阶段</h1><p>刚入行的时候，什么都不懂，学着、用着、扔着。</p>
<p><strong>结果：</strong>由于知识点特别多,所以很多不常用到的知识和技能点迅速的忘记。</p>
<h1 id="只做笔记阶段"><a href="#只做笔记阶段" class="headerlink" title="只做笔记阶段"></a>只做笔记阶段</h1><p>在这个过程中，无论是工作中问题的解决，但是自学中的知识点，还是技术类文章中的扩展性技能点，都会简单的记录下来，少则两句话，几行代码，多则百十个字。</p>
<p>或许也是由于这个阶段，自己实在是菜鸟中的菜鸟，所以也不敢发表一些个人对某些技术的理解到公共的平台上。</p>
<p><strong>结果：</strong>工作中遇到任何之前遇到过、或类似的问题 , 都能够通过搜索笔记来迅速定位、解决 。但是发现对很多技术点而言，无论是系统性还是深度上，都没有更好的认知和理解。</p>
<h1 id="尝试在博客平台写博客阶段"><a href="#尝试在博客平台写博客阶段" class="headerlink" title="尝试在博客平台写博客阶段"></a>尝试在博客平台写博客阶段</h1><p>虽然博客在信息传播方面早已被短平快的微博所取代，但是对于知识梳理而言，依然有着不可替代的作用和优势，所以尤其在技术相关的领域，博客目前依然是重要的信息获取和发布媒介。</p>
<p>个人也从底层菜鸟，逐渐成长到 虽然离大神很远但是自认为也不能算是菜鸟的阶段了。</p>
<p>之所以决定写博客有以下因素考虑：</p>
<ul>
<li>从Android角度而言，基础的APP已经没有任何压力了，所有的问题都可以解决，所有的业务需求都可以满足，只是时间长短的问题。但是在深度上还有很长的路要走，而且也很想更进一步。不奢望多么了解Linux内核层，但是想更全面、系统的了解FrameWork层。而记笔记作用很有限，虽然能记录和速查，但是系统性和深度不足。</li>
<li>由于文章是公开发布，而不仅仅是停留在自己的笔记里，所以写作的时候，会更加谨慎，会尽可能从多方面考虑，而在这个过程中，自己无形中在加深了认知，会有更好的学习效果。</li>
<li>能够得到其他人对于该技术点的反馈，发现自己认知上的漏洞、错误。</li>
<li>可以用来装逼、吹牛逼。笔记毕竟只是个人的，没有人知道，吹牛逼也没法吹啊。</li>
</ul>
<p>总体而言，对一个技术点的认知，如果全面认知是10分，个人笔记阶段只是记录自己遇到的某个方面的问题，认知可能只达到了3分，而在准备博客的过程中，会发现更多问题，再学习、再整理，就到了6分7分。发布之后，根据读者对自己的反馈，再学习，可能就到了8分9分。而此时，比之于最初的3分，其实已经进步很多了。</p>
<h1 id="尝试做个人网站阶段"><a href="#尝试做个人网站阶段" class="headerlink" title="尝试做个人网站阶段"></a>尝试做个人网站阶段</h1><p>在使用博客平台过程中，逐渐发现了一些问题，比如：</p>
<ul>
<li>一个博客平台成长到一定阶段，为了企业的收入，注定会引入广告，可能是各种形式，不同位置的广告，比如顶部栏，比如侧边栏，比如悬浮窗…… 从企业角度考虑，这也是无可厚非的。所以无论是从看博客的人来说，还是把这一片空间当做自己家园的写作者来说，都是只能忍。</li>
<li>从最开始走上技术道路到现在，发现自己经常混迹的地方是在不断变化的。无论是技术论坛，还是博客平台。所以虽然目前【简书】是自己比较喜欢的平台，但是……3年后呢？ 5年后呢？（自己5年后还在做技术吗？不知道，是不是想太远了……）</li>
<li>使用博客平台，虽然自己省了太多事，只需要专注写文章就可以了，而且也会有更好的流量，而这种流量也会是激励自己继续研究技术，继续写文章的动力。而且背靠平台也可以更好的吹牛逼，比如：CSDN专家！但是无论如何，还是会受博客平台本身的各种限制，比如内容审核，比如网站版式，比如各种细节处理……</li>
<li>各类平台一般术业有专攻，比如在掘金，CSDN上聊聊生活合适吗？比如【简书】上虽然也有很多技术文章，但是从各种订阅号的更新频率、内容、阅读量来看，明显生活类的文章才是王道啊。</li>
</ul>
<h1 id="最终决定"><a href="#最终决定" class="headerlink" title="最终决定"></a>最终决定</h1><p>做了多种尝试，也考虑了诸多因素以后，最终决定：</p>
<ul>
<li>自建网站 + 第三方博客平台<ul>
<li>自己的大本营永远不变，而且可以随心所欲的自定义</li>
<li>第三方平台同步发布，引流+ 文件托管。无耻的微笑：）</li>
</ul>
</li>
<li>自主域名 + Hexo搭建 + Github Pages托管<ul>
<li>必须把crocutax这个域名给用上，就是喜欢，任性！</li>
<li>选择Hexo，是因为感觉它更Geek，而且目前能力也有限，搞不了太多自定义</li>
<li>Github官方鼓励 + 目前流行 + 不用白不用 + 起步阶段，就先Github Pages吧！</li>
</ul>
</li>
</ul>
<p>差不多就这样，下一篇记录下初步搭建的过程，基础设施的完善 + 重分利用轮子 + 前辈们把轮子都造的很好 = 搭建起来并不费劲。</p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[俞敏洪-励志演讲记录]]></title>
      <url>/2008/10/08/%E4%BF%9E%E6%95%8F%E6%B4%AA-%E5%8A%B1%E5%BF%97%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>老俞的励志演讲总是很能激励人，忘了哪一年，看赢在中国第一季的时候，对老俞的其中两段演讲印象及其深刻，一个是树草论，一个是关于水的理论，当时连续看了很多遍，简直是热泪盈眶。</p>
<p>后来有机会，也曾经在班级里跟同学一起分享过，但是可能内容大家曾经听过了，或者说自己的演讲的像是在背词，或者各位已经彻底堕落的不想再燃起生命的激情了，所以印象中当然大家也没什么自己预期中的比较激动的反馈。</p>
<p>当时《心灵鸡汤》还是一本很正规的系列书籍，而现在倒成了反义词了，而且有了各种反鸡汤。不过这么多年过去了，演讲的内容依然记得很清晰，现在回想起来，摘录如下：</p>
<h1 id="树草论"><a href="#树草论" class="headerlink" title="树草论"></a>树草论</h1><p>人活着有两种方式：</p>
<p>第一种是像草一样的活着，你尽管活着，每年还在成长，<br>但是你毕竟是一棵草，你吸收雨露阳光，但是长不大；<br>人们可以踩过你，但是人们不会因为你的痛苦而让他产生痛苦；<br>人们不会因为你被踩了而来怜悯你，因为人们本身就没有看到你。</p>
<p>所以我们每一个人都应该像树一样的成长，<br>即使我们现在什么都不是，但是只要你有树的种子，<br>即使被人踩到泥土中间，你依然能够吸收泥土的养分，让自己成长起来！</p>
<p>当你长成参天大树以后，<br>遥远的地方人们就能看到你，走近你你能给人一片绿色；<br>活着，是美丽的风景，死了，依然是栋梁之才，活着、死了都有用，<br>这应该是我们每个人做人的标准和成长的标准！</p>
<h1 id="水一样活着"><a href="#水一样活着" class="headerlink" title="水一样活着"></a>水一样活着</h1><p>每一条河流，都有自己不同的生命曲线，但是每条河流都有自己的梦想，那就是奔向大海。</p>
<p>我们的生命，有的时候会是泥沙，你可能慢慢地就会像泥沙一样，沉淀下去了，一旦你沉淀下去了，也许你不用再为了前进而努力了，但是你却永远也见不到阳光了。</p>
<p>所以我建议大家，不管你现在的生命是怎样的，一定要有水的精神，像水一样不断的积蓄自己的力量，不断的冲破障碍。</p>
<p>当你发现时机不到的和时候，把先自己的厚度给积累起来；当有一天时机来临的时候，你就能够奔腾入海，成就自己的生命！</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[篮球与人生]]></title>
      <url>/2007/09/09/%E7%AF%AE%E7%90%83%E4%B8%8E%E4%BA%BA%E7%94%9F/</url>
      <content type="html"><![CDATA[<p>以前各种各样的文章写了不少，有扯淡的、有分析的、有随笔，随着时间的流逝，这些文章不知道都去哪了，而且当时的心境也没了，场景也没了，所以再想复原这些文章的可能性很小了。</p>
<p>这篇文章印象中是大二（2007年）时候写的，当时还在班里给大家进行了演讲，所以印象很深刻。后来文章原文遗失了，然而自己对这篇文章一直念念不忘，所以在将近10年后的今天，又把当年的思路回忆一下，记录在此，以后再也不会丢了。</p>
<p>NBA（National Basketball Association）美国男子职业篮球联赛，是全世界篮球运动员的目标，代表着世界篮球领域的最高水平，也是很多同学的最爱，包括我自己。</p>
<p>我喜欢篮球，除了锻炼身体和体育精神的因素外，还有一个重要原因，就是我发现一个小小的篮球场，其实就是整个人生的缩影。下面将从几个方面进行尝试着分析，篮球和人生到底有什么关系。</p>
<h1 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h1><p>以篮球为职业的人，没有几个是富豪家庭或者权贵家庭出身的，基本上都是普通工人家庭或者贫民窟出身，而且以贫民窟出身居多。这些人可以选择和他们的朋友们一样，在盗窃、大麻、斗殴、帮派纷争中继续生活下去，毕竟这样不需要额外的做些什么，会更加容易一些。</p>
<p>但是这些人选择了不一样的道路，他们或是由于父母引导，或是由于自己想要摆脱那种生活的决心，开始走上篮球场，企图通过自己的努力，去过不一样的生活，去改善家庭的境况，去改变自己的命运。</p>
<p>相对于周围的人来说，他们是值得尊敬的，因为即便他们最终没有进入NBA（真正能进NBA的人真是凤毛麟角），或许只是在打街球，但是起码他们迈出了第一步，他们比那些无所作为的人要值得尊敬，因为他们有改变命运的梦想，并且为之付出努力过。</p>
<h1 id="奋斗"><a href="#奋斗" class="headerlink" title="奋斗"></a>奋斗</h1><ul>
<li>从高中时期就朝5晚7，在NBA依然坚持凌晨四点起床训练的科比（自己训练完四五个小时候，再去继续参加球队的训练）</li>
<li>晚上偷偷翻墙出去训练的阿里纳斯</li>
<li>偏执狂般训练的本华莱士</li>
<li>每年夏天休赛期间坚持针对自己的缺点进行专项训练的詹姆斯</li>
</ul>
<p>这样的例子在NBA比比皆是，论天赋，能进NBA人起码都不弱，所以加强训练成为了他们企图超越别人的方法，这些人总是想方设法的增加一些训练项目，延长自己训练的时间。</p>
<p>每个球队的当家球星并没有因为自己是主力而懈怠，反而更加努力，而且会带动整个球队去训练，因为他们知道，自己的对手更加努力。</p>
<p>有一句话叫：赛场是区分球员和球星的地方，而训练场是区分球星和超级球星的地方。</p>
<h1 id="公平"><a href="#公平" class="headerlink" title="公平"></a>公平</h1><p>一旦上了球场，比赛开始，无论你是权贵出身，还是贫民窟出身；无论是18岁刚进入NBA的愣头青，还是将近40岁的球场老江湖；无论是身高如姚明2.米26之高，还是如博伊金斯1米65之低，大家全部都在一个球场里比赛，以球技论高低，在这里，既可以说公平，也可以说不公平。</p>
<p>说公平，是因为球场的表现是评价一个球员的唯一标准,没有其他太多复杂的干扰因素去影响人们的判断。（当然，球员如果有打架斗殴、杀人放火之类情况并不在此讨论范围内）</p>
<p>说不公平，是因为即使你是初入江湖的18岁少年，依然要和有着多年职业赛经验的老江湖同场竞技，任何人都不会让着你，不会考虑到你缺乏经验而迁就你。同样，姚明并不会因为博伊金斯身高低，就不去帽他，就让着他。</p>
<p>以后我们进入社会，参加工作，将会面临同样的情况。</p>
<h1 id="团队作战"><a href="#团队作战" class="headerlink" title="团队作战"></a>团队作战</h1><p>艾弗森之于76人，詹姆斯之于骑士，科比之于湖人，加特内之于森林狼，哪个人不优秀？他们都是超级球星，都是全明星赛的常客，都是所属球队的绝对主力，但是，篮球是5个人的运动，个人能力再优秀，也无法对抗5个人协作的力量，所以他们几个人都无法单独带领球队取得总冠军奖杯，或无法进入季后赛，或早早的结束季后赛。</p>
<p>而总冠军的有力竞争者，以及获得者经常都是活塞、马刺这种没有超级球星，但是更讲究整体战术的球队。没有了奥尼尔的湖人，不再有OK组合，不再有紫金王朝的辉煌，而奥尼尔和韦德更加融洽的联手，则促成了06年热火队的总冠军。</p>
<p>乔丹的伟大不仅仅在于其优秀的个人能力，而在于乔丹-罗德曼-皮蓬 组合带给公牛的一个又一个联盟总冠军奖杯。回顾NBA的历史我们可以发现，拥有超强个人能力的球星会被球迷们铭记，而依靠团队力量获得总冠军并体现出领袖能力的球星则会被历史铭记。</p>
<h1 id="机会只给准备好了的人"><a href="#机会只给准备好了的人" class="headerlink" title="机会只给准备好了的人"></a>机会只给准备好了的人</h1><p>NBA每年夏天都要选秀，为联盟补充新鲜血液，这是所有人跃龙门的机会。但是首先，你在高中或者大学篮球联赛中要足够优秀，才有可能成为NBA新秀，其次并不是说由于你是今年的状元、榜眼、探花了，就会一定获得额外的青睐，得到特殊的优待，NBA的水货状元多了去了（毕竟所谓状元只是拥有优先顺位的球队去选择自己中意的球员而已，所以看走眼也很正常）。</p>
<p>在新秀赛季，你必须足够的努力，争取更多上场的机会，而在场上，则要珍惜每一个助攻、抢断、篮板、盖帽、得分的机会，向队员、球队管理层、球迷来证明自己的价值。</p>
<p>其实，每一个球员都是如此，新秀如此，板凳球员依然如此，当家球星依然如此。板凳球员一场比赛可能只有几十秒至几分钟的上场时间，抓不住这几分钟的机会，则全场只有鼓掌加油的份，而如果在平时训练和仅有的上场时间中发挥出色，则有可能有最佳第六人或者首发阵容的机会；其实当家球星手感不好的时候，也会被暂时换下，从而给其他球员机会，只是相对而言，当家球星的发挥更稳定些，以及综合能力更强一些而已。</p>
<p>以上所有的一切都是在说，如果机会来了，如何抓住，但是其实机会总是会眷顾所有人，而轮到自己登场时，能不能在这个机会中表现好，就得看自己在这之前的积累程度了。如果平时没有好好训练，能力积累不足，那么等到换上自己上场时，注定没有好的表现，屡次如此，最后面临的可能就是把板凳坐穿、被解约、不再续约、被新秀替代。。。</p>
<p>当然，即使是NBA的最低收入，也比绝大多数工薪阶层的收入要好，或许这些球场上的失意者依然可以过的不错，在酒吧吹吹牛逼、吊个美女等等，但是，这种泯然众人矣的情况，属于值得我们谈起的范畴吗？</p>
<h1 id="商业化"><a href="#商业化" class="headerlink" title="商业化"></a>商业化</h1><p>每一个NBA球员，对于妻子来说，他是丈夫；对于一个家庭来说，他是支柱；对于球迷来说，他是Super Star；但是对于球队来说，他只是商品。</p>
<p>球员的交易就是商品的贸易，选秀大赛就是挑选自己中意的商品，只是这个商品是人而已。任何一个被买走的球员，都得拖家带口举家搬迁到球队所在的城市，去拼尽全力证明自己物有所值，证明老板花钱买自己过来是划算的。</p>
<p>所以当从商业化的角度看待NBA，以及看待工作的时候，我们就会知道，一定要让自己先值钱，先自我证明，才能有老板肯为自己付钱，自己才能有机会去体现自己的价值，这个顺序一定不能颠倒。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
